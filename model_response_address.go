/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResponseAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseAddress{}

// ResponseAddress Address of activity
type ResponseAddress struct {
	// Specifies the id of the location.
	LocationId *string `json:"location_id,omitempty"`
	// Name of location.
	Name *string `json:"name,omitempty"`
	// Longitude of location.
	Lon *float64 `json:"lon,omitempty"`
	// Latitude of location.
	Lat *float64 `json:"lat,omitempty"`
	// Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
	StreetHint *string `json:"street_hint,omitempty"`
	SnappedWaypoint *SnappedWaypoint `json:"snapped_waypoint,omitempty"`
}

// NewResponseAddress instantiates a new ResponseAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseAddress() *ResponseAddress {
	this := ResponseAddress{}
	return &this
}

// NewResponseAddressWithDefaults instantiates a new ResponseAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseAddressWithDefaults() *ResponseAddress {
	this := ResponseAddress{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *ResponseAddress) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *ResponseAddress) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *ResponseAddress) SetLocationId(v string) {
	o.LocationId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResponseAddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResponseAddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResponseAddress) SetName(v string) {
	o.Name = &v
}

// GetLon returns the Lon field value if set, zero value otherwise.
func (o *ResponseAddress) GetLon() float64 {
	if o == nil || IsNil(o.Lon) {
		var ret float64
		return ret
	}
	return *o.Lon
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetLonOk() (*float64, bool) {
	if o == nil || IsNil(o.Lon) {
		return nil, false
	}
	return o.Lon, true
}

// HasLon returns a boolean if a field has been set.
func (o *ResponseAddress) HasLon() bool {
	if o != nil && !IsNil(o.Lon) {
		return true
	}

	return false
}

// SetLon gets a reference to the given float64 and assigns it to the Lon field.
func (o *ResponseAddress) SetLon(v float64) {
	o.Lon = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *ResponseAddress) GetLat() float64 {
	if o == nil || IsNil(o.Lat) {
		var ret float64
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetLatOk() (*float64, bool) {
	if o == nil || IsNil(o.Lat) {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *ResponseAddress) HasLat() bool {
	if o != nil && !IsNil(o.Lat) {
		return true
	}

	return false
}

// SetLat gets a reference to the given float64 and assigns it to the Lat field.
func (o *ResponseAddress) SetLat(v float64) {
	o.Lat = &v
}

// GetStreetHint returns the StreetHint field value if set, zero value otherwise.
func (o *ResponseAddress) GetStreetHint() string {
	if o == nil || IsNil(o.StreetHint) {
		var ret string
		return ret
	}
	return *o.StreetHint
}

// GetStreetHintOk returns a tuple with the StreetHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetStreetHintOk() (*string, bool) {
	if o == nil || IsNil(o.StreetHint) {
		return nil, false
	}
	return o.StreetHint, true
}

// HasStreetHint returns a boolean if a field has been set.
func (o *ResponseAddress) HasStreetHint() bool {
	if o != nil && !IsNil(o.StreetHint) {
		return true
	}

	return false
}

// SetStreetHint gets a reference to the given string and assigns it to the StreetHint field.
func (o *ResponseAddress) SetStreetHint(v string) {
	o.StreetHint = &v
}

// GetSnappedWaypoint returns the SnappedWaypoint field value if set, zero value otherwise.
func (o *ResponseAddress) GetSnappedWaypoint() SnappedWaypoint {
	if o == nil || IsNil(o.SnappedWaypoint) {
		var ret SnappedWaypoint
		return ret
	}
	return *o.SnappedWaypoint
}

// GetSnappedWaypointOk returns a tuple with the SnappedWaypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseAddress) GetSnappedWaypointOk() (*SnappedWaypoint, bool) {
	if o == nil || IsNil(o.SnappedWaypoint) {
		return nil, false
	}
	return o.SnappedWaypoint, true
}

// HasSnappedWaypoint returns a boolean if a field has been set.
func (o *ResponseAddress) HasSnappedWaypoint() bool {
	if o != nil && !IsNil(o.SnappedWaypoint) {
		return true
	}

	return false
}

// SetSnappedWaypoint gets a reference to the given SnappedWaypoint and assigns it to the SnappedWaypoint field.
func (o *ResponseAddress) SetSnappedWaypoint(v SnappedWaypoint) {
	o.SnappedWaypoint = &v
}

func (o ResponseAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Lon) {
		toSerialize["lon"] = o.Lon
	}
	if !IsNil(o.Lat) {
		toSerialize["lat"] = o.Lat
	}
	if !IsNil(o.StreetHint) {
		toSerialize["street_hint"] = o.StreetHint
	}
	if !IsNil(o.SnappedWaypoint) {
		toSerialize["snapped_waypoint"] = o.SnappedWaypoint
	}
	return toSerialize, nil
}

type NullableResponseAddress struct {
	value *ResponseAddress
	isSet bool
}

func (v NullableResponseAddress) Get() *ResponseAddress {
	return v.value
}

func (v *NullableResponseAddress) Set(val *ResponseAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseAddress(val *ResponseAddress) *NullableResponseAddress {
	return &NullableResponseAddress{value: val, isSet: true}
}

func (v NullableResponseAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


