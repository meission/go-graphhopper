/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle struct for Vehicle
type Vehicle struct {
	// Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.
	VehicleId string `json:"vehicle_id"`
	// The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0.
	TypeId *string `json:"type_id,omitempty"`
	// Array of shifts.
	Shifts []Shift `json:"shifts,omitempty"`
	StartAddress *Address `json:"start_address,omitempty"`
	// If this is omitted AND return_to_depot is true then the vehicle needs to return to its start_address.
	EndAddress *Address `json:"end_address,omitempty"`
	Break *VehicleBreak `json:"break,omitempty"`
	// If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location.
	ReturnToDepot *bool `json:"return_to_depot,omitempty"`
	// Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.
	EarliestStart *int64 `json:"earliest_start,omitempty"`
	// Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.
	LatestEnd *int64 `json:"latest_end,omitempty"`
	// Array of skills, i.e. array of string (not case sensitive).
	Skills []string `json:"skills,omitempty"`
	// Specifies the maximum distance (in meters) a vehicle can go.
	MaxDistance *int64 `json:"max_distance,omitempty"`
	// Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)
	MaxDrivingTime *int64 `json:"max_driving_time,omitempty"`
	// Specifies the maximum number of jobs a vehicle can load.
	MaxJobs *int32 `json:"max_jobs,omitempty"`
	// Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”, we will still try to get as close as possible to this constraint.
	MinJobs *int32 `json:"min_jobs,omitempty"`
	// Specifies the maximum number of activities a vehicle can conduct.
	MaxActivities *int32 `json:"max_activities,omitempty"`
	// Indicates whether a vehicle should be moved even though it has not been assigned any jobs.
	MoveToEndAddress *bool `json:"move_to_end_address,omitempty"`
}

type _Vehicle Vehicle

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle(vehicleId string) *Vehicle {
	this := Vehicle{}
	this.VehicleId = vehicleId
	var typeId string = "default-type"
	this.TypeId = &typeId
	var returnToDepot bool = true
	this.ReturnToDepot = &returnToDepot
	var earliestStart int64 = 0
	this.EarliestStart = &earliestStart
	var latestEnd int64 = 9223372036854775807
	this.LatestEnd = &latestEnd
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	var typeId string = "default-type"
	this.TypeId = &typeId
	var returnToDepot bool = true
	this.ReturnToDepot = &returnToDepot
	var earliestStart int64 = 0
	this.EarliestStart = &earliestStart
	var latestEnd int64 = 9223372036854775807
	this.LatestEnd = &latestEnd
	return &this
}

// GetVehicleId returns the VehicleId field value
func (o *Vehicle) GetVehicleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetVehicleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleId, true
}

// SetVehicleId sets field value
func (o *Vehicle) SetVehicleId(v string) {
	o.VehicleId = v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *Vehicle) GetTypeId() string {
	if o == nil || IsNil(o.TypeId) {
		var ret string
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTypeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *Vehicle) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given string and assigns it to the TypeId field.
func (o *Vehicle) SetTypeId(v string) {
	o.TypeId = &v
}

// GetShifts returns the Shifts field value if set, zero value otherwise.
func (o *Vehicle) GetShifts() []Shift {
	if o == nil || IsNil(o.Shifts) {
		var ret []Shift
		return ret
	}
	return o.Shifts
}

// GetShiftsOk returns a tuple with the Shifts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetShiftsOk() ([]Shift, bool) {
	if o == nil || IsNil(o.Shifts) {
		return nil, false
	}
	return o.Shifts, true
}

// HasShifts returns a boolean if a field has been set.
func (o *Vehicle) HasShifts() bool {
	if o != nil && !IsNil(o.Shifts) {
		return true
	}

	return false
}

// SetShifts gets a reference to the given []Shift and assigns it to the Shifts field.
func (o *Vehicle) SetShifts(v []Shift) {
	o.Shifts = v
}

// GetStartAddress returns the StartAddress field value if set, zero value otherwise.
func (o *Vehicle) GetStartAddress() Address {
	if o == nil || IsNil(o.StartAddress) {
		var ret Address
		return ret
	}
	return *o.StartAddress
}

// GetStartAddressOk returns a tuple with the StartAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetStartAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.StartAddress) {
		return nil, false
	}
	return o.StartAddress, true
}

// HasStartAddress returns a boolean if a field has been set.
func (o *Vehicle) HasStartAddress() bool {
	if o != nil && !IsNil(o.StartAddress) {
		return true
	}

	return false
}

// SetStartAddress gets a reference to the given Address and assigns it to the StartAddress field.
func (o *Vehicle) SetStartAddress(v Address) {
	o.StartAddress = &v
}

// GetEndAddress returns the EndAddress field value if set, zero value otherwise.
func (o *Vehicle) GetEndAddress() Address {
	if o == nil || IsNil(o.EndAddress) {
		var ret Address
		return ret
	}
	return *o.EndAddress
}

// GetEndAddressOk returns a tuple with the EndAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEndAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.EndAddress) {
		return nil, false
	}
	return o.EndAddress, true
}

// HasEndAddress returns a boolean if a field has been set.
func (o *Vehicle) HasEndAddress() bool {
	if o != nil && !IsNil(o.EndAddress) {
		return true
	}

	return false
}

// SetEndAddress gets a reference to the given Address and assigns it to the EndAddress field.
func (o *Vehicle) SetEndAddress(v Address) {
	o.EndAddress = &v
}

// GetBreak returns the Break field value if set, zero value otherwise.
func (o *Vehicle) GetBreak() VehicleBreak {
	if o == nil || IsNil(o.Break) {
		var ret VehicleBreak
		return ret
	}
	return *o.Break
}

// GetBreakOk returns a tuple with the Break field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetBreakOk() (*VehicleBreak, bool) {
	if o == nil || IsNil(o.Break) {
		return nil, false
	}
	return o.Break, true
}

// HasBreak returns a boolean if a field has been set.
func (o *Vehicle) HasBreak() bool {
	if o != nil && !IsNil(o.Break) {
		return true
	}

	return false
}

// SetBreak gets a reference to the given VehicleBreak and assigns it to the Break field.
func (o *Vehicle) SetBreak(v VehicleBreak) {
	o.Break = &v
}

// GetReturnToDepot returns the ReturnToDepot field value if set, zero value otherwise.
func (o *Vehicle) GetReturnToDepot() bool {
	if o == nil || IsNil(o.ReturnToDepot) {
		var ret bool
		return ret
	}
	return *o.ReturnToDepot
}

// GetReturnToDepotOk returns a tuple with the ReturnToDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetReturnToDepotOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnToDepot) {
		return nil, false
	}
	return o.ReturnToDepot, true
}

// HasReturnToDepot returns a boolean if a field has been set.
func (o *Vehicle) HasReturnToDepot() bool {
	if o != nil && !IsNil(o.ReturnToDepot) {
		return true
	}

	return false
}

// SetReturnToDepot gets a reference to the given bool and assigns it to the ReturnToDepot field.
func (o *Vehicle) SetReturnToDepot(v bool) {
	o.ReturnToDepot = &v
}

// GetEarliestStart returns the EarliestStart field value if set, zero value otherwise.
func (o *Vehicle) GetEarliestStart() int64 {
	if o == nil || IsNil(o.EarliestStart) {
		var ret int64
		return ret
	}
	return *o.EarliestStart
}

// GetEarliestStartOk returns a tuple with the EarliestStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEarliestStartOk() (*int64, bool) {
	if o == nil || IsNil(o.EarliestStart) {
		return nil, false
	}
	return o.EarliestStart, true
}

// HasEarliestStart returns a boolean if a field has been set.
func (o *Vehicle) HasEarliestStart() bool {
	if o != nil && !IsNil(o.EarliestStart) {
		return true
	}

	return false
}

// SetEarliestStart gets a reference to the given int64 and assigns it to the EarliestStart field.
func (o *Vehicle) SetEarliestStart(v int64) {
	o.EarliestStart = &v
}

// GetLatestEnd returns the LatestEnd field value if set, zero value otherwise.
func (o *Vehicle) GetLatestEnd() int64 {
	if o == nil || IsNil(o.LatestEnd) {
		var ret int64
		return ret
	}
	return *o.LatestEnd
}

// GetLatestEndOk returns a tuple with the LatestEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLatestEndOk() (*int64, bool) {
	if o == nil || IsNil(o.LatestEnd) {
		return nil, false
	}
	return o.LatestEnd, true
}

// HasLatestEnd returns a boolean if a field has been set.
func (o *Vehicle) HasLatestEnd() bool {
	if o != nil && !IsNil(o.LatestEnd) {
		return true
	}

	return false
}

// SetLatestEnd gets a reference to the given int64 and assigns it to the LatestEnd field.
func (o *Vehicle) SetLatestEnd(v int64) {
	o.LatestEnd = &v
}

// GetSkills returns the Skills field value if set, zero value otherwise.
func (o *Vehicle) GetSkills() []string {
	if o == nil || IsNil(o.Skills) {
		var ret []string
		return ret
	}
	return o.Skills
}

// GetSkillsOk returns a tuple with the Skills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetSkillsOk() ([]string, bool) {
	if o == nil || IsNil(o.Skills) {
		return nil, false
	}
	return o.Skills, true
}

// HasSkills returns a boolean if a field has been set.
func (o *Vehicle) HasSkills() bool {
	if o != nil && !IsNil(o.Skills) {
		return true
	}

	return false
}

// SetSkills gets a reference to the given []string and assigns it to the Skills field.
func (o *Vehicle) SetSkills(v []string) {
	o.Skills = v
}

// GetMaxDistance returns the MaxDistance field value if set, zero value otherwise.
func (o *Vehicle) GetMaxDistance() int64 {
	if o == nil || IsNil(o.MaxDistance) {
		var ret int64
		return ret
	}
	return *o.MaxDistance
}

// GetMaxDistanceOk returns a tuple with the MaxDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMaxDistanceOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDistance) {
		return nil, false
	}
	return o.MaxDistance, true
}

// HasMaxDistance returns a boolean if a field has been set.
func (o *Vehicle) HasMaxDistance() bool {
	if o != nil && !IsNil(o.MaxDistance) {
		return true
	}

	return false
}

// SetMaxDistance gets a reference to the given int64 and assigns it to the MaxDistance field.
func (o *Vehicle) SetMaxDistance(v int64) {
	o.MaxDistance = &v
}

// GetMaxDrivingTime returns the MaxDrivingTime field value if set, zero value otherwise.
func (o *Vehicle) GetMaxDrivingTime() int64 {
	if o == nil || IsNil(o.MaxDrivingTime) {
		var ret int64
		return ret
	}
	return *o.MaxDrivingTime
}

// GetMaxDrivingTimeOk returns a tuple with the MaxDrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMaxDrivingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDrivingTime) {
		return nil, false
	}
	return o.MaxDrivingTime, true
}

// HasMaxDrivingTime returns a boolean if a field has been set.
func (o *Vehicle) HasMaxDrivingTime() bool {
	if o != nil && !IsNil(o.MaxDrivingTime) {
		return true
	}

	return false
}

// SetMaxDrivingTime gets a reference to the given int64 and assigns it to the MaxDrivingTime field.
func (o *Vehicle) SetMaxDrivingTime(v int64) {
	o.MaxDrivingTime = &v
}

// GetMaxJobs returns the MaxJobs field value if set, zero value otherwise.
func (o *Vehicle) GetMaxJobs() int32 {
	if o == nil || IsNil(o.MaxJobs) {
		var ret int32
		return ret
	}
	return *o.MaxJobs
}

// GetMaxJobsOk returns a tuple with the MaxJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMaxJobsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxJobs) {
		return nil, false
	}
	return o.MaxJobs, true
}

// HasMaxJobs returns a boolean if a field has been set.
func (o *Vehicle) HasMaxJobs() bool {
	if o != nil && !IsNil(o.MaxJobs) {
		return true
	}

	return false
}

// SetMaxJobs gets a reference to the given int32 and assigns it to the MaxJobs field.
func (o *Vehicle) SetMaxJobs(v int32) {
	o.MaxJobs = &v
}

// GetMinJobs returns the MinJobs field value if set, zero value otherwise.
func (o *Vehicle) GetMinJobs() int32 {
	if o == nil || IsNil(o.MinJobs) {
		var ret int32
		return ret
	}
	return *o.MinJobs
}

// GetMinJobsOk returns a tuple with the MinJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMinJobsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinJobs) {
		return nil, false
	}
	return o.MinJobs, true
}

// HasMinJobs returns a boolean if a field has been set.
func (o *Vehicle) HasMinJobs() bool {
	if o != nil && !IsNil(o.MinJobs) {
		return true
	}

	return false
}

// SetMinJobs gets a reference to the given int32 and assigns it to the MinJobs field.
func (o *Vehicle) SetMinJobs(v int32) {
	o.MinJobs = &v
}

// GetMaxActivities returns the MaxActivities field value if set, zero value otherwise.
func (o *Vehicle) GetMaxActivities() int32 {
	if o == nil || IsNil(o.MaxActivities) {
		var ret int32
		return ret
	}
	return *o.MaxActivities
}

// GetMaxActivitiesOk returns a tuple with the MaxActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMaxActivitiesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxActivities) {
		return nil, false
	}
	return o.MaxActivities, true
}

// HasMaxActivities returns a boolean if a field has been set.
func (o *Vehicle) HasMaxActivities() bool {
	if o != nil && !IsNil(o.MaxActivities) {
		return true
	}

	return false
}

// SetMaxActivities gets a reference to the given int32 and assigns it to the MaxActivities field.
func (o *Vehicle) SetMaxActivities(v int32) {
	o.MaxActivities = &v
}

// GetMoveToEndAddress returns the MoveToEndAddress field value if set, zero value otherwise.
func (o *Vehicle) GetMoveToEndAddress() bool {
	if o == nil || IsNil(o.MoveToEndAddress) {
		var ret bool
		return ret
	}
	return *o.MoveToEndAddress
}

// GetMoveToEndAddressOk returns a tuple with the MoveToEndAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetMoveToEndAddressOk() (*bool, bool) {
	if o == nil || IsNil(o.MoveToEndAddress) {
		return nil, false
	}
	return o.MoveToEndAddress, true
}

// HasMoveToEndAddress returns a boolean if a field has been set.
func (o *Vehicle) HasMoveToEndAddress() bool {
	if o != nil && !IsNil(o.MoveToEndAddress) {
		return true
	}

	return false
}

// SetMoveToEndAddress gets a reference to the given bool and assigns it to the MoveToEndAddress field.
func (o *Vehicle) SetMoveToEndAddress(v bool) {
	o.MoveToEndAddress = &v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vehicle_id"] = o.VehicleId
	if !IsNil(o.TypeId) {
		toSerialize["type_id"] = o.TypeId
	}
	if !IsNil(o.Shifts) {
		toSerialize["shifts"] = o.Shifts
	}
	if !IsNil(o.StartAddress) {
		toSerialize["start_address"] = o.StartAddress
	}
	if !IsNil(o.EndAddress) {
		toSerialize["end_address"] = o.EndAddress
	}
	if !IsNil(o.Break) {
		toSerialize["break"] = o.Break
	}
	if !IsNil(o.ReturnToDepot) {
		toSerialize["return_to_depot"] = o.ReturnToDepot
	}
	if !IsNil(o.EarliestStart) {
		toSerialize["earliest_start"] = o.EarliestStart
	}
	if !IsNil(o.LatestEnd) {
		toSerialize["latest_end"] = o.LatestEnd
	}
	if !IsNil(o.Skills) {
		toSerialize["skills"] = o.Skills
	}
	if !IsNil(o.MaxDistance) {
		toSerialize["max_distance"] = o.MaxDistance
	}
	if !IsNil(o.MaxDrivingTime) {
		toSerialize["max_driving_time"] = o.MaxDrivingTime
	}
	if !IsNil(o.MaxJobs) {
		toSerialize["max_jobs"] = o.MaxJobs
	}
	if !IsNil(o.MinJobs) {
		toSerialize["min_jobs"] = o.MinJobs
	}
	if !IsNil(o.MaxActivities) {
		toSerialize["max_activities"] = o.MaxActivities
	}
	if !IsNil(o.MoveToEndAddress) {
		toSerialize["move_to_end_address"] = o.MoveToEndAddress
	}
	return toSerialize, nil
}

func (o *Vehicle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vehicle_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle := _Vehicle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle)

	if err != nil {
		return err
	}

	*o = Vehicle(varVehicle)

	return err
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


