/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteResponsePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteResponsePath{}

// RouteResponsePath struct for RouteResponsePath
type RouteResponsePath struct {
	// The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 
	Distance *float64 `json:"distance,omitempty"`
	// The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 
	Time *int64 `json:"time,omitempty"`
	// The total ascent, in meters. 
	Ascend *float64 `json:"ascend,omitempty"`
	// The total descent, in meters. 
	Descend *float64 `json:"descend,omitempty"`
	Points *RouteResponsePathPoints `json:"points,omitempty"`
	SnappedWaypoints *RouteResponsePathSnappedWaypoints `json:"snapped_waypoints,omitempty"`
	// Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays of coordinates. See the field description for more information on the two formats. 
	PointsEncoded *bool `json:"points_encoded,omitempty"`
	// The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`. 
	Bbox []float64 `json:"bbox,omitempty"`
	// The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading, so be mindful when using them for navigation. 
	Instructions []RouteResponsePathInstructionsInner `json:"instructions,omitempty"`
	// Details, as requested with the `details` parameter. Consider the value `{\"street_name\": [[0,2,\"Frankfurter Straße\"],[2,6,\"Zollweg\"]]}`. In this example, the route uses two streets: The first, Frankfurter Straße, is used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539). 
	Details map[string]interface{} `json:"details,omitempty"`
	// An array of indices (zero-based), specifiying the order in which the input points are visited. Only present if the `optimize` parameter was used. 
	PointsOrder []int32 `json:"points_order,omitempty"`
}

// NewRouteResponsePath instantiates a new RouteResponsePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteResponsePath() *RouteResponsePath {
	this := RouteResponsePath{}
	return &this
}

// NewRouteResponsePathWithDefaults instantiates a new RouteResponsePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteResponsePathWithDefaults() *RouteResponsePath {
	this := RouteResponsePath{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *RouteResponsePath) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *RouteResponsePath) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *RouteResponsePath) SetDistance(v float64) {
	o.Distance = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *RouteResponsePath) GetTime() int64 {
	if o == nil || IsNil(o.Time) {
		var ret int64
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *RouteResponsePath) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int64 and assigns it to the Time field.
func (o *RouteResponsePath) SetTime(v int64) {
	o.Time = &v
}

// GetAscend returns the Ascend field value if set, zero value otherwise.
func (o *RouteResponsePath) GetAscend() float64 {
	if o == nil || IsNil(o.Ascend) {
		var ret float64
		return ret
	}
	return *o.Ascend
}

// GetAscendOk returns a tuple with the Ascend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetAscendOk() (*float64, bool) {
	if o == nil || IsNil(o.Ascend) {
		return nil, false
	}
	return o.Ascend, true
}

// HasAscend returns a boolean if a field has been set.
func (o *RouteResponsePath) HasAscend() bool {
	if o != nil && !IsNil(o.Ascend) {
		return true
	}

	return false
}

// SetAscend gets a reference to the given float64 and assigns it to the Ascend field.
func (o *RouteResponsePath) SetAscend(v float64) {
	o.Ascend = &v
}

// GetDescend returns the Descend field value if set, zero value otherwise.
func (o *RouteResponsePath) GetDescend() float64 {
	if o == nil || IsNil(o.Descend) {
		var ret float64
		return ret
	}
	return *o.Descend
}

// GetDescendOk returns a tuple with the Descend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetDescendOk() (*float64, bool) {
	if o == nil || IsNil(o.Descend) {
		return nil, false
	}
	return o.Descend, true
}

// HasDescend returns a boolean if a field has been set.
func (o *RouteResponsePath) HasDescend() bool {
	if o != nil && !IsNil(o.Descend) {
		return true
	}

	return false
}

// SetDescend gets a reference to the given float64 and assigns it to the Descend field.
func (o *RouteResponsePath) SetDescend(v float64) {
	o.Descend = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *RouteResponsePath) GetPoints() RouteResponsePathPoints {
	if o == nil || IsNil(o.Points) {
		var ret RouteResponsePathPoints
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetPointsOk() (*RouteResponsePathPoints, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *RouteResponsePath) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given RouteResponsePathPoints and assigns it to the Points field.
func (o *RouteResponsePath) SetPoints(v RouteResponsePathPoints) {
	o.Points = &v
}

// GetSnappedWaypoints returns the SnappedWaypoints field value if set, zero value otherwise.
func (o *RouteResponsePath) GetSnappedWaypoints() RouteResponsePathSnappedWaypoints {
	if o == nil || IsNil(o.SnappedWaypoints) {
		var ret RouteResponsePathSnappedWaypoints
		return ret
	}
	return *o.SnappedWaypoints
}

// GetSnappedWaypointsOk returns a tuple with the SnappedWaypoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetSnappedWaypointsOk() (*RouteResponsePathSnappedWaypoints, bool) {
	if o == nil || IsNil(o.SnappedWaypoints) {
		return nil, false
	}
	return o.SnappedWaypoints, true
}

// HasSnappedWaypoints returns a boolean if a field has been set.
func (o *RouteResponsePath) HasSnappedWaypoints() bool {
	if o != nil && !IsNil(o.SnappedWaypoints) {
		return true
	}

	return false
}

// SetSnappedWaypoints gets a reference to the given RouteResponsePathSnappedWaypoints and assigns it to the SnappedWaypoints field.
func (o *RouteResponsePath) SetSnappedWaypoints(v RouteResponsePathSnappedWaypoints) {
	o.SnappedWaypoints = &v
}

// GetPointsEncoded returns the PointsEncoded field value if set, zero value otherwise.
func (o *RouteResponsePath) GetPointsEncoded() bool {
	if o == nil || IsNil(o.PointsEncoded) {
		var ret bool
		return ret
	}
	return *o.PointsEncoded
}

// GetPointsEncodedOk returns a tuple with the PointsEncoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetPointsEncodedOk() (*bool, bool) {
	if o == nil || IsNil(o.PointsEncoded) {
		return nil, false
	}
	return o.PointsEncoded, true
}

// HasPointsEncoded returns a boolean if a field has been set.
func (o *RouteResponsePath) HasPointsEncoded() bool {
	if o != nil && !IsNil(o.PointsEncoded) {
		return true
	}

	return false
}

// SetPointsEncoded gets a reference to the given bool and assigns it to the PointsEncoded field.
func (o *RouteResponsePath) SetPointsEncoded(v bool) {
	o.PointsEncoded = &v
}

// GetBbox returns the Bbox field value if set, zero value otherwise.
func (o *RouteResponsePath) GetBbox() []float64 {
	if o == nil || IsNil(o.Bbox) {
		var ret []float64
		return ret
	}
	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetBboxOk() ([]float64, bool) {
	if o == nil || IsNil(o.Bbox) {
		return nil, false
	}
	return o.Bbox, true
}

// HasBbox returns a boolean if a field has been set.
func (o *RouteResponsePath) HasBbox() bool {
	if o != nil && !IsNil(o.Bbox) {
		return true
	}

	return false
}

// SetBbox gets a reference to the given []float64 and assigns it to the Bbox field.
func (o *RouteResponsePath) SetBbox(v []float64) {
	o.Bbox = v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *RouteResponsePath) GetInstructions() []RouteResponsePathInstructionsInner {
	if o == nil || IsNil(o.Instructions) {
		var ret []RouteResponsePathInstructionsInner
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetInstructionsOk() ([]RouteResponsePathInstructionsInner, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *RouteResponsePath) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []RouteResponsePathInstructionsInner and assigns it to the Instructions field.
func (o *RouteResponsePath) SetInstructions(v []RouteResponsePathInstructionsInner) {
	o.Instructions = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *RouteResponsePath) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *RouteResponsePath) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *RouteResponsePath) SetDetails(v map[string]interface{}) {
	o.Details = v
}

// GetPointsOrder returns the PointsOrder field value if set, zero value otherwise.
func (o *RouteResponsePath) GetPointsOrder() []int32 {
	if o == nil || IsNil(o.PointsOrder) {
		var ret []int32
		return ret
	}
	return o.PointsOrder
}

// GetPointsOrderOk returns a tuple with the PointsOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePath) GetPointsOrderOk() ([]int32, bool) {
	if o == nil || IsNil(o.PointsOrder) {
		return nil, false
	}
	return o.PointsOrder, true
}

// HasPointsOrder returns a boolean if a field has been set.
func (o *RouteResponsePath) HasPointsOrder() bool {
	if o != nil && !IsNil(o.PointsOrder) {
		return true
	}

	return false
}

// SetPointsOrder gets a reference to the given []int32 and assigns it to the PointsOrder field.
func (o *RouteResponsePath) SetPointsOrder(v []int32) {
	o.PointsOrder = v
}

func (o RouteResponsePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteResponsePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Ascend) {
		toSerialize["ascend"] = o.Ascend
	}
	if !IsNil(o.Descend) {
		toSerialize["descend"] = o.Descend
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.SnappedWaypoints) {
		toSerialize["snapped_waypoints"] = o.SnappedWaypoints
	}
	if !IsNil(o.PointsEncoded) {
		toSerialize["points_encoded"] = o.PointsEncoded
	}
	if !IsNil(o.Bbox) {
		toSerialize["bbox"] = o.Bbox
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.PointsOrder) {
		toSerialize["points_order"] = o.PointsOrder
	}
	return toSerialize, nil
}

type NullableRouteResponsePath struct {
	value *RouteResponsePath
	isSet bool
}

func (v NullableRouteResponsePath) Get() *RouteResponsePath {
	return v.value
}

func (v *NullableRouteResponsePath) Set(val *RouteResponsePath) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteResponsePath) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteResponsePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteResponsePath(val *RouteResponsePath) *NullableRouteResponsePath {
	return &NullableRouteResponsePath{value: val, isSet: true}
}

func (v NullableRouteResponsePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteResponsePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


