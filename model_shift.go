/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Shift type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Shift{}

// Shift Shift of vehicle.
type Shift struct {
	// A unique identifier for this vehicle's shift.
	ShiftId *string `json:"shift_id,omitempty"`
	StartAddress *Address `json:"start_address,omitempty"`
	// If this is omitted AND return_to_depot is true then the vehicle needs to return to its start_address.
	EndAddress *Address `json:"end_address,omitempty"`
	// Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.
	EarliestStart *int64 `json:"earliest_start,omitempty"`
	// Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.
	LatestEnd *int64 `json:"latest_end,omitempty"`
	// If true, vehicle returns to its start location (or specified end location). If false, vehicle can end at any customer location that optimizes the objective function.
	ReturnToDepot *bool `json:"return_to_depot,omitempty"`
	Break *VehicleBreak `json:"break,omitempty"`
}

// NewShift instantiates a new Shift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShift() *Shift {
	this := Shift{}
	var earliestStart int64 = 0
	this.EarliestStart = &earliestStart
	var latestEnd int64 = 9223372036854775807
	this.LatestEnd = &latestEnd
	var returnToDepot bool = true
	this.ReturnToDepot = &returnToDepot
	return &this
}

// NewShiftWithDefaults instantiates a new Shift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShiftWithDefaults() *Shift {
	this := Shift{}
	var earliestStart int64 = 0
	this.EarliestStart = &earliestStart
	var latestEnd int64 = 9223372036854775807
	this.LatestEnd = &latestEnd
	var returnToDepot bool = true
	this.ReturnToDepot = &returnToDepot
	return &this
}

// GetShiftId returns the ShiftId field value if set, zero value otherwise.
func (o *Shift) GetShiftId() string {
	if o == nil || IsNil(o.ShiftId) {
		var ret string
		return ret
	}
	return *o.ShiftId
}

// GetShiftIdOk returns a tuple with the ShiftId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetShiftIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShiftId) {
		return nil, false
	}
	return o.ShiftId, true
}

// HasShiftId returns a boolean if a field has been set.
func (o *Shift) HasShiftId() bool {
	if o != nil && !IsNil(o.ShiftId) {
		return true
	}

	return false
}

// SetShiftId gets a reference to the given string and assigns it to the ShiftId field.
func (o *Shift) SetShiftId(v string) {
	o.ShiftId = &v
}

// GetStartAddress returns the StartAddress field value if set, zero value otherwise.
func (o *Shift) GetStartAddress() Address {
	if o == nil || IsNil(o.StartAddress) {
		var ret Address
		return ret
	}
	return *o.StartAddress
}

// GetStartAddressOk returns a tuple with the StartAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetStartAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.StartAddress) {
		return nil, false
	}
	return o.StartAddress, true
}

// HasStartAddress returns a boolean if a field has been set.
func (o *Shift) HasStartAddress() bool {
	if o != nil && !IsNil(o.StartAddress) {
		return true
	}

	return false
}

// SetStartAddress gets a reference to the given Address and assigns it to the StartAddress field.
func (o *Shift) SetStartAddress(v Address) {
	o.StartAddress = &v
}

// GetEndAddress returns the EndAddress field value if set, zero value otherwise.
func (o *Shift) GetEndAddress() Address {
	if o == nil || IsNil(o.EndAddress) {
		var ret Address
		return ret
	}
	return *o.EndAddress
}

// GetEndAddressOk returns a tuple with the EndAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetEndAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.EndAddress) {
		return nil, false
	}
	return o.EndAddress, true
}

// HasEndAddress returns a boolean if a field has been set.
func (o *Shift) HasEndAddress() bool {
	if o != nil && !IsNil(o.EndAddress) {
		return true
	}

	return false
}

// SetEndAddress gets a reference to the given Address and assigns it to the EndAddress field.
func (o *Shift) SetEndAddress(v Address) {
	o.EndAddress = &v
}

// GetEarliestStart returns the EarliestStart field value if set, zero value otherwise.
func (o *Shift) GetEarliestStart() int64 {
	if o == nil || IsNil(o.EarliestStart) {
		var ret int64
		return ret
	}
	return *o.EarliestStart
}

// GetEarliestStartOk returns a tuple with the EarliestStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetEarliestStartOk() (*int64, bool) {
	if o == nil || IsNil(o.EarliestStart) {
		return nil, false
	}
	return o.EarliestStart, true
}

// HasEarliestStart returns a boolean if a field has been set.
func (o *Shift) HasEarliestStart() bool {
	if o != nil && !IsNil(o.EarliestStart) {
		return true
	}

	return false
}

// SetEarliestStart gets a reference to the given int64 and assigns it to the EarliestStart field.
func (o *Shift) SetEarliestStart(v int64) {
	o.EarliestStart = &v
}

// GetLatestEnd returns the LatestEnd field value if set, zero value otherwise.
func (o *Shift) GetLatestEnd() int64 {
	if o == nil || IsNil(o.LatestEnd) {
		var ret int64
		return ret
	}
	return *o.LatestEnd
}

// GetLatestEndOk returns a tuple with the LatestEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetLatestEndOk() (*int64, bool) {
	if o == nil || IsNil(o.LatestEnd) {
		return nil, false
	}
	return o.LatestEnd, true
}

// HasLatestEnd returns a boolean if a field has been set.
func (o *Shift) HasLatestEnd() bool {
	if o != nil && !IsNil(o.LatestEnd) {
		return true
	}

	return false
}

// SetLatestEnd gets a reference to the given int64 and assigns it to the LatestEnd field.
func (o *Shift) SetLatestEnd(v int64) {
	o.LatestEnd = &v
}

// GetReturnToDepot returns the ReturnToDepot field value if set, zero value otherwise.
func (o *Shift) GetReturnToDepot() bool {
	if o == nil || IsNil(o.ReturnToDepot) {
		var ret bool
		return ret
	}
	return *o.ReturnToDepot
}

// GetReturnToDepotOk returns a tuple with the ReturnToDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetReturnToDepotOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnToDepot) {
		return nil, false
	}
	return o.ReturnToDepot, true
}

// HasReturnToDepot returns a boolean if a field has been set.
func (o *Shift) HasReturnToDepot() bool {
	if o != nil && !IsNil(o.ReturnToDepot) {
		return true
	}

	return false
}

// SetReturnToDepot gets a reference to the given bool and assigns it to the ReturnToDepot field.
func (o *Shift) SetReturnToDepot(v bool) {
	o.ReturnToDepot = &v
}

// GetBreak returns the Break field value if set, zero value otherwise.
func (o *Shift) GetBreak() VehicleBreak {
	if o == nil || IsNil(o.Break) {
		var ret VehicleBreak
		return ret
	}
	return *o.Break
}

// GetBreakOk returns a tuple with the Break field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shift) GetBreakOk() (*VehicleBreak, bool) {
	if o == nil || IsNil(o.Break) {
		return nil, false
	}
	return o.Break, true
}

// HasBreak returns a boolean if a field has been set.
func (o *Shift) HasBreak() bool {
	if o != nil && !IsNil(o.Break) {
		return true
	}

	return false
}

// SetBreak gets a reference to the given VehicleBreak and assigns it to the Break field.
func (o *Shift) SetBreak(v VehicleBreak) {
	o.Break = &v
}

func (o Shift) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Shift) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShiftId) {
		toSerialize["shift_id"] = o.ShiftId
	}
	if !IsNil(o.StartAddress) {
		toSerialize["start_address"] = o.StartAddress
	}
	if !IsNil(o.EndAddress) {
		toSerialize["end_address"] = o.EndAddress
	}
	if !IsNil(o.EarliestStart) {
		toSerialize["earliest_start"] = o.EarliestStart
	}
	if !IsNil(o.LatestEnd) {
		toSerialize["latest_end"] = o.LatestEnd
	}
	if !IsNil(o.ReturnToDepot) {
		toSerialize["return_to_depot"] = o.ReturnToDepot
	}
	if !IsNil(o.Break) {
		toSerialize["break"] = o.Break
	}
	return toSerialize, nil
}

type NullableShift struct {
	value *Shift
	isSet bool
}

func (v NullableShift) Get() *Shift {
	return v.value
}

func (v *NullableShift) Set(val *Shift) {
	v.value = val
	v.isSet = true
}

func (v NullableShift) IsSet() bool {
	return v.isSet
}

func (v *NullableShift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShift(val *Shift) *NullableShift {
	return &NullableShift{value: val, isSet: true}
}

func (v NullableShift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


