/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Optimization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Optimization{}

// Optimization This contains all optimization specific configurations.
type Optimization struct {
	// If you use groups, you sometimes want to place orders without group assignment in the best position, i.e. sometimes in the middle of a group and not before or after the group. This is not allowed by default. However, if this field here is \"true\", these orders (without a group assignment) can be inserted freely.
	FreeInsertion *bool `json:"free_insertion,omitempty"`
}

// NewOptimization instantiates a new Optimization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimization() *Optimization {
	this := Optimization{}
	var freeInsertion bool = false
	this.FreeInsertion = &freeInsertion
	return &this
}

// NewOptimizationWithDefaults instantiates a new Optimization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizationWithDefaults() *Optimization {
	this := Optimization{}
	var freeInsertion bool = false
	this.FreeInsertion = &freeInsertion
	return &this
}

// GetFreeInsertion returns the FreeInsertion field value if set, zero value otherwise.
func (o *Optimization) GetFreeInsertion() bool {
	if o == nil || IsNil(o.FreeInsertion) {
		var ret bool
		return ret
	}
	return *o.FreeInsertion
}

// GetFreeInsertionOk returns a tuple with the FreeInsertion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Optimization) GetFreeInsertionOk() (*bool, bool) {
	if o == nil || IsNil(o.FreeInsertion) {
		return nil, false
	}
	return o.FreeInsertion, true
}

// HasFreeInsertion returns a boolean if a field has been set.
func (o *Optimization) HasFreeInsertion() bool {
	if o != nil && !IsNil(o.FreeInsertion) {
		return true
	}

	return false
}

// SetFreeInsertion gets a reference to the given bool and assigns it to the FreeInsertion field.
func (o *Optimization) SetFreeInsertion(v bool) {
	o.FreeInsertion = &v
}

func (o Optimization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Optimization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FreeInsertion) {
		toSerialize["free_insertion"] = o.FreeInsertion
	}
	return toSerialize, nil
}

type NullableOptimization struct {
	value *Optimization
	isSet bool
}

func (v NullableOptimization) Get() *Optimization {
	return v.value
}

func (v *NullableOptimization) Set(val *Optimization) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimization) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimization(val *Optimization) *NullableOptimization {
	return &NullableOptimization{value: val, isSet: true}
}

func (v NullableOptimization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


