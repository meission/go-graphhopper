/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GeocodingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeocodingResponse{}

// GeocodingResponse struct for GeocodingResponse
type GeocodingResponse struct {
	Hits []GeocodingLocation `json:"hits,omitempty"`
	// in ms
	Took *float32 `json:"took,omitempty"`
}

// NewGeocodingResponse instantiates a new GeocodingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeocodingResponse() *GeocodingResponse {
	this := GeocodingResponse{}
	return &this
}

// NewGeocodingResponseWithDefaults instantiates a new GeocodingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeocodingResponseWithDefaults() *GeocodingResponse {
	this := GeocodingResponse{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *GeocodingResponse) GetHits() []GeocodingLocation {
	if o == nil || IsNil(o.Hits) {
		var ret []GeocodingLocation
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingResponse) GetHitsOk() ([]GeocodingLocation, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *GeocodingResponse) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []GeocodingLocation and assigns it to the Hits field.
func (o *GeocodingResponse) SetHits(v []GeocodingLocation) {
	o.Hits = v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *GeocodingResponse) GetTook() float32 {
	if o == nil || IsNil(o.Took) {
		var ret float32
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingResponse) GetTookOk() (*float32, bool) {
	if o == nil || IsNil(o.Took) {
		return nil, false
	}
	return o.Took, true
}

// HasTook returns a boolean if a field has been set.
func (o *GeocodingResponse) HasTook() bool {
	if o != nil && !IsNil(o.Took) {
		return true
	}

	return false
}

// SetTook gets a reference to the given float32 and assigns it to the Took field.
func (o *GeocodingResponse) SetTook(v float32) {
	o.Took = &v
}

func (o GeocodingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeocodingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Took) {
		toSerialize["took"] = o.Took
	}
	return toSerialize, nil
}

type NullableGeocodingResponse struct {
	value *GeocodingResponse
	isSet bool
}

func (v NullableGeocodingResponse) Get() *GeocodingResponse {
	return v.value
}

func (v *NullableGeocodingResponse) Set(val *GeocodingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGeocodingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGeocodingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeocodingResponse(val *GeocodingResponse) *NullableGeocodingResponse {
	return &NullableGeocodingResponse{value: val, isSet: true}
}

func (v NullableGeocodingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeocodingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


