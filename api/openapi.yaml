openapi: 3.1.0
info:
  contact:
    email: support@graphhopper.com
    name: Support
    url: https://www.graphhopper.com/
  description: "\nIntegrate A-to-B route planning, turn-by-turn navigation,\nroute\
    \ optimization, isochrone calculations, location clustering and other tools into\
    \ your application.\n\n  ##### Authentication\n  \n  1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)\n\
    \  2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)\n\
    \n  Authenticate to the API by passing your key as a query parameter in every\
    \ request.\n\n  ##### API Explorer\n\n  You can also try all API parts without\
    \ registration in our [API explorer](https://explorer.graphhopper.com/).\n\n \
    \ ##### Client Libraries\n\n  To speed up development and make coding easier,\
    \ we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client)\
    \ and a\n  [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).\n\
    \n  ##### Optimize Response Speed\n\n  1. Reuse SSL/TLS sessions\n\n  You should\
    \ utilize the SSL session to speed up responses after the initial response or\
    \ use a library that does this. E.g. for Java the\n  [OkHttp library](https://square.github.io/okhttp/)\
    \ automatically reuses SSL/TLS sessions and also the browser takes care of this\
    \ automatically.\n  For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/):\
    \ first you create a\n  session (`session = requests.Session()`) and then do requests\
    \ only with this session instead of directly using \"requests\".\n\n  2. Bandwidth\
    \ reduction\n\n  If you create your own client, make sure it supports http/2 and\
    \ gzipped responses for best speed.\n  If you use the Matrix, the Route Optimization\
    \ API or the  and want to solve large problems, we recommend you to reduce bandwidth\n\
    \  by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4)\
    \ and specifying the header\n  as follows: `Content-Encoding: gzip`. This will\
    \ also avoid the HTTP 413 error \"Request Entity Too Large\".\n"
  termsOfService: https://www.graphhopper.com/terms/
  title: GraphHopper Directions API
  version: 1.0.0
  x-logo:
    url: img/graphhopper-logo.svg
    altText: GraphHopper
servers:
- url: https://graphhopper.com/api/1
security:
- api_key: []
tags:
- description: "\nThe default data source is [OpenStreetMap](https://www.openstreetmap.org)\
    \ and as an alternative we have also integrated TomTom.\n\n# OpenStreetMap\n\n\
    #### Geographical Coverage\n\n[OpenStreetMap](https://www.openstreetmap.org) covers\
    \ the whole world. If you want to see for yourself if we can provide data suitable\
    \ for your region,\nplease visit [GraphHopper Maps](https://graphhopper.com/maps/).\n\
    You can edit and modify OpenStreetMap data if you find that important information\
    \ is missing, e.g. a weight limit for a bridge.\n[Here](https://wiki.openstreetmap.org/wiki/Beginners%27_guide)\
    \ is a beginner's guide that shows how to add data. If you have edited data, we\
    \ usually consider your data after 1 week at the latest.\n\n#### Standard Routing\
    \ Profiles\n\nThe Routing, Matrix and Route Optimization APIs support the following\
    \ profiles. But also see the section about customized profiles below the table.\n\
    \nName             | Description           | Restrictions                    \
    \    | Icon\n-----------------|:----------------------|:------------------------------------|:---------------------------------------------------------\n\
    car              | Car mode              | car access, weight=2500kg, width=2m,\
    \ height=2m           | ![car image](./img/car.png)\ncar_avoid_motorway | Car\
    \ mode            | like car that heavily penalizes motorways        | ![car image](./img/car.png)\n\
    car_avoid_ferry    | Car mode            | like car that heavily penalizes ferries\
    \          | ![car image](./img/car.png)\ncar_avoid_toll     | Car mode      \
    \      | like car that heavily penalizes tolls and ferries| ![car image](./img/car.png)\n\
    small_truck        | Small truck like a Mercedes Sprinter, Ford Transit or Iveco\
    \ Daily | height=2.7m, width=2+0.28m, length=5.5m, weight=2080+1400 kg | ![small\
    \ truck image](./img/small_truck.png)\ntruck              | Truck like a MAN or\
    \ Mercedes-Benz Actros              | height=3.7m, width=2.6+0.34m, length=12m,\
    \ weight=13000+13000 kg, hgv=yes, 3 Axes | ![truck image](./img/truck.png)\nscooter\
    \            | Moped mode          | Fast inner city, often used for food delivery,\
    \ is able to ignore certain bollards, maximum speed of roughly 50km/h. weight=300kg,\
    \ width=1m, height=2m | ![scooter image](./img/scooter.png)\nfoot       | Pedestrian\
    \ or walking without dangerous [SAC-scales](https://wiki.openstreetmap.org/wiki/Key:sac_scale)\
    \ | foot access         | ![foot image](./img/foot.png)\nhike       | Pedestrian\
    \ or walking with priority for more beautiful hiking tours and potentially a bit\
    \ longer than `foot`. Walking duration is influenced by elevation differences.\
    \  | foot access         | ![hike image](./img/hike.png)\nbike       | Trekking\
    \ bike avoiding hills | bike access         | ![Bike image](./img/bike.png)\n\
    mtb        | Mountainbike                 | bike access         | ![Mountainbike\
    \ image](./img/mtb.png)\nracingbike | Bike preferring roads        | bike access\
    \         | ![Racingbike image](./img/racingbike.png)\necargobike | Similar to\
    \ racingbike but a bit faster and with width constraints. Currently only available\
    \ upon request. | bike access but without steps and footways | ![Racingbike image](./img/racingbike.png)\n\
    as_the_crow_flies | Only available for the Cluster API. Uses the straight-line\
    \ (or \"direct\") distance. This allows to use 5x more customers than the contractual\
    \ \"locations\" limit defines. | -         | -\n\nPlease note:\n\n * the free\
    \ package supports only the routing profiles `car`, `bike` or `foot`\n * up to\
    \ 3 different routing profiles can be used in a single request towards the Route\
    \ Optimization API. The number of vehicles is unaffected and depends on your subscription.\n\
    \ * we offer custom routing profiles with different properties, different speed\
    \ profiles or different access options. To find out more about custom profiles,\
    \ see [the documentation](#tag/Profile-API) and [contact us](https://www.graphhopper.com/contact-form/).\n\
    \ * a sophisticated `motorcycle` profile is available up on request. It is powered\
    \ by the [Kurviger](https://kurviger.de/en) Routing API and favors curves and\
    \ slopes while avoiding cities and highways.\n \n#### Customized Routing Profiles\n\
    \nYou can also adjust the speeds, access options and much more by using customized\
    \ routing profiles. We offer this for the Routing API (see the section about [Custom\
    \ Models](#tag/Custom-Model)). For interested customers we offer the [Profiles\
    \ API](#tag-API) that can be used for matrix calculations and route optimiztion\
    \ as well.\n\n\n# TomTom\n\nIf you want to include traffic, you can purchase the\
    \ TomTom Add-on.\nThis Add-on only uses TomTom's road network and historical traffic\
    \ information.\nLive traffic is not yet considered. If you are interested to learn\
    \ how we consider traffic information, we recommend that you read [this article](https://www.graphhopper.com/blog/2017/11/06/time-dependent-optimization/).\n\
    \nPlease note the following:\n\n * Currently we only offer this for our [Route\
    \ Optimization API](#tag/Route-Optimization-API). [Contact us](https://www.graphhopper.com/contact-form/)\
    \ if you would like to use it for the Matrix or Routing API.\n * In addition to\
    \ our terms, you need to accept TomTom's [End User License Aggreement](https://www.graphhopper.com/tomtom-end-user-license-agreement/).\n\
    \ * We do *not* use TomTom's web services. We only use their data with our software.\n\
    \ \n[Contact us](https://www.graphhopper.com/contact-form/) if you want to buy\
    \ this TomTom add-on.\n\n#### Geographical Coverage\n\nWe offer\n\n- Europe including\
    \ Russia\n- North, Central and South America\n- Saudi Arabia and United Arab Emirates\n\
    - South Africa\n- Southeast Asia\n- Australia\n\n#### Supported Vehicle Profiles\n\
    \nName       | Description           | Restrictions              | Icon\n-----------|:----------------------|:--------------------------|:---------------------------------------------------------\n\
    car        | Car mode              | car access                | ![car image](./img/car.png)\n\
    small_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily\
    \ | height=2.7m, width=2+0.28m, length=5.5m, weight=2080+1400 kg | ![small truck\
    \ image](./img/small_truck.png)\n"
  name: Map Data and Routing Profiles
- description: "The Route Optimization API can be used to solve [traveling salesman](https://en.wikipedia.org/wiki/Travelling_salesman_problem)\
    \ or [vehicle routing problems](https://en.wikipedia.org/wiki/Vehicle_routing_problem).\n\
    You can use our [API Explorer](https://explorer.graphhopper.com/) to explore Route\
    \ Optimization.\nIf you have successfully solved the first problem, we recommend\
    \ this tutorial - [Getting Started with the Optimization API](https://www.graphhopper.com/blog/2019/05/17/getting-started-with-the-optimization-api-traveling-salesman-problem/).\n\
    It shows and describes the essential elements to model your vehicle routing problem.\n\
    \nFurther reading: \n- [How to solve a traveling salesman problem with a week-planning\
    \ horizon?](https://www.graphhopper.com/blog/2020/07/15/how-to-solve-a-traveling-salesman-problem-with-a-week-planning-horizon-and-driver-shifts/)\n\
    - [How to schedule technicians with skills and multiple dependencies between tasks?](https://www.graphhopper.com/blog/2016/06/03/how-to-route-technicians-with-skills-and-multiple-dependencies-between-tasks/)\n\
    - [What is the difference between the min. of completion time and min. transport\
    \ time?](https://www.graphhopper.com/blog/2016/06/20/what-is-the-difference-between-the-minimization-of-completion-time-and-minimizing-transport-time/)\n\
    - [How to model multiple delivery routes with a single vehicle?](https://www.graphhopper.com/blog/2016/07/21/how-to-model-multiple-delivery-routes-with-a-single-vehicle/)\n"
  name: Route Optimization
- description: |
    The Routing API calculates the best path connecting two or more points, where the meaning of ''best'' depends on the vehicle profile and use case.
    Besides path coordinates it can return turn-by-turn instructions, elevation, [path details](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/) and other useful information about the route.

    Use our [API Explorer](https://explorer.graphhopper.com/) to explore the Routing API.
  name: Routing
- name: Matrices
- description: |
    _Geocoding_ describes the process of transforming an textual address representation to a coordinate (`latitude,longitude`).
    For example the conversion from `Berlin` to `52.5170365,13.3888599`.

    _Reverse geocoding_ converts a coordinate to a textual address representation or place name. Find out more about Geocoding itself on [Wikipedia](http://en.wikipedia.org/wiki/Geocoding).
  name: Geocoding
- description: |
    An isochrone of a location is ''a line connecting points at which a vehicle arrives at the same time'', see Wikipedia.
    With the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.

    Some possible areas in which this API may be useful to you:

    - real estate analysis
    - realtors
    - vehicle scheduling
    - geomarketing
    - reach of electric vehicles
    - transport planning
    - logistics (distribution and retail network planning)

    See the [clients](#section/API-Clients) section in the main documentation, and [our API explorer](https://explorer.graphhopper.com/).
  name: Isochrones
- description: |
    You can snap measured GPS points typically as GPX files to a digital
    road network to e.g. clean data or attach certain data like elevation or turn instructions to it.

    See the [clients](#section/API-Clients) section in the main documentation, and [our API explorer](https://explorer.graphhopper.com/).

    The cost for one request depends on the number of GPS location and is documented [here](https://graphhopper.com/api/1/docs/FAQ/).

    One request should not exceed the Map Matching API location limit depending on the package, see the pricing in our dashboard.
  name: Map Matching
- description: |
    It solves the “capacity clustering problem” by assigning a set of customers to a given number of distinct groups (called clusters).
    The API “clusters” by minimizing the total distance from each individual customer to its designated group median.
    It can also consider minimum and maximum capacity restrictions for each group.

    Clustering can be used in many practical applications.
    For example, it can help to plan territories, i.e. territory optimization for field teams with large territories for field workers,
    or to solve large vehicle routing problems (VRP).

    Try Clustering in our [API Explorer](https://explorer.graphhopper.com/)!

    The idea is to divide a certain number of customers, a pre-specified number of clusters. As already written above, a distribution is sought that minimizes the total cost (e.g. distance or time or a function of distance and time).
    We currently support two approaches.

    1. You can simply define a certain number of clusters via configuration ("clustering" with empty set of "clusters") and additionally how many customers should be in such a cluster.
    This is defined by an upper and lower limit ("min_quantity" and "max_quantity). The algorithm then searches for suitable clusters and divides the customers into these clusters.

    2. You can explicitly define clusters via "clusters". In this way, each individual cluster can be defined.
    This approach not only allows each cluster to have its own capacity upper and lower bound, but each cluster can also be assigned a fixed cluster center.
    In contrast to 1. the algorithm then does not search for a suitable center, but assigns the customers given the fixed centers to each cluster. Note that if you define clusters
    explicitly, any configuration of "clustering" will be overwritten by these explicit clusters.
  name: Clustering
- description: "\nA custom model allows you to modify the default routing behavior\
    \ of a vehicle profile by specifying a set of rules in JSON language.\nThere are\
    \ three JSON properties to change a profile: `priority`, `speed` and `distance_influence`\
    \ that are described in great detail in the next sections and you can get a quick\
    \ overview in this [example-driven blog post](https://www.graphhopper.com/blog/2020/05/31/examples-for-customizable-routing/).\n\
    \nBut first we will give an introductory example for each of these JSON properties.\
    \ Let's start with `speed`:\n\n```json\n{\n  \"speed\": [{\n    \"if\": \"road_class\
    \ == MOTORWAY\",\n    \"limit_to\": \"90\"\n  }]\n}\n```\n\nAs you might have\
    \ already guessed this limits the speed on motorways to 90km/h.\nChanging the\
    \ speed will of course change the travel time, but at the same time this makes\
    \ other road classes more likely as well, so you can use this model to avoid motorways.\n\
    \nYou can immediately try this out in the Browser [on GraphHopper Maps](https://graphhopper.com/maps/?point=50.856527%2C12.876127&point=51.02952%2C13.295603&profile=car&custom_model=%7B%22speed%22%3A%5B%7B%22if%22%3A%22road_class+=%3D+MOTORWAY%22%2C%22limit_to%22%3A%2290%22%7D%5D%7D).\n\
    GraphHopper Maps offers an interactive text editor to comfortably enter custom\
    \ models.\nYou can open it by pressing the \"custom\" button. It will check the\
    \ syntax of your custom model and mark errors in red. You can press\nCtrl+Space\
    \ or Alt+Enter to retrieve auto-complete suggestions. Pressing Ctrl+Enter will\
    \ send a routing request for the\ncustom model you entered. To disable the custom\
    \ model you click the \"custom\" button again.\n\n\nIn the second example we show\
    \ how to avoid certain road classes without changing the travel time:\n\n```json\n\
    {\n  \"priority\": [{\n    \"if\": \"road_class == LIVING_STREET || road_class\
    \ == RESIDENTIAL || road_class == UNCLASSIFIED\",\n    \"multiply_by\": \"0.1\"\
    \n  }]\n}\n```\n\nThis example avoids certain smaller streets. [View it in GraphHopper\
    \ Maps](https://graphhopper.com/maps/?point=51.125708%2C13.067915&point=51.125964%2C13.082271&profile=car&custom_model=%7B%22priority%22%3A%5B%7B%22if%22%3A%22road_class+=%3D+LIVING_STREET+%7C%7C+road_class+%3D%3D+RESIDENTIAL+%7C%7C+road_class+%3D%3D+UNCLASSIFIED%22%2C%22multiply_by%22%3A%220.1%22%7D%5D%7D).\n\
    \nThe third example shows how to prefer shortest paths:\n\n```json\n{\n  \"distance_influence\"\
    : 200\n}\n```\n\n[View this example in GraphHopper Maps](https://graphhopper.com/maps/?point=51.04188%2C13.057766&point=51.057527%2C13.068237&profile=car&custom_model=%7B%22distance_influence%22%3A200%7D).\n\
    \nThere is a fourth JSON property `areas` that allows you to define areas that\
    \ can then be used in the `if` or `else_if` conditions for `speed` and `priority`.\n\
    Please read more about this and the other properties below and try some examples\
    \ in\n[GraphHopper Maps](https://graphhopper.com/maps/) with the help of\n[this\
    \ blog post](https://www.graphhopper.com/blog/2020/05/31/examples-for-customizable-routing/).\n\
    \n\n## Customizing speed\n\nWhen using custom models you do not need to define\
    \ rules that specify a speed for every road segment, but rather GraphHopper\n\
    assumes a default speed. All you need to do is adjust this default speed to your\
    \ use-case as you will always use the custom \nmodel in conjunction with a routing\
    \ profile which is used to determine the default speed.\n\nThe custom model is\
    \ a JSON object and the first property we will learn about here is the `speed`\
    \ property. The `speed`\nproperty's value is a list of conditional statements\
    \ that modify the default speed. Every such statement consists of a\ncondition\
    \ and an operation. The different statements are applied to the default speed\
    \ from top to bottom, i.e.\nstatements that come later in the list are applied\
    \ to the resulting value of previous operations. Each statement is only\nexecuted\
    \ if the corresponding condition applies for the current road segment. This will\
    \ become more clear in the following\nexamples.\n\nCurrently the custom model\
    \ language supports two operators:\n\n- `multiply_by` multiplies the speed value\
    \ with a given number\n- `limit_to` limits the speed value to a given number\n\
    \n#### Conditional multiplication\n\nLet's start with a simple example using `multiply_by`:\n\
    \n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"road_class == MOTORWAY\"\
    ,\n      \"multiply_by\": \"0.5\"\n    }\n  ]\n}\n```\n\nThis custom model reduces\
    \ the speed of every road segment for which the `road_class` attribute is `MOTORWAY`\
    \ to\nfifty percent of the default speed (the default speed is multiplied by `0.5`).\
    \ Again, the default speed is the speed\nthat GraphHopper would normally use for\
    \ the profile's vehicle. Note the `if` clause which means that the operation\n\
    (`multiply_by`) is only applied *if* the condition `road_class == MOTORWAY` is\
    \ fulfilled for the road segment under\nconsideration. The `==` indicates equality,\
    \ i.e. the condition reads \"the road_class equals MOTORWAY\". If you're a bit\n\
    familiar with programming note that the condition (the value of the `if` key)\
    \ is just a boolean condition in Java\nlanguage (other programming languages like\
    \ C or JavaScript are very similar in this regard). A more complex condition\n\
    could look like this: `road_class == PRIMARY || road_class == TERTIARY` which\
    \ uses the **or**\n(`||`) operator and literally means \"road_class equals PRIMARY\
    \ or road_class equals TERTIARY\".\n\nThere can be multiple such 'if statements'\
    \ in the speed section, and they are evaluated from top to bottom:\n\n```json\n\
    {\n  \"speed\": [\n    {\n      \"if\": \"road_class == MOTORWAY\",\n      \"\
    multiply_by\": \"0.5\"\n    },\n    {\n      \"if\": \"road_class == PRIMARY ||\
    \ road_environment == TUNNEL\",\n      \"multiply_by\": \"0.7\"\n    }\n  ]\n\
    }\n```\n\nIn this example the default speed of road segments with `road_class\
    \ == MOTORWAY` will be multiplied by `0.5`, the default speed\nof road segments\
    \ with `road_class == PRIMARY` will be multiplied by `0.7` and for road segments\
    \ with both `road_class == MOTORWAY` and\n`road_environment == TUNNEL` the default\
    \ speed will be multiplied first by `0.5` and then by `0.7`. So overall the\n\
    default speed will be multiplied by `0.35`. For road segments with `road_class\
    \ == PRIMARY` and `road_environment == TUNNEL` we\nonly multiply by `0.7`, even\
    \ though both parts of the second condition apply. It only matters whether the\
    \ road segment matches\nthe condition or not.\n\n`road_class` and `road_environment`\
    \ are road attributes of 'enum' type, i.e. their value can only be one of a fixed\
    \ set of\nvalues, like `MOTORWAY` for `road_class`.\n\nOther road attributes like\
    \ `road_class_link` are of `boolean` type. They can be used as conditions directly,\
    \ for example:\n\n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"road_class_link\"\
    ,\n      \"multiply_by\": \"0.6\"\n    }\n  ]\n}\n```\n\nwhich means that for\
    \ road segments with `road_class_link==true` the speed factor will be `0.6`.\n\
    \nFor attributes with numeric values, like `max_width` you should not use the\
    \ `==` (equality) or `!=` (\ninequality) operators, but the numerical comparison\
    \ operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<`, or\n\"\
    smaller or equals\" `<=`, e.g.:\n\n```json\n{\n  \"speed\": [\n    {\n      \"\
    if\": \"max_width < 2.5\",\n      \"multiply_by\": \"0.8\"\n    }\n  ]\n}\n```\
    \ \n\nwhich means that for all road segments with `max_width` smaller than `2.5m`\
    \ the speed is multiplied by `0.8`.\n\n\n### Conditional capping\n\nBesides the\
    \ `multiply_by` operator there is also the `limit_to` operator. As the name suggests\
    \ `limit_to` limits the\ncurrent value to the given value. Take this example:\n\
    \n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"road_class == MOTORWAY\"\
    ,\n      \"multiply_by\": \"0.8\"\n    },\n    {\n      \"if\": \"surface == GRAVEL\"\
    ,\n      \"limit_to\": \"60\"\n    }\n  ]\n}\n```\n\nThis implies that on all\
    \ road segments with the `GRAVEL` value for `surface` the speed will be at most\
    \ `60km/h`,\nregardless of the default speed and the previous rules. So for a\
    \ road segment with `road_class == MOTORWAY`,\n`surface == GRAVEL` and default\
    \ speed `100` the first statement reduces the speed from `100` to `80` and the\
    \ second\nstatement further reduces the speed from `80` to `60`. If the `road_class`\
    \ was `PRIMARY` and the default speed was `50`\nthe first rule would not apply\
    \ and the second rule would do nothing, because limiting `50` to `60` still yields\
    \ `50`.\n\nA common use-case for the `limit_to` operation is the following pattern:\n\
    \n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"true\",\n      \"limit_to\"\
    : \"90\"\n    }\n  ]\n}\n```\n\nwhich means that the speed is limited to `90km/h`\
    \ for all road segments regardless of its properties. The condition\n\"`true`\"\
    \ is always fulfilled.\n\n### Conditionals with multiple branches\n\nThe `else`\
    \ statement allows you to define that some operations should be applied if an\
    \ road segment does **not** match a\ncondition. So this example:\n\n```json\n\
    {\n  \"speed\": [\n    {\n      \"if\": \"road_class == MOTORWAY\",\n      \"\
    multiply_by\": \"0.5\"\n    },\n    {\n      \"else\": \"\",\n      \"limit_to\"\
    : \"50\"\n    }\n  ]\n}\n```\n\nmeans that for all road segments with `road_class\
    \ == MOTORWAY` we multiply the default speed by `0.5` and for all others we\n\
    limit the default speed to `50` (but never both).\n\nIn case you want to distinguish\
    \ more than two cases (road segments that match or match not a condition) you\
    \ can use `else_if`\nstatements which are only evaluated in case the previous\
    \ `if` or `else_if` statement did **not** match:\n\n```json\n{\n  \"speed\": [\n\
    \    {\n      \"if\": \"road_class == MOTORWAY\",\n      \"multiply_by\": \"0.5\"\
    \n    },\n    {\n      \"else_if\": \"road_environment == TUNNEL\",\n      \"\
    limit_to\": \"70\"\n    },\n    {\n      \"else\": \"\",\n      \"multiply_by\"\
    : \"0.9\"\n    }\n  ]\n}\n```\n\nSo if the first condition matches (`road_class\
    \ == MOTORWAY`) the default speed is multiplied by `0.5`, but the other two\n\
    statements are ignored. Only if the first statement does not match (e.g. `road_class\
    \ == PRIMARY`) the second statement\nis even considered and only if it matches\
    \ (`road_environment == TUNNEL`) the default speed is limited to 70. The last\n\
    operation (`multiply_by: \"0.9\"`) is only applied if both previous conditions\
    \ did not match.\n\n`else` and `else_if` statements always require a preceding\
    \ `if` or `else_if` statement. However, there can be multiple\n'blocks' of subsequent\
    \ `if/else_if/else` statements in the list of rules for `speed`.\n\n`else_if`\
    \ is useful for example in case you have multiple `multiply_by` operations, but\
    \ you do not want that the speed\ngets reduced by all of them. For the following\
    \ model\n\n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"road_class == MOTORWAY\"\
    ,\n      \"multiply_by\": \"0.5\"\n    },\n    {\n      \"else_if\": \"road_environment\
    \ == TUNNEL\",\n      \"multiply_by\": \"0.8\"\n    }\n  ]\n}\n```\n\nonly the\
    \ first factor (`0.5`) will be applied even for road segments that fulfill both\
    \ conditions.\n\n## Limit rules to certain areas\n\nYou can not only modify the\
    \ speed of road segments based on properties, like we saw in the previous examples,\
    \ but you\ncan also modify the speed of road segments based on their location.\
    \ To do this you need to first create and add some\nareas to the `areas` section\
    \ of the custom model. You can then use the name of these areas in the conditions\
    \ of your\n`if/else/else_if` statements.\n\nIn the following example we multiply\
    \ the speed of all road segments in an area called `custom1` with `0.7` and also\
    \ limit it\nto `50km/h`. Note that each area's name needs to be prefixed with\
    \ `in_`:\n\n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"in_custom1\",\n\
    \      \"multiply_by\": \"0.7\"\n    },\n    {\n      \"if\": \"in_custom1\",\n\
    \      \"limit_to\": \"50\"\n    }\n  ],\n  \"areas\": {\n    \"type\": \"FeatureCollection\"\
    ,\n    \"features\": [{\n      \"type\": \"Feature\",\n      \"id\": \"custom1\"\
    ,\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\"\
    : [\n          [\n            [\n              1.525,\n              42.511\n\
    \            ],\n            [\n              1.510,\n              42.503\n \
    \           ],\n            [\n              1.531,\n              42.495\n  \
    \          ],\n            [\n              1.542,\n              42.505\n   \
    \         ],\n            [\n              1.525,\n              42.511\n    \
    \        ]\n          ]\n        ]\n      }\n    }]\n  }\n}\n```\n\nAreas are\
    \ given in GeoJson format (FeatureCollection). Currently a member of this collection\
    \ must be a `Feature` with a\ngeometry type `Polygon`. Note that the coordinates\
    \ array of `Polygon` is an array of arrays that\neach must describe a closed ring,\
    \ i.e. the first point must be equal to the last, identical to the GeoJSON specs.\n\
    Each point is given as an array [longitude, latitude], so the `coordinates` array\
    \ has three dimensions total.\n\nUsing the `areas` feature you can also block\
    \ entire areas i.e. by multiplying the speed with `0`, but for this you\nshould\
    \ rather use the `priority` section that we will explain next.\n\n## Customizing\
    \ priority\n\nMake sure you read the introductory section of this document to\
    \ learn what the `priority` factor means. In short it\nallows similar modifications\
    \ as `speed`, but instead of modifying the road segment weights *and* travel times\
    \ it will only\naffect the weights. By default, the priority is `1` for every\
    \ road segment, so it does not affect the weight. However,\nchanging the priority\
    \ of a road can yield a relative weight difference in comparison to other roads.\n\
    \nCustomizing the `priority` works very much like changing the `speed`, so in\
    \ case you did not read the section about\n`speed` you should go back there and\
    \ read it now. The only real difference is that there is no `limit_to` operator\
    \ for\n`priority`. As a quick reminder here is an example for priority:\n\n```json\n\
    {\n  \"priority\": [\n    {\n      \"if\": \"road_class == MOTORWAY\",\n     \
    \ \"multiply_by\": \"0.5\"\n    },\n    {\n      \"else_if\": \"road_class ==\
    \ SECONDARY\",\n      \"multiply_by\": \"0.9\"\n    },\n    {\n      \"if\": \"\
    road_environment == TUNNEL\",\n      \"multiply_by\": \"0.1\"\n    }\n  ]\n}\n\
    ```\n\nmeans that road segments with `road_class==MOTORWAY` and `road_environment==TUNNEL`\
    \ get priority `0.5*0.1=0.05` and\nthose with `road_class==SECONDARY` and no TUNNEL,\
    \ get priority `0.9` and so on.\n\nEdges with lower priority values will be less\
    \ likely part of the optimal route calculated by GraphHopper, higher values\n\
    mean that these road segments shall be preferred. If you do not want to state\
    \ which road segments shall be avoided, but\nrather which ones shall be preferred,\
    \ you need to **decrease** the priority of others:\n\n```json\n{\n  \"priority\"\
    : [\n    {\n      \"if\": \"road_class != CYCLEWAY\",\n      \"multiply_by\":\
    \ \"0.8\"\n    }\n  ]\n}\n```\n\nmeans decreasing the priority for all road_classes\
    \ *except* cycleways.\n\nJust like we saw for `speed` you can also adjust the\
    \ priority for road segments in a certain area. It works exactly the\nsame way:\n\
    \n```json\n{\n  \"priority\": [\n    {\n      \"if\": \"in_custom1\",\n      \"\
    multiply_by\": \"0.7\"\n    }\n  ]\n}\n```\n\nTo block an entire area set the\
    \ priority value to `0`. You can even set the priority only for certain roads\
    \ in an area\nlike this:\n\n```json\n{\n  \"priority\": [\n    {\n      \"if\"\
    : \"road_class == MOTORWAY && in_custom1\",\n      \"multiply_by\": \"0.1\"\n\
    \    }\n  ]\n}\n```\n\nSome other useful attributes to restrict access to certain\
    \ roads depending on your vehicle dimensions are the\nfollowing:\n\n```json\n\
    {\n  \"priority\": [\n    {\n      \"if\": \"max_width < 2.5\",\n      \"multiply_by\"\
    : \"0\"\n    },\n    {\n      \"if\": \"max_length < 10\",\n      \"multiply_by\"\
    : \"0\"\n    },\n    {\n      \"if\": \"max_weight < 3.5\",\n      \"multiply_by\"\
    : \"0\"\n    }\n  ]\n}\n```\n\nwhich means that the priority for all road segments\
    \ that allow a maximum vehicle width of `2.5m`, a maximum vehicle\nlength of `10m`\
    \ or a maximum vehicle weight of `3.5tons`, or less, is zero, i.e. these \"narrow\"\
    \ road segments are\nblocked.\n\n## Customizing distance_influence\n\nThe `distance_influence`\
    \ property allows you to control the trade-off between a fast route (minimum time)\
    \ and a short route\n(minimum distance). The larger `distance_influence` is the\
    \ more GraphHopper will prioritize routes with a small\ntotal distance. More precisely,\
    \ the `distance_influence` is the time you need to save on a detour (a longer\
    \ distance\nroute option) such that you prefer taking the detour compared to a\
    \ shorter route. Please note that this value is a number, not a string.\n\nA value\
    \ of `100` means that one extra kilometer of detour must save you `100s` of travelling\
    \ time or else you are not \nwilling to take the detour. Or to put it another\
    \ way, if a reference route takes `600s` and is `10km` long, \n`distance_influence=100`\
    \ means that you are willing to take an alternative route that is `11km` long\
    \ only if \nit takes no longer than `500s` (saves `100s`). Things get a bit more\
    \ complicated when `priority` is not `1`, but the \neffect stays the same: The\
    \ larger `distance_influence` is, the more GraphHopper will focus on finding short\
    \ routes.\n\n\n## Road attributes\n\nGraphHopper stores different attributes for\
    \ every road segment. Some frequently used are the following (some of their possible\
    \ values are given in brackets):\n\n- road_class: (OTHER, MOTORWAY, TRUNK, PRIMARY,\
    \ SECONDARY, TRACK, STEPS, CYCLEWAY, FOOTWAY, ...)\n- road_environment: (ROAD,\
    \ FERRY, BRIDGE, TUNNEL, ...)\n- road_access: (DESTINATION, DELIVERY, PRIVATE,\
    \ NO, ...)\n- surface: (PAVED, DIRT, SAND, GRAVEL, ...)\n- smoothness: (EXCELLENT,\
    \ GOOD, INTERMEDIATE, ...)\n- toll: (MISSING, NO, HGV, ALL)\n- bike_network, foot_network:\
    \ (MISSING, INTERNATIONAL, NATIONAL, REGIONAL, LOCAL, OTHER)\n- country: (`MISSING`\
    \ or the country as a `ISO3166-1:alpha3` code e.g. `DEU`)\n- hazmat: (YES, NO),\
    \ hazmat_tunnel: (A, B, .., E), hazmat_water: (YES, PERMISSIVE, NO)\n- hgv: (MISSING,\
    \ YES, DESIGNATED, ...)\n- track_type: (MISSING, GRADE1, GRADE2, ..., GRADE5)\n\
    - urban_density: (RURAL, RESIDENTIAL, CITY)\n\n\nTo learn about all available\
    \ encoded values you can query the `/info` endpoint\n\nBesides this kind of categories,\
    \ which can take multiple different string values, there are also some that represent\
    \ a\nboolean value (they are either true or false for a given road segment), like:\n\
    \n- road_class_link\n- roundabout\n\nThere are also some that take on a numeric\
    \ value, like:\n\n- average_slope: a number for 100 * \"elevation change\" / edge_distance\
    \ for a road segment; it changes the sign in reverse direction; see also max_slope\n\
    - curvature: \"beeline distance\" / edge_distance (0..1) e.g. a curvy road is\
    \ smaller than 1\n- hike_rating, horse_rating, mtb_rating: a number from 0 to\
    \ 6 for the `sac_scale` in OSM, e.g. 0 means \"missing\", 1 means \"hiking\",\
    \ 2 means \"mountain_hiking\" and so on\n- lanes: number of lanes\n- max_slope:\
    \ an unsigned decimal for the maximum slope (100 * \"elevation change / distance_i\"\
    ) of an edge with `sum(distance_i)=edge_distance`. Important for longer road segments\
    \ where ups (or downs) can be much bigger than the average_slope.\n- max_speed:\
    \ the speed limit from a sign (km/h)\n- max_height (meter), max_width (meter),\
    \ max_length (meter)\n- max_weight (ton), max_axle_load (in tons)\n\n\n## Limitations\n\
    \nYou can directly use custom models with the [POST Route Endpoint](#operation/postRoute).\n\
    \nTo use custom models with the Route Optimization API or the Matrix API, use\
    \ the [Profiles API](#tag-API)\nto create a new named profile with your custom\
    \ model. You can then use that profile like you\nwould use a pre-defined profile.\n\
    \nThis feature will strongly benefit from feedback, so do not hesitate to share\
    \ your experience, your favorite custom\nmodel or some of the problems you ran\
    \ into when you tried building your own custom model.\n\n## Troubleshooting\n\n\
    ### Recommendations\n\nFor debugging you can use the custom model editor in [GraphHopper\
    \ Maps](https://graphhopper.com/maps/) (click the 'gear' button in the top left).\n\
    \nWhen debugging problems with custom models you should first try if your request\
    \ goes through without an error using an empty custom model.\n\n### Route calculation\
    \ is slower\n\nThe route calculation with custom_models will be slower as a different\
    \ algorithm has to be used. The more the result deviates from the optimum the\
    \ slower the response can get.\n\nFor certain use cases you can make the route\
    \ calculation faster when you tune the `custom_model` and e.g. exclude certain\
    \ ways via `{ \"if\": \"road_class == TRACK || road_class == RESIDENTIAL\", \"\
    multiply_by\": \"0\" }` in the `priority`.\n\nIf this is still not sufficient\
    \ and you need even faster response times, you can use the parameter `astarbi.epsilon`\
    \ (`>=1`). This enables a heuristic that speeds up routing \nbut may occasionally\
    \ cause unwanted detours. The closer this value is to 1, the nearer the route\
    \ is to optimal.\nIn practice, a value 1.3-1.4 provides good speed improvements\
    \ (10-20%) while causing little to no deviation from the optimal route in most\
    \ cases.\n\n### All routes for my custom model fail\n\nThis could mean that either\
    \ your custom model made some of the roads near the start and destination inaccessible,\
    \ \nthen usually we return a PointNotFoundException with the point_index with\
    \ the \"location snap\" problem.\n\nOr, the custom model made a route between\
    \ your start and destination impossible, then we return a ConnectionNotFoundException.\
    \ This happens e.g. when you exclude tunnels, \nferries or motorways but all routes\
    \ between start and destination have these road attributes satisfied, i.e. we\
    \ cannot find a route.\n\n**Solution for both cases**: relax your custom model\
    \ and e.g. instead of excluding certain road attributes via `\"multiply_by\":\
    \ \"0\"` you should try to use `\"0.01\"`.\n"
  name: Custom Model
- description: |2

    You can create routing profiles that are customized to your needs. You can take advantage of
    all the modelling options described in the [Custom Model section](#tag/Custom-Model) and use the created custom profile (prefix `cp_`)
    with our Routing, Matrix and Route Optimization APIs.

    **Important notes**

     * Each custom profile is limited to a geographic area boundary. Within this boundary there is maximum flexibility for adjusting the profile and you can expect fast response times.
     * Currently this feature is only available to selected customers and customers with a premium package. If you are interested please [contact us](https://www.graphhopper.com/contact-form/).
     * This feature is currently in beta status. It is fully functional, but the API might change in the future. Changes will of course be announced well in advance.
     * You can use the following profiles as base profile: `car`, `bike`, `foot` and `ecargobike`. Contact us if you have different requirements. Motor vehicles can be emulated like done for `truck` in [this post](https://discuss.graphhopper.com/t/7632/2).

    A curl example:

    ```
    curl -X POST -H "Content-Type: application/json" "https://graphhopper.com/api/1/profiles?key=YOUR_KEY" -d '{"bounds":{"bbox":[11.45462,48.00954,11.77322,48.2076]},"custom_model":{"priority":[{"if":"road_class == MOTORWAY","multiply_by":"0"}]},"profile":"car"}'
    ```

    If you plan to tweak your custom_model frequently it is recommended to initially use the Routing API where a different custom model can be specified in every request.
    Or use [GraphHopper Maps](https://graphhopper.com/maps/) and click the gear button.

    **Creating custom profiles using the API Explorer**

    Besides using the `/profiles` endpoint directly you can also create custom profiles from [our API explorer](https://explorer.graphhopper.com/).

    ![The API Explorer's Profiles Section](./img/create-profiles-example-customize.png)

     1. Visit the [API explorer](https://explorer.graphhopper.com/?endpoint=profiles).
     2. Set your API key with the "API key" button. If an error occurs we might have to activate custom profiles for your account before you can continue. [Contact us](https://www.graphhopper.com/contact-form/).
     2. Now copy and paste the JSON to create a custom profile into the input window. To get started you can use the already pre-filled example, which will create a
        custom profile that excludes motorways and is limited to the Munich area.
     3. Click "Send". This creates a custom profile. Copy the returned `id` from the output window (it starts with `cp_`).
     4. To try this profile out you now change the drop down to "Optimization API", pick the first example and replace "car" in `"profile": "car"` (`vehicle_types` section) with the profile `id` and click "Send":

    ![The API Explorer's Optimization Section](./img/create-profiles-example-vrp.png)

    You should now see that the solution no longer uses motorways. Keep in mind that this is a simple example.
    The custom model language is a lot more powerful than this. Make sure you read the [Custom Model section](#tag/Custom-Model) to learn about all the details.

    Note that you can use the profile `id` just as well for the `/matrix` or `/route` endpoint. E.g. select "Routing API"
    and use the profile `id` in the request:

    ![The API Explorer's Routing Section](./img/create-profiles-example-routing.png)
  name: Custom Profiles
paths:
  /route:
    get:
      description: "For the GET request you specify the parameters in the URL and\
        \ can try it directly in every browser.\nHowever, it has some disadvantages\
        \ when using many points (URL length limit) and the [`custom_model` Feature](#tag/Custom-Model)\
        \ cannot be used. \nTherefore, our recommended endpoint is the [POST route\
        \ endpoint](#operation/postRoute).\n"
      operationId: getRoute
      parameters:
      - explode: true
        in: query
        name: profile
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: |
          The points for which the route should be calculated. Format: `latitude,longitude`. Specify at least an origin and a destination. Via points are possible.
          The maximum number depends on your plan.
        example:
        - "51.131,12.414"
        - "48.224,3.867"
        explode: true
        in: query
        name: point
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          The `point_hint` is typically a road name to which the associated `point` parameter should be snapped to. Specify no `point_hint` parameter or the same number as you have `point` parameters.
        explode: true
        in: query
        name: point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optional parameter. 'Snapping' is the process of finding the closest road location for GPS coordinates provided in the `point` parameter. The `snap_prevention` parameter allows you to prevent snapping to specific types of roads. For example, if `snap_prevention` is set to bridge, the routing engine will avoid snapping to a bridge, even if it is the closest road for the given `point`. Current supported values: `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`. Multiple values are specified like `snap_prevention=ferry&snap_prevention=motorway`. Note that once snapped the routing algorithm can still route over bridges (or the other values). To avoid this you need to use the `custom_model`.
        explode: true
        in: query
        name: snap_prevention
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.
        explode: true
        in: query
        name: curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: |
          The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          type: string
        style: form
      - description: |
          If `true`, a third coordinate, the altitude, is included with all positions in the response.
          This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their
          encodings. Unless you switch off the `points_encoded` parameter, you need special code on the
          client side that can handle three-dimensional coordinates.
        explode: true
        in: query
        name: elevation
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optional parameter. The following path details are available:\
          \ `street_name`, `street_ref`, `street_destination`, `leg_time`, `leg_distance`,\
          \ `roundabout`, `country`, `time`, `distance`, `max_speed`,\n`max_weight`,\
          \ `max_width`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`,\
          \ `hazmat`, `hazmat_tunnel`, `hazmat_water`, \n`lanes`, `surface`, `smoothness`,\
          \ `hike_rating`, `mtb_rating`, `foot_network`, `bike_network`. Read more\
          \ about the usage of path details [here](https://discuss.graphhopper.com/t/2539).\n"
        explode: true
        in: query
        name: details
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Normally, the calculated route will visit the points in the order you specified them.
          If you have more than two points, you can set this parameter to `"true"` and the points may be re-ordered to minimize the total travel time.
          Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits.
        explode: true
        in: query
        name: optimize
        required: false
        schema:
          default: "false"
          type: string
        style: form
      - description: |
          If instructions should be calculated and returned
        explode: true
        in: query
        name: instructions
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If the points for the route should be calculated at all.
        explode: true
        in: query
        name: calc_points
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If `true`, the output will be formatted.
        explode: true
        in: query
        name: debug
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact
          but requires special client code to unpack. (We provide it in our JavaScript client library!)
          Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.
          See the description of the response format for more information.
        explode: true
        in: query
        name: points_encoded
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Combine this parameter with any of the following options below.
        explode: true
        in: query
        name: ch.disable
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points.
          In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree.
          This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`.
        explode: true
        in: query
        name: heading
        required: false
        schema:
          items:
            format: int32
            type: integer
          type: array
        style: form
      - description: |
          Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`.
        explode: true
        in: query
        name: heading_penalty
        required: false
        schema:
          default: 300
          format: int32
          type: integer
        style: form
      - description: |
          If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`.
        explode: true
        in: query
        name: pass_through
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Rather than looking for the shortest or fastest path, this parameter\
          \ lets you solve two different problems related to routing:\nWith `alternative_route`,\
          \ we give you not one but several routes that are close to optimal, but\n\
          not too similar to each other. \nWith `round_trip`, the route will get you\
          \ back to where you started. This is meant for fun (think of\na bike trip),\
          \ so we will add some randomness. The `round_trip` option requires `ch.disable=true`.\n\
          You can control both of these features with additional parameters, see below.\
          \ \n"
        explode: true
        in: query
        name: algorithm
        required: false
        schema:
          enum:
          - round_trip
          - alternative_route
          type: string
        style: form
      - description: |
          If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`.
        explode: true
        in: query
        name: round_trip.distance
        required: false
        schema:
          default: 10000
          format: int32
          type: integer
        style: form
      - description: |
          If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value.
        explode: true
        in: query
        name: round_trip.seed
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_paths
        required: false
        schema:
          default: 2
          format: int32
          type: integer
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_weight_factor
        required: false
        schema:
          default: 1.4
          type: number
        style: form
      - description: |
          If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives.
        explode: true
        in: query
        name: alternative_route.max_share_factor
        required: false
        schema:
          default: 0.6
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                hints:
                  visited_nodes.sum: 58
                  visited_nodes.average: 58
                info:
                  copyrights:
                  - GraphHopper
                  - OpenStreetMap contributors
                  took: 2
                paths:
                - distance: 1791.011
                  weight: 307.852443
                  time: 370962
                  transfers: 0
                  points_encoded: false
                  bbox:
                  - 11.539424
                  - 48.118343
                  - 11.558901
                  - 48.122364
                  points:
                    type: LineString
                    coordinates:
                    - - 11.539424
                      - 48.118352
                    - - 11.540387
                      - 48.118368
                    - - 11.54061
                      - 48.118356
                    - - 11.541941
                      - 48.118409
                    - - 11.543696
                      - 48.118344
                    - - 11.547167
                      - 48.118343
                    - - 11.548478
                      - 48.118366
                    - - 11.548487
                      - 48.119329
                    - - 11.548807
                      - 48.119328
                    - - 11.549408
                      - 48.119366
                    - - 11.550349
                      - 48.119508
                    - - 11.550441
                      - 48.119473
                    - - 11.551109
                      - 48.119467
                    - - 11.551553
                      - 48.119445
                    - - 11.551748
                      - 48.119398
                    - - 11.552087
                      - 48.119475
                    - - 11.552236
                      - 48.119542
                    - - 11.552353
                      - 48.119635
                    - - 11.553853
                      - 48.121136
                    - - 11.555448
                      - 48.12039
                    - - 11.555797
                      - 48.120206
                    - - 11.55632
                      - 48.120592
                    - - 11.556716
                      - 48.120919
                    - - 11.557326
                      - 48.121345
                    - - 11.558901
                      - 48.122364
                  instructions:
                  - distance: 672.954
                    heading: 89.04
                    sign: 0
                    interval:
                    - 0
                    - 6
                    text: Continue onto Lindenschmitstraße
                    time: 144703
                    street_name: Lindenschmitstraße
                  - distance: 107.145
                    sign: -2
                    interval:
                    - 6
                    - 7
                    text: Turn left
                    time: 22675
                    street_name: ""
                  - distance: 140.169
                    sign: 2
                    interval:
                    - 7
                    - 10
                    text: Turn right onto Oberländerstraße
                    time: 28032
                    street_name: Oberländerstraße
                  - distance: 360.232
                    sign: 1
                    interval:
                    - 10
                    - 18
                    text: Turn slight right
                    time: 72677
                    street_name: ""
                  - distance: 177.621
                    sign: 2
                    interval:
                    - 18
                    - 20
                    text: Turn right onto Thalkirchner Straße
                    time: 35524
                    street_name: Thalkirchner Straße
                  - distance: 332.89
                    sign: -2
                    interval:
                    - 20
                    - 24
                    text: Turn left onto Thalkirchner Straße
                    time: 67351
                    street_name: Thalkirchner Straße
                  - distance: 0
                    sign: 4
                    last_heading: 45.67046584987792
                    interval:
                    - 24
                    - 24
                    text: Arrive at destination
                    time: 0
                    street_name: ""
                  legs: []
                  details: {}
                  ascend: 6.3294677734375
                  descend: 25.0579833984375
                  snapped_waypoints:
                    type: LineString
                    coordinates:
                    - - 11.539424
                      - 48.118352
                    - - 11.558901
                      - 48.122364
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Routing Result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: "Your request is not valid. For example, you specified too\
            \ few or too many points."
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Authentication necessary
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: API limit reached.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Internal server error. We get notified automatically and fix
            this asap.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Calculate a route
      tags:
      - Routing
      x-codeSamples:
      - lang: curl
        source: "curl \"https://graphhopper.com/api/1/route?point=51.131,12.414&point=48.224,3.867&profile=car&locale=de&calc_points=false&key=api_key\""
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/route?point=51.131,12.414&point=48.224,3.867&profile=car&locale=de&calc_points=false&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
    post:
      description: "To do a request you send JSON data. \n\nSee the [GET endpoint](#operation/getRoute)\
        \ for an alternative query method which is slightly simpler to get started\
        \ but has some disadvantages.\n\n**Please note that in contrast to the GET\
        \ endpoint, points are specified in the order of `[longitude, latitude]`**\
        \ and some parameter names use the plural.\nFor example the string `point=10,11&point=20,22`\
        \ will be converted to the `points` array (plural):\n```json\n{ \"points\"\
        : [[11,10], [22,20]] }\n```\nSo this `points` array uses a format similar\
        \ to [GeoJson](http://geojson.org/geojson-spec.html#examples).\n\nExample:\n\
        ```bash\ncurl -X POST -H \"Content-Type: application/json\" \"https://graphhopper.com/api/1/route?key=[YOUR_KEY]\"\
        \ -d '{\"elevation\":false,\"points\":[[-0.087891,51.534377],[-0.090637,51.467697]],\"\
        profile\":\"car\"}'\n```\n"
      operationId: postRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteRequest'
      responses:
        "200":
          content:
            application/json:
              example:
                hints:
                  visited_nodes.sum: 58
                  visited_nodes.average: 58
                info:
                  copyrights:
                  - GraphHopper
                  - OpenStreetMap contributors
                  took: 2
                paths:
                - distance: 1791.011
                  weight: 307.852443
                  time: 370962
                  transfers: 0
                  points_encoded: false
                  bbox:
                  - 11.539424
                  - 48.118343
                  - 11.558901
                  - 48.122364
                  points:
                    type: LineString
                    coordinates:
                    - - 11.539424
                      - 48.118352
                    - - 11.540387
                      - 48.118368
                    - - 11.54061
                      - 48.118356
                    - - 11.541941
                      - 48.118409
                    - - 11.543696
                      - 48.118344
                    - - 11.547167
                      - 48.118343
                    - - 11.548478
                      - 48.118366
                    - - 11.548487
                      - 48.119329
                    - - 11.548807
                      - 48.119328
                    - - 11.549408
                      - 48.119366
                    - - 11.550349
                      - 48.119508
                    - - 11.550441
                      - 48.119473
                    - - 11.551109
                      - 48.119467
                    - - 11.551553
                      - 48.119445
                    - - 11.551748
                      - 48.119398
                    - - 11.552087
                      - 48.119475
                    - - 11.552236
                      - 48.119542
                    - - 11.552353
                      - 48.119635
                    - - 11.553853
                      - 48.121136
                    - - 11.555448
                      - 48.12039
                    - - 11.555797
                      - 48.120206
                    - - 11.55632
                      - 48.120592
                    - - 11.556716
                      - 48.120919
                    - - 11.557326
                      - 48.121345
                    - - 11.558901
                      - 48.122364
                  instructions:
                  - distance: 672.954
                    heading: 89.04
                    sign: 0
                    interval:
                    - 0
                    - 6
                    text: Continue onto Lindenschmitstraße
                    time: 144703
                    street_name: Lindenschmitstraße
                  - distance: 107.145
                    sign: -2
                    interval:
                    - 6
                    - 7
                    text: Turn left
                    time: 22675
                    street_name: ""
                  - distance: 140.169
                    sign: 2
                    interval:
                    - 7
                    - 10
                    text: Turn right onto Oberländerstraße
                    time: 28032
                    street_name: Oberländerstraße
                  - distance: 360.232
                    sign: 1
                    interval:
                    - 10
                    - 18
                    text: Turn slight right
                    time: 72677
                    street_name: ""
                  - distance: 177.621
                    sign: 2
                    interval:
                    - 18
                    - 20
                    text: Turn right onto Thalkirchner Straße
                    time: 35524
                    street_name: Thalkirchner Straße
                  - distance: 332.89
                    sign: -2
                    interval:
                    - 20
                    - 24
                    text: Turn left onto Thalkirchner Straße
                    time: 67351
                    street_name: Thalkirchner Straße
                  - distance: 0
                    sign: 4
                    last_heading: 45.67046584987792
                    interval:
                    - 24
                    - 24
                    text: Arrive at destination
                    time: 0
                    street_name: ""
                  legs: []
                  details: {}
                  ascend: 6.3294677734375
                  descend: 25.0579833984375
                  snapped_waypoints:
                    type: LineString
                    coordinates:
                    - - 11.539424
                      - 48.118352
                    - - 11.558901
                      - 48.122364
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Routing Result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: "Your request is not valid. For example, you specified too\
            \ few or too many points."
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Authentication necessary
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: API limit reached.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GHError'
          description: Internal server error. We get notified automatically and fix
            this asap.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Calculate a route
      tags:
      - Routing
  /isochrone:
    get:
      operationId: getIsochrone
      parameters:
      - description: Specify the start coordinate
        explode: true
        in: query
        name: point
        required: true
        schema:
          type: string
        style: form
      - description: Specify which time the vehicle should travel. In seconds.
        explode: true
        in: query
        name: time_limit
        required: false
        schema:
          default: 600
          format: int32
          type: integer
        style: form
      - description: Specify which distance the vehicle should travel. In meters.
        explode: true
        in: query
        name: distance_limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: profile
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: Number by which to divide the given `time_limit` to create `buckets`
          nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies
          analogously to `distance_limit`.
        explode: true
        in: query
        name: buckets
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: |
          If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon "inside" to the point.
          Example use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*
        explode: true
        in: query
        name: reverse_flow
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsochroneResponse'
          description: Isochrone Result
      summary: Compute an isochrone
      tags:
      - Isochrones
      x-codeSamples:
      - lang: curl
        source: "curl \"https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=api_key\""
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
  /matrix:
    get:
      description: |
        For N origins and M destinations, compute routes from all origins to all destinations and output
        the result as a matrix of travel times and/or distances.

        This includes the common cases of routes from one origin to many destinations, or from many origins to one
        destination.
      operationId: getMatrix
      parameters:
      - explode: true
        in: query
        name: profile
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: "Specify multiple points in `latitude,longitude` for which the\
          \ weight-, route-, time- or distance-matrix should be calculated. In this\
          \ case the starts are identical to the destinations. If there are N points,\
          \ then NxN entries will be calculated. The order of the point parameter\
          \ is important. Specify at least three points. Cannot be used together with\
          \ from_point or to_point."
        explode: true
        in: query
        name: point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The origin points for the routes in `latitude,longitude`. E.g.\
          \ if you want to calculate the three routes A-&gt;1, A-&gt;2, A-&gt;3 then\
          \ you have one from_point parameter and three to_point parameters."
        explode: true
        in: query
        name: from_point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "The destination points for the routes in `latitude,longitude`."
        explode: true
        in: query
        name: to_point
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Optional parameter. Specifies a hint for each `point` parameter
          to prefer a certain street for the closest location lookup. E.g. if there
          is an address or house with two or more neighboring streets you can control
          for which street the closest location is looked up.
        explode: true
        in: query
        name: point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: For the from_point parameter. See point_hint
        explode: true
        in: query
        name: from_point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: For the to_point parameter. See point_hint
        explode: true
        in: query
        name: to_point_hint
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Optional parameter. 'Snapping' is the process of finding the closest road location for GPS coordinates provided in the `point` parameter. The `snap_prevention` parameter allows you to prevent snapping to specific types of roads. For example, if `snap_prevention` is set to bridge, the routing engine will avoid snapping to a bridge, even if it is the closest road for the given `point`. Current supported values: `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`. Multiple values are specified like `snap_prevention=ferry&snap_prevention=motorway`. Note that once snapped the routing algorithm can still route over bridges (or the other values). To avoid this you need to use the `custom_model`.
        explode: true
        in: query
        name: snap_prevention
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Optional parameter. It specifies on which side a point should
          be relative to the driver when she leaves/arrives at a start/target/via
          point. You need to specify this parameter for either none or all points.
          Only supported for motor vehicles and OpenStreetMap.
        explode: true
        in: query
        name: curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: Curbside setting for the from_point parameter. See curbside.
        explode: true
        in: query
        name: from_curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: Curbside setting for the to_point parameter. See curbside.
        explode: true
        in: query
        name: to_curbside
        required: false
        schema:
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        style: form
      - description: "Specifies which arrays should be included in the response. Specify\
          \ one or more of the following options 'weights', 'times', 'distances'.\
          \ To specify more than one array use e.g. out_array=times&out_array=distances.\
          \ The units of the entries of distances are meters, of times are seconds\
          \ and of weights is arbitrary and it can differ for different vehicles or\
          \ versions of this API."
        explode: true
        in: query
        name: out_array
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Specifies whether or not the matrix calculation should return
          with an error as soon as possible in case some points cannot be found or
          some points are not connected. If set to `false` the time/weight/distance
          matrix will be calculated for all valid points and contain the `null` value
          for all entries that could not be calculated. The `hint` field of the response
          will also contain additional information about what went wrong (see its
          documentation).
        explode: true
        in: query
        name: fail_fast
        required: false
        schema:
          default: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
          description: Matrix API response
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Compute a matrix
      tags:
      - Matrices
      x-codeSamples:
      - lang: curl
        source: "curl \"https://graphhopper.com/api/1/matrix?point=49.932707,11.588051&point=50.241935,10.747375&point=50.118817,11.983337&type=json&profile=car&out_array=weights&out_array=times&out_array=distances&key=api_key\""
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/matrix?point=49.932707,11.588051&point=50.241935,10.747375&point=50.118817,11.983337&type=json&profile=car&out_array=weights&out_array=times&out_array=distances&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
    post:
      description: |
        Calculate a matrix of travel times and/or distances between N origins and M destinations.

        This includes the common cases of routes from one origin to many destinations, or from many origins to one
        destination.
      operationId: postMatrix
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postMatrix_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatrixResponse'
          description: Matrix API response
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Compute a matrix
      tags:
      - Matrices
  /matrix/calculate:
    post:
      description: "An alternate endpoint for computing a large matrix asynchronously,\
        \ where a request against the regular \nendpoint would result in a timeout.\n\
        \nThe request format is the same, but instead of the result, you are given\
        \ a job identification number that\nyou can use to retrieve the result once\
        \ it is available.\n        \nIn most cases, prefer the regular endpoints.\n\
        \nHere are some full examples via curl:\n```bash\n$ curl -X POST -H \"Content-Type:\
        \ application/json\" \"https://graphhopper.com/api/1/matrix/calculate?key=[YOUR_KEY]\"\
        \ -d '{\"points\":[[13.29895,52.48696],[13.370876,52.489575],[13.439026,52.511206]]}'\n\
        {\"job_id\":\"7ac65787-fb99-4e02-a832-2c3010c70097\"}\n```\n\nPick the returned\
        \ `job_id` and use it in the next GET requests:\n```bash\n$ curl -X GET \"\
        https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]\"\
        \n{\"status\":\"waiting\"}\n```\n\nWhen the calculation is finished (`status:finished`)\
        \ the JSON response will contain the full matrix JSON under `solution`:\n\
        ```bash\n$ curl -X GET \"https://graphhopper.com/api/1/matrix/solution/7ac65787-fb99-4e02-a832-2c3010c70097?key=[YOUR_KEY]\"\
        \n{\"solution\":{\"weights\":[[0.0,470.453,945.414],[503.793,0.0,580.871],[970.49,569.511,0.0]],\"\
        info\":{\"copyrights\":[\"GraphHopper\",\"OpenStreetMap contributors\"]}},\"\
        status\":\"finished\"}\n```\n\nPlease note that if an error occured while\
        \ calculation the JSON will not have a status but contain directly the error\
        \ message e.g.:\n```json\n{\"message\":\"Cannot find from_points: 1\"}\n```\n\
        And the optional `hints` array.\n"
      operationId: calculateMatrix
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postMatrix_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Submit a matrix computation job
      tags:
      - Matrices
  /matrix/solution/{jobId}:
    get:
      operationId: getMatrixSolution
      parameters:
      - description: The jobId you received when you submitted the job.
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMatrixSolution_200_response'
          description: A response containing the matrix
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Retrieve result of a matrix computation job
      tags:
      - Matrices
  /match:
    post:
      description: |
        To get a match response you send a GPX file in the body of an HTTP POST request and specify request parameters like the `key` and `profile` in the URL.
        See below for more supported parameters.
      operationId: postGPX
      parameters:
      - description: "Specify the precision of a point, in meter"
        explode: true
        in: query
        name: gps_accuracy
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: profile
        required: false
        schema:
          $ref: '#/components/schemas/VehicleProfileId'
        style: form
      - description: |
          The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          type: string
        style: form
      - description: |
          If `true`, a third coordinate, the altitude, is included with all positions in the response.
          This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their
          encodings. Unless you switch off the `points_encoded` parameter, you need special code on the
          client side that can handle three-dimensional coordinates.
        explode: true
        in: query
        name: elevation
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "Optional parameter. The following path details are available:\
          \ `street_name`, `street_ref`, `street_destination`, `leg_time`, `leg_distance`,\
          \ `roundabout`, `country`, `time`, `distance`, `max_speed`,\n`max_weight`,\
          \ `max_width`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`,\
          \ `hazmat`, `hazmat_tunnel`, `hazmat_water`, \n`lanes`, `surface`, `smoothness`,\
          \ `hike_rating`, `mtb_rating`, `foot_network`, `bike_network`. Read more\
          \ about the usage of path details [here](https://discuss.graphhopper.com/t/2539).\n"
        explode: true
        in: query
        name: details
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          If instructions should be calculated and returned
        explode: true
        in: query
        name: instructions
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If the points for the route should be calculated at all.
        explode: true
        in: query
        name: calc_points
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact
          but requires special client code to unpack. (We provide it in our JavaScript client library!)
          Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.
          See the description of the response format for more information.
        explode: true
        in: query
        name: points_encoded
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          application/gpx+xml:
            example: |
              <gpx>
                <trk>
                  <trkseg>
                    <trkpt lat="51.343657" lon="12.360708"></trkpt>
                    <trkpt lat="51.343796" lon="12.361337"></trkpt>
                    <trkpt lat="51.342784" lon="12.361882"></trkpt>
                  </trkseg>
                </trk>
              </gpx>
        description: A GPX document containing the map-matching input.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
          description: Map matching result
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Map-match a GPX file
      tags:
      - Map Matching
      x-codeSamples:
      - lang: curl
        source: |
          curl -XPOST -H "Content-Type: application/gpx+xml" "https://graphhopper.com/api/1/match?profile=car&key=[YOUR_KEY]" -d '
            <gpx>
              <trk>
                <trkseg>
                  <trkpt lat="51.343657" lon="12.360708"></trkpt>
                  <trkpt lat="51.343796" lon="12.361337"></trkpt>
                  <trkpt lat="51.342784" lon="12.361882"></trkpt>
                </trkseg>
              </trk>
            </gpx>'
      - lang: Java
        source: |
          OkHttpClient client = new OkHttpClient();
          RequestBody body = RequestBody.create("<gpx>" +
              " <trk>" +
              "  <trkseg>" +
              "   <trkpt lat=\"51.343657\" lon=\"12.360708\"></trkpt>" +
              "   <trkpt lat=\"51.343796\" lon=\"12.361337\"></trkpt>" +
              "   <trkpt lat=\"51.342784\" lon=\"12.361882\"></trkpt>" +
              "  </trkseg>" +
              " </trk>" +
              "</gpx>", MediaType.parse("application/gpx+xml"));
          Request request = new Request.Builder()
              .url("https://graphhopper.com/api/1/match?profile=car&key=[YOUR_KEY]")
              .post(body)
              .build();

          Response response = client.newCall(request).execute();
  /geocode:
    get:
      operationId: getGeocode
      parameters:
      - description: |
          A textual description of the address you are looking for. Required for forward geocoding. Note that the `default` geocoding provider does prefix searches preferable for "autocomplete" use cases, but
          may lead to sub-optimal results if used without user interaction. See e.g. `provider=nominatim` as an appropriate alternative for less interactive use cases.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: "Display the search results for the specified locale. Currently\
          \ French (fr), English (en) and German (de) are explicitly supported. Otherwise\
          \ leave the locale empty."
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          type: string
        style: form
      - description: Specify the maximum number of results to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 5
          format: int32
          type: integer
        style: form
      - description: "It is `required` to be `true` if you want to do a reverse geocoding\
          \ request. If it is `true`, `point` must be defined as well, and `q` must\
          \ not be used."
        explode: true
        in: query
        name: reverse
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "If `true`, the output will be formatted."
        explode: true
        in: query
        name: debug
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: "_Forward geocoding_: The location bias in the format 'latitude,longitude'\
          \ e.g. point=45.93272,11.58803. _Reverse geocoding_: The location to find\
          \ amenities, cities."
        explode: true
        in: query
        name: point
        required: false
        schema:
          type: string
        style: form
      - description: "The provider parameter is currently under development and can\
          \ fall back to `default` at any time.\nThe intend is to provide alternatives\
          \ to our default geocoder. Each provider has its own strenghts and might\
          \ fit better for certain scenarios, so it's worth to compare the different\
          \ providers.\nTo try it append the `provider`parameter to the URL like `&provider=nominatim`,\n\
          the result structure should be identical in all cases - if not, please report\
          \ this back to us.\nKeep in mind that some providers do not support certain\
          \ parameters or don't return some fields, for example `osm_id` and `osm_type`\
          \ are not supported by every geocoding provider.\nIf you would like to use\
          \ additional parameters of one of the providers, but it's not available\
          \ for the GraphHopper Geocoding API, yet? Please contact us.\n\nThe credit\
          \ costs can be different for all providers - see [here](https://support.graphhopper.com/support/solutions/articles/44000718211-what-is-one-credit-)\
          \ for more information about it.\n\nCurrently, only the default provider\
          \ and gisgraphy support autocompletion of partial search strings.\n\nAll\
          \ providers support normal \"forward\" geocoding and reverse geocoding via\
          \ `reverse=true`.\n\n#### Default (`provider=default`)\n\nThis provider\
          \ returns results of our internal geocoding engine. It is best suited for\
          \ use cases with user interaction as it does prefix searches required for\
          \ an \"autocomplete\" use case\n(a user types an address into a search field).\n\
          \nIn addition to the above documented parameters the following parameters\
          \ are possible:\n\n* `osm_tag` - you can filter `key:value` or exclude places\
          \ with certain OpenStreetMap tags `!key:value`. E.g. `osm_tag=tourism:museum`\
          \ or just the key `osm_tag=tourism`. To exclude multiple tags you add multiple\
          \ `osm_tag` parameters.\n* `location_bias_scale` - describes how much the\
          \ prominence of a result should still be taken into account. Sensible values\
          \ go from 0.0 (ignore prominence almost completely) to 1.0 (prominence has\
          \ approximately the same influence as the location). The default is 0.2.\n\
          * `zoom` - describes the radius around the center to focus on. This is a\
          \ number that should correspond roughly to the map zoom parameter of a corresponding\
          \ map. The default is zoom=16.\n* `bbox` - the expected format is `minLon,minLat,maxLon,maxLat`.\
          \ This requires reverse=false.\n* `radius` - the search radius in km for\
          \ the reverse search. This requires reverse=true.\n\n#### Nominatim (`provider=nominatim`)\n\
          \nThe GraphHopper Directions API uses a commercially hosted Nominatim geocoder\
          \ (hosted by [OpenCageData](https://opencagedata.com/)). It is best suited\
          \ for use cases without or less user interaction\nlike batch processing\
          \ or detailed location data retrieval. It is not suited for \"autocomplete\"\
          .\n\nIn addition to the above documented parameters we currently support\
          \ the following parameters:\n\n* countrycode - The country code is a two\
          \ letter code as defined by the ISO 3166-1 Alpha 2 standard. E.g. gb for\
          \ the United Kingdom, fr for France, us for United States.\n* bounds - the\
          \ expected format is `minLon,minLat,maxLon,maxLat`\n\n#### Gisgraphy (`provider=gisgraphy`)\n\
          \nThis provider returns results from the Gisgraphy geocoder which you can\
          \ try [here](https://services.gisgraphy.com/static/leaflet/index.html).\n\
          \n**Limitations:** The `locale` parameter is not supported. Gisgraphy does\
          \ not return OSM tags or an extent.\n\nGisgraphy has a special autocomplete\
          \ API, which you can use by adding `autocomplete=true` (does not work with\
          \ `reverse=true`). The autocomplete API is optimized on predicting text\
          \ input, but returns less information.\n\nIn addition to the above documented\
          \ parameters Gisgraphy allows to use the following parameters, which can\
          \ be used as documented [here](https://www.gisgraphy.com/documentation/user-guide.php#geocodingservice):\n\
          \n* `radius` - radius in meters\n* `country` - restrict search for the specified\
          \ country. The value must be the ISO 3166 Alpha 2 code of the country.\n\
          \n#### NetToolKit (`provider=nettoolkit`)\n\nThis provider returns results\
          \ from the NetToolKit provider which is specialized for US addresses and\
          \ provides a wrapper around Nominatim for other addresses. You can try it\
          \ [here](https://www.nettoolkit.com/geo/demo).\n\nThe following additional\
          \ NetToolKit parameters are supported (read [here](https://www.nettoolkit.com/docs/geo/geocoding)\
          \ for more details):\n- `source`: User can choose which source provider\
          \ to geocode the address, this value is \"NetToolKit\" by default\n- `country_code`:\
          \ an iso-3166-2 country code (e.g : US) filter the results to the specify\
          \ country code\n\n**Limitations:** NetToolKit does not support the `locale`\
          \ parameter. NetToolKit does not return OSM tags (e.g. osm_id, osm_type,\
          \ osm_value).\n\n#### OpenCage Data (`provider=opencagedata`)\n\nThis provider\
          \ returns results from the OpenCageData geocoder which you can try [here](https://geocoder.opencagedata.com/demo).\n\
          The difference to the `nominatim` provider is that [other geocoders](https://opencagedata.com/credits)\
          \ might be used under the hood.\n\nIn addition to the above documented parameters\
          \ OpenCage Data allows to use the following parameters, which can be used\
          \ as documented [here](https://geocoder.opencagedata.com/api#forward-opt):\n\
          \n* countrycode - The country code is a two letter code as defined by the\
          \ ISO 3166-1 Alpha 2 standard. E.g. gb for the United Kingdom, fr for France,\
          \ us for United States. \n* bounds - the expected format is `minLon,minLat,maxLon,maxLat`\n"
        explode: true
        in: query
        name: provider
        required: false
        schema:
          default: default
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeocodingResponse'
          description: An array found locations
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Geocoding Endpoint
      tags:
      - Geocoding
      x-codeSamples:
      - lang: curl
        source: curl "https://graphhopper.com/api/1/geocode?q=berlin&locale=de&key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/geocode?q=berlin&locale=de&key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
  /vrp:
    post:
      description: |2

        Start by reading the [introduction](#tag/Route-Optimization-API) to the Route Optimization API.

        To solve a new vehicle routing problem, make a HTTP POST to this URL

        ```
        https://graphhopper.com/api/1/vrp?key=<your_key>
        ```

        It returns the solution to this problem in the JSON response.

        Please note that this URL is very well suited to solve minor problems.
        Larger vehicle routing problems, which take longer than 10 seconds to solve, cannot be solved.
        To solve them, please use the [batch mode URL](#operation/asyncVRP) instead.
      operationId: solveVRP
      requestBody:
        content:
          application/json:
            example:
              vehicles:
              - vehicle_id: vehicle-1
                type_id: cargo-bike
                start_address:
                  location_id: berlin
                  lon: 13.406
                  lat: 52.537
                earliest_start: 1554804329
                latest_end: 1554808329
                max_jobs: 3
              - vehicle_id: vehicle-2
                type_id: cargo-bike
                start_address:
                  location_id: berlin
                  lon: 13.406
                  lat: 52.537
                earliest_start: 1554804329
                latest_end: 1554808329
                max_jobs: 3
                skills:
                - physical strength
              vehicle_types:
              - type_id: cargo-bike
                capacity:
                - 10
                profile: bike
              services:
              - id: s-1
                name: visit-Joe
                address:
                  location_id: 13.375854_52.537338
                  lon: 13.375854
                  lat: 52.537338
                size:
                - 1
                time_windows:
                - earliest: 1554805329
                  latest: 1554806329
              - id: s-2
                name: serve-Peter
                address:
                  location_id: 13.393364_52.525851
                  lon: 13.393364
                  lat: 52.525851
                size:
                - 1
              - id: s-3
                name: visit-Michael
                address:
                  location_id: 13.416882_52.523543
                  lon: 13.416882
                  lat: 52.523543
                size:
                - 1
              - id: s-4
                name: do nothing
                address:
                  location_id: 13.395767_52.514038
                  lon: 13.395767
                  lat: 52.514038
                size:
                - 1
              shipments:
              - id: 7fe77504-7df8-4497-843c-02d70b6490ce
                name: pickup and deliver pizza to Peter
                priority: 1
                pickup:
                  address:
                    location_id: 13.387613_52.529961
                    lon: 13.387613
                    lat: 52.529961
                delivery:
                  address:
                    location_id: 13.380575_52.513614
                    lon: 13.380575
                    lat: 52.513614
                size:
                - 1
                required_skills:
                - physical strength
              objectives:
              - type: min
                value: vehicles
              - type: min
                value: completion_time
              configuration:
                routing:
                  calc_points: true
                  snap_preventions:
                  - motorway
                  - trunk
                  - tunnel
                  - bridge
                  - ferry
            schema:
              $ref: '#/components/schemas/Request'
        description: The request that contains the vehicle routing problem to be solved.
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                copyrights:
                - GraphHopper
                - OpenStreetMap contributors
                job_id: d62fcadd-c84a-4298-90b5-28550125bec5
                status: finished
                waiting_time_in_queue: 0
                processing_time: 459
                solution:
                  costs: 438
                  distance: 17994
                  time: 4094
                  transport_time: 4094
                  completion_time: 4172
                  max_operation_time: 2465
                  waiting_time: 78
                  service_duration: 0
                  preparation_time: 0
                  no_vehicles: 2
                  no_unassigned: 0
                  routes:
                  - vehicle_id: vehicle-2
                    distance: 10618
                    transport_time: 2465
                    completion_time: 2465
                    waiting_time: 0
                    service_duration: 0
                    preparation_time: 0
                    points:
                    - coordinates:
                      - - 13.40608
                        - 52.53701
                      - - 13.40643
                        - 52.53631
                      - - 13.40554
                        - 52.53616
                      - - 13.4054
                        - 52.53608
                      - - 13.40445
                        - 52.53513
                      - - 13.40436
                        - 52.53509
                      - - 13.40428
                        - 52.53508
                      - - 13.40463
                        - 52.53419
                      - - 13.40451
                        - 52.53419
                      - - 13.4034
                        - 52.53401
                      - - 13.403
                        - 52.53359
                      - - 13.40291
                        - 52.53354
                      - - 13.40268
                        - 52.53347
                      - - 13.39888
                        - 52.53259
                      - - 13.39839
                        - 52.53253
                      - - 13.39812
                        - 52.53251
                      - - 13.39616
                        - 52.53243
                      - - 13.39579
                        - 52.5324
                      - - 13.38973
                        - 52.53173
                      - - 13.39163
                        - 52.53025
                      - - 13.38797
                        - 52.52935
                      - - 13.38763
                        - 52.52996
                      type: LineString
                    - coordinates:
                      - - 13.38763
                        - 52.52996
                      - - 13.38739
                        - 52.53039
                      - - 13.38724
                        - 52.53036
                      - - 13.38464
                        - 52.52929
                      - - 13.38538
                        - 52.52871
                      - - 13.38634
                        - 52.52792
                      - - 13.38638
                        - 52.52779
                      - - 13.38657
                        - 52.52763
                      - - 13.38676
                        - 52.52741
                      - - 13.38698
                        - 52.52713
                      - - 13.38704
                        - 52.52701
                      - - 13.38753
                        - 52.524
                      - - 13.3877
                        - 52.52307
                      - - 13.3878
                        - 52.52282
                      - - 13.38788
                        - 52.52252
                      - - 13.38802
                        - 52.52174
                      - - 13.38519
                        - 52.52009
                      - - 13.38539
                        - 52.5191
                      - - 13.38548
                        - 52.51852
                      - - 13.38042
                        - 52.51819
                      - - 13.38071
                        - 52.5167
                      - - 13.38076
                        - 52.51652
                      - - 13.38084
                        - 52.51634
                      - - 13.3821
                        - 52.51396
                      - - 13.38055
                        - 52.51365
                      type: LineString
                    - coordinates:
                      - - 13.38055
                        - 52.51365
                      - - 13.38229
                        - 52.514
                      - - 13.38363
                        - 52.51429
                      - - 13.3848
                        - 52.51445
                      - - 13.38504
                        - 52.51358
                      - - 13.39124
                        - 52.51397
                      - - 13.3911
                        - 52.51488
                      - - 13.39303
                        - 52.51499
                      - - 13.39317
                        - 52.5141
                      - - 13.39548
                        - 52.51419
                      - - 13.39571
                        - 52.51421
                      type: LineString
                    - coordinates:
                      - - 13.39571
                        - 52.51421
                      - - 13.39695
                        - 52.51434
                      - - 13.39674
                        - 52.51523
                      - - 13.39742
                        - 52.51531
                      - - 13.39873
                        - 52.51558
                      - - 13.39846
                        - 52.51599
                      - - 13.39825
                        - 52.51729
                      - - 13.39805
                        - 52.51755
                      - - 13.39892
                        - 52.51761
                      - - 13.39917
                        - 52.51764
                      - - 13.39964
                        - 52.51775
                      - - 13.40009
                        - 52.51791
                      - - 13.40034
                        - 52.51797
                      - - 13.4021
                        - 52.51864
                      - - 13.40288
                        - 52.51896
                      - - 13.40375
                        - 52.51936
                      - - 13.40498
                        - 52.52001
                      - - 13.40463
                        - 52.5203
                      - - 13.40311
                        - 52.52144
                      - - 13.40442
                        - 52.52189
                      - - 13.40448
                        - 52.52192
                      - - 13.40451
                        - 52.52195
                      - - 13.40473
                        - 52.52199
                      - - 13.40504
                        - 52.52208
                      - - 13.40572
                        - 52.52235
                      - - 13.40687
                        - 52.52294
                      - - 13.40693
                        - 52.52299
                      - - 13.40706
                        - 52.52319
                      - - 13.40738
                        - 52.52378
                      - - 13.40787
                        - 52.52443
                      - - 13.4079
                        - 52.52453
                      - - 13.40938
                        - 52.52401
                      - - 13.40962
                        - 52.52398
                      - - 13.41001
                        - 52.52395
                      - - 13.41072
                        - 52.52391
                      - - 13.41215
                        - 52.52389
                      - - 13.41233
                        - 52.52386
                      - - 13.4131
                        - 52.5235
                      - - 13.41288
                        - 52.52333
                      - - 13.41475
                        - 52.52247
                      - - 13.41496
                        - 52.52264
                      - - 13.41523
                        - 52.52251
                      - - 13.41633
                        - 52.52338
                      - - 13.41631
                        - 52.52346
                      - - 13.41654
                        - 52.52364
                      - - 13.41684
                        - 52.52351
                      type: LineString
                    - coordinates:
                      - - 13.41684
                        - 52.52351
                      - - 13.41654
                        - 52.52364
                      - - 13.41631
                        - 52.52346
                      - - 13.4163
                        - 52.52344
                      - - 13.41587
                        - 52.52363
                      - - 13.41572
                        - 52.5235
                      - - 13.41409
                        - 52.5242
                      - - 13.41454
                        - 52.52461
                      - - 13.41454
                        - 52.52466
                      - - 13.41358
                        - 52.52508
                      - - 13.41366
                        - 52.52514
                      - - 13.41344
                        - 52.52525
                      - - 13.4133
                        - 52.52514
                      - - 13.41316
                        - 52.5252
                      - - 13.41107
                        - 52.52585
                      - - 13.41118
                        - 52.52606
                      - - 13.41118
                        - 52.52616
                      - - 13.41095
                        - 52.52664
                      - - 13.41097
                        - 52.52678
                      - - 13.41084
                        - 52.52706
                      - - 13.41057
                        - 52.52747
                      - - 13.41028
                        - 52.52809
                      - - 13.41032
                        - 52.52821
                      - - 13.4102
                        - 52.52847
                      - - 13.40999
                        - 52.52875
                      - - 13.40984
                        - 52.52905
                      - - 13.40982
                        - 52.52914
                      - - 13.40984
                        - 52.52926
                      - - 13.4104
                        - 52.52998
                      - - 13.4105
                        - 52.53001
                      - - 13.41064
                        - 52.53016
                      - - 13.41082
                        - 52.5303
                      - - 13.41198
                        - 52.53107
                      - - 13.4122
                        - 52.53128
                      - - 13.41232
                        - 52.53143
                      - - 13.41247
                        - 52.53192
                      - - 13.41267
                        - 52.53245
                      - - 13.41275
                        - 52.53259
                      - - 13.41215
                        - 52.5327
                      - - 13.40731
                        - 52.53463
                      - - 13.40608
                        - 52.53701
                      type: LineString
                    activities:
                    - type: start
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      end_time: 1554804329
                      end_date_time: null
                      distance: 0
                      driving_time: 0
                      preparation_time: 0
                      waiting_time: 0
                      load_after:
                      - 0
                    - type: pickupShipment
                      id: 7fe77504-7df8-4497-843c-02d70b6490ce
                      location_id: 13.387613_52.529961
                      address:
                        location_id: 13.387613_52.529961
                        lat: 52.529961
                        lon: 13.387613
                      arr_time: 1554804789
                      arr_date_time: null
                      end_time: 1554804789
                      end_date_time: null
                      waiting_time: 0
                      distance: 2012
                      driving_time: 460
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: deliverShipment
                      id: 7fe77504-7df8-4497-843c-02d70b6490ce
                      location_id: 13.380575_52.513614
                      address:
                        location_id: 13.380575_52.513614
                        lat: 52.513614
                        lon: 13.380575
                      arr_time: 1554805344
                      arr_date_time: null
                      end_time: 1554805344
                      end_date_time: null
                      waiting_time: 0
                      distance: 4560
                      driving_time: 1015
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 0
                    - type: service
                      id: s-4
                      location_id: 13.395767_52.514038
                      address:
                        location_id: 13.395767_52.514038
                        lat: 52.514038
                        lon: 13.395767
                      arr_time: 1554805632
                      arr_date_time: null
                      end_time: 1554805632
                      end_date_time: null
                      waiting_time: 0
                      distance: 5887
                      driving_time: 1303
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: service
                      id: s-3
                      location_id: 13.416882_52.523543
                      address:
                        location_id: 13.416882_52.523543
                        lat: 52.523543
                        lon: 13.416882
                      arr_time: 1554806253
                      arr_date_time: null
                      end_time: 1554806253
                      end_date_time: null
                      waiting_time: 0
                      distance: 8486
                      driving_time: 1924
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 2
                    - type: end
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      arr_time: 1554806794
                      arr_date_time: null
                      distance: 10618
                      driving_time: 2465
                      preparation_time: 0
                      waiting_time: 0
                      load_before:
                      - 2
                  - vehicle_id: vehicle-1
                    distance: 7376
                    transport_time: 1629
                    completion_time: 1707
                    waiting_time: 78
                    service_duration: 0
                    preparation_time: 0
                    points:
                    - coordinates:
                      - - 13.40608
                        - 52.53701
                      - - 13.40674
                        - 52.53571
                      - - 13.40433
                        - 52.53313
                      - - 13.40271
                        - 52.53149
                      - - 13.40246
                        - 52.53121
                      - - 13.40148
                        - 52.52999
                      - - 13.40128
                        - 52.52993
                      - - 13.40118
                        - 52.52988
                      - - 13.40133
                        - 52.5296
                      - - 13.40138
                        - 52.52951
                      - - 13.40167
                        - 52.52914
                      - - 13.40188
                        - 52.52895
                      - - 13.398
                        - 52.52885
                      - - 13.39289
                        - 52.52748
                      - - 13.39354
                        - 52.5264
                      - - 13.39358
                        - 52.52628
                      - - 13.39324
                        - 52.52575
                      - - 13.39334
                        - 52.52573
                      - - 13.39339
                        - 52.52584
                      type: LineString
                    - coordinates:
                      - - 13.39339
                        - 52.52584
                      - - 13.3934
                        - 52.52599
                      - - 13.39358
                        - 52.52628
                      - - 13.39354
                        - 52.5264
                      - - 13.39242
                        - 52.52823
                      - - 13.39381
                        - 52.52852
                      - - 13.38973
                        - 52.53173
                      - - 13.38717
                        - 52.5315
                      - - 13.38678
                        - 52.5315
                      - - 13.38641
                        - 52.53147
                      - - 13.38617
                        - 52.53143
                      - - 13.38607
                        - 52.53155
                      - - 13.38526
                        - 52.53225
                      - - 13.38501
                        - 52.53252
                      - - 13.38316
                        - 52.53418
                      - - 13.38179
                        - 52.5355
                      - - 13.38084
                        - 52.53523
                      - - 13.38081
                        - 52.53531
                      - - 13.3795
                        - 52.53677
                      - - 13.37941
                        - 52.53682
                      - - 13.37935
                        - 52.53683
                      - - 13.37919
                        - 52.53682
                      - - 13.37617
                        - 52.5361
                      - - 13.37502
                        - 52.53698
                      - - 13.37584
                        - 52.53734
                      type: LineString
                    - coordinates:
                      - - 13.37584
                        - 52.53734
                      - - 13.37566
                        - 52.53726
                      - - 13.37515
                        - 52.53763
                      - - 13.37644
                        - 52.53841
                      - - 13.37807
                        - 52.53935
                      - - 13.37946
                        - 52.5402
                      - - 13.3796
                        - 52.54019
                      - - 13.37984
                        - 52.54021
                      - - 13.37988
                        - 52.54012
                      - - 13.38062
                        - 52.53936
                      - - 13.38169
                        - 52.53832
                      - - 13.38236
                        - 52.5377
                      - - 13.38363
                        - 52.53661
                      - - 13.38492
                        - 52.53555
                      - - 13.38613
                        - 52.53447
                      - - 13.38757
                        - 52.53338
                      - - 13.38791
                        - 52.53354
                      - - 13.38812
                        - 52.53368
                      - - 13.38833
                        - 52.53392
                      - - 13.38977
                        - 52.53518
                      - - 13.39003
                        - 52.53539
                      - - 13.39256
                        - 52.53701
                      - - 13.39316
                        - 52.53739
                      - - 13.39327
                        - 52.53744
                      - - 13.3936
                        - 52.53757
                      - - 13.40155
                        - 52.53982
                      - - 13.40357
                        - 52.53715
                      - - 13.40372
                        - 52.53719
                      - - 13.40465
                        - 52.53727
                      - - 13.4048
                        - 52.53726
                      - - 13.4059
                        - 52.53736
                      - - 13.40608
                        - 52.53701
                      type: LineString
                    activities:
                    - type: start
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      end_time: 1554804329
                      end_date_time: null
                      distance: 0
                      driving_time: 0
                      preparation_time: 0
                      waiting_time: 0
                      load_after:
                      - 0
                    - type: service
                      id: s-2
                      location_id: 13.393364_52.525851
                      address:
                        location_id: 13.393364_52.525851
                        lat: 52.525851
                        lon: 13.393364
                      arr_time: 1554804743
                      arr_date_time: null
                      end_time: 1554804743
                      end_date_time: null
                      waiting_time: 0
                      distance: 1884
                      driving_time: 414
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: service
                      id: s-1
                      location_id: 13.375854_52.537338
                      address:
                        location_id: 13.375854_52.537338
                        lat: 52.537338
                        lon: 13.375854
                      arr_time: 1554805251
                      arr_date_time: null
                      end_time: 1554805329
                      end_date_time: null
                      waiting_time: 78
                      distance: 4205
                      driving_time: 922
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 2
                    - type: end
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      arr_time: 1554806036
                      arr_date_time: null
                      distance: 7376
                      driving_time: 1629
                      preparation_time: 0
                      waiting_time: 0
                      load_before:
                      - 2
                  unassigned:
                    services: []
                    shipments: []
                    breaks: []
                    details: []
              schema:
                $ref: '#/components/schemas/Response'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading the request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: Solve a route optimization problem
      tags:
      - Route Optimization
      x-codeSamples:
      - lang: curl
        source: "curl -X POST -H \"Content-Type: application/json\"   \"https://graphhopper.com/api/1/vrp?key=api_key\"\
          \   -d '{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\"\
          ,\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n  \
          \      \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n\
          \  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"\
          visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\"\
          ,\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n \
          \   { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n  \
          \    \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\"\
          : 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}'"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\",\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n        \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\",\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n    { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n      \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\": 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}");
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp?key=api_key")
                  .post(body)
                  .addHeader("content-type", "application/json")
                  .build();

          Response response = client.newCall(request).execute();
  /vrp/optimize:
    post:
      description: |2

        To solve a vehicle routing problem, perform the following steps:

        1.) Make a HTTP POST to this URL

        ```
        https://graphhopper.com/api/1/vrp/optimize?key=<your_key>
        ```

        It returns a job id (`job_id`).

        2.) Take the job id and fetch the solution for the vehicle routing problem from this URL:

        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```

        We recommend to query the solution every 500ms until it returns 'status=finished'.

        **Note**: Since the workflow is a bit more cumbersome and since you lose some time in fetching the solution, you should always prefer
        the [synchronous endpoint](#operation/solveVRP). You should use the batch mode only for long running problems.
      operationId: asyncVRP
      requestBody:
        content:
          application/json:
            example:
              vehicles:
              - vehicle_id: vehicle-1
                type_id: cargo-bike
                start_address:
                  location_id: berlin
                  lon: 13.406
                  lat: 52.537
                earliest_start: 1554804329
                latest_end: 1554808329
                max_jobs: 3
              - vehicle_id: vehicle-2
                type_id: cargo-bike
                start_address:
                  location_id: berlin
                  lon: 13.406
                  lat: 52.537
                earliest_start: 1554804329
                latest_end: 1554808329
                max_jobs: 3
                skills:
                - physical strength
              vehicle_types:
              - type_id: cargo-bike
                capacity:
                - 10
                profile: bike
              services:
              - id: s-1
                name: visit-Joe
                address:
                  location_id: 13.375854_52.537338
                  lon: 13.375854
                  lat: 52.537338
                size:
                - 1
                time_windows:
                - earliest: 1554805329
                  latest: 1554806329
              - id: s-2
                name: serve-Peter
                address:
                  location_id: 13.393364_52.525851
                  lon: 13.393364
                  lat: 52.525851
                size:
                - 1
              - id: s-3
                name: visit-Michael
                address:
                  location_id: 13.416882_52.523543
                  lon: 13.416882
                  lat: 52.523543
                size:
                - 1
              - id: s-4
                name: do nothing
                address:
                  location_id: 13.395767_52.514038
                  lon: 13.395767
                  lat: 52.514038
                size:
                - 1
              shipments:
              - id: 7fe77504-7df8-4497-843c-02d70b6490ce
                name: pickup and deliver pizza to Peter
                priority: 1
                pickup:
                  address:
                    location_id: 13.387613_52.529961
                    lon: 13.387613
                    lat: 52.529961
                delivery:
                  address:
                    location_id: 13.380575_52.513614
                    lon: 13.380575
                    lat: 52.513614
                size:
                - 1
                required_skills:
                - physical strength
              objectives:
              - type: min
                value: vehicles
              - type: min
                value: completion_time
              configuration:
                routing:
                  calc_points: true
                  snap_preventions:
                  - motorway
                  - trunk
                  - tunnel
                  - bridge
                  - ferry
            schema:
              $ref: '#/components/schemas/Request'
        description: The request that contains the problem to be solved.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server
            - see solution endpoint.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
          links:
            GetSolutionByJobId:
              description: |
                The `job_id` value returned in the response can be used as the `jobId` parameter in `GET /vrp/{jobId}`.
              operationId: getSolution
              parameters:
                jobId: $response.body#/job_id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading client request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: Submit a route optimization job
      tags:
      - Route Optimization
      x-codeSamples:
      - lang: curl
        source: "curl -X POST -H \"Content-Type: application/json\"   \"https://graphhopper.com/api/1/vrp/optimize?key=api_key\"\
          \   -d '{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\"\
          ,\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n  \
          \      \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n\
          \  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"\
          visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\"\
          ,\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n \
          \   { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n  \
          \    \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\"\
          : 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}'"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\n  \"vehicles\": [\n    {\n      \"vehicle_id\": \"my_vehicle\",\n      \"start_address\": {\n        \"location_id\": \"berlin\",\n        \"lon\": 13.406,\n        \"lat\": 52.537\n      }\n    }\n  ],\n  \"services\": [\n    {\n      \"id\": \"hamburg\",\n      \"name\": \"visit_hamburg\",\n      \"address\": {\n        \"location_id\": \"hamburg\",\n        \"lon\": 9.999,\n        \"lat\": 53.552\n      }\n    },\n    { \n     \"id\": \"munich\",\n      \"name\": \"visit_munich\",\n      \"address\": {\n        \"location_id\": \"munich\",\n        \"lon\": 11.57,\n        \"lat\": 48.145\n      }\n    }\n  ]}");
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp/optimize?key=api_key")
                  .post(body)
                  .addHeader("content-type", "application/json")
                  .build();

          Response response = client.newCall(request).execute();
  /vrp/solution/{jobId}:
    get:
      description: |2

        Take the job id and fetch the solution for the vehicle routing problem from this URL:

        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```

        You get the job id by sending a vehicle routing problem to the [batch mode URL](#operation/asyncVRP).
      operationId: getSolution
      parameters:
      - description: Request solution with jobId
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                copyrights:
                - GraphHopper
                - OpenStreetMap contributors
                job_id: d62fcadd-c84a-4298-90b5-28550125bec5
                status: finished
                waiting_time_in_queue: 0
                processing_time: 459
                solution:
                  costs: 438
                  distance: 17994
                  time: 4094
                  transport_time: 4094
                  completion_time: 4172
                  max_operation_time: 2465
                  waiting_time: 78
                  service_duration: 0
                  preparation_time: 0
                  no_vehicles: 2
                  no_unassigned: 0
                  routes:
                  - vehicle_id: vehicle-2
                    distance: 10618
                    transport_time: 2465
                    completion_time: 2465
                    waiting_time: 0
                    service_duration: 0
                    preparation_time: 0
                    points:
                    - coordinates:
                      - - 13.40608
                        - 52.53701
                      - - 13.40643
                        - 52.53631
                      - - 13.40554
                        - 52.53616
                      - - 13.4054
                        - 52.53608
                      - - 13.40445
                        - 52.53513
                      - - 13.40436
                        - 52.53509
                      - - 13.40428
                        - 52.53508
                      - - 13.40463
                        - 52.53419
                      - - 13.40451
                        - 52.53419
                      - - 13.4034
                        - 52.53401
                      - - 13.403
                        - 52.53359
                      - - 13.40291
                        - 52.53354
                      - - 13.40268
                        - 52.53347
                      - - 13.39888
                        - 52.53259
                      - - 13.39839
                        - 52.53253
                      - - 13.39812
                        - 52.53251
                      - - 13.39616
                        - 52.53243
                      - - 13.39579
                        - 52.5324
                      - - 13.38973
                        - 52.53173
                      - - 13.39163
                        - 52.53025
                      - - 13.38797
                        - 52.52935
                      - - 13.38763
                        - 52.52996
                      type: LineString
                    - coordinates:
                      - - 13.38763
                        - 52.52996
                      - - 13.38739
                        - 52.53039
                      - - 13.38724
                        - 52.53036
                      - - 13.38464
                        - 52.52929
                      - - 13.38538
                        - 52.52871
                      - - 13.38634
                        - 52.52792
                      - - 13.38638
                        - 52.52779
                      - - 13.38657
                        - 52.52763
                      - - 13.38676
                        - 52.52741
                      - - 13.38698
                        - 52.52713
                      - - 13.38704
                        - 52.52701
                      - - 13.38753
                        - 52.524
                      - - 13.3877
                        - 52.52307
                      - - 13.3878
                        - 52.52282
                      - - 13.38788
                        - 52.52252
                      - - 13.38802
                        - 52.52174
                      - - 13.38519
                        - 52.52009
                      - - 13.38539
                        - 52.5191
                      - - 13.38548
                        - 52.51852
                      - - 13.38042
                        - 52.51819
                      - - 13.38071
                        - 52.5167
                      - - 13.38076
                        - 52.51652
                      - - 13.38084
                        - 52.51634
                      - - 13.3821
                        - 52.51396
                      - - 13.38055
                        - 52.51365
                      type: LineString
                    - coordinates:
                      - - 13.38055
                        - 52.51365
                      - - 13.38229
                        - 52.514
                      - - 13.38363
                        - 52.51429
                      - - 13.3848
                        - 52.51445
                      - - 13.38504
                        - 52.51358
                      - - 13.39124
                        - 52.51397
                      - - 13.3911
                        - 52.51488
                      - - 13.39303
                        - 52.51499
                      - - 13.39317
                        - 52.5141
                      - - 13.39548
                        - 52.51419
                      - - 13.39571
                        - 52.51421
                      type: LineString
                    - coordinates:
                      - - 13.39571
                        - 52.51421
                      - - 13.39695
                        - 52.51434
                      - - 13.39674
                        - 52.51523
                      - - 13.39742
                        - 52.51531
                      - - 13.39873
                        - 52.51558
                      - - 13.39846
                        - 52.51599
                      - - 13.39825
                        - 52.51729
                      - - 13.39805
                        - 52.51755
                      - - 13.39892
                        - 52.51761
                      - - 13.39917
                        - 52.51764
                      - - 13.39964
                        - 52.51775
                      - - 13.40009
                        - 52.51791
                      - - 13.40034
                        - 52.51797
                      - - 13.4021
                        - 52.51864
                      - - 13.40288
                        - 52.51896
                      - - 13.40375
                        - 52.51936
                      - - 13.40498
                        - 52.52001
                      - - 13.40463
                        - 52.5203
                      - - 13.40311
                        - 52.52144
                      - - 13.40442
                        - 52.52189
                      - - 13.40448
                        - 52.52192
                      - - 13.40451
                        - 52.52195
                      - - 13.40473
                        - 52.52199
                      - - 13.40504
                        - 52.52208
                      - - 13.40572
                        - 52.52235
                      - - 13.40687
                        - 52.52294
                      - - 13.40693
                        - 52.52299
                      - - 13.40706
                        - 52.52319
                      - - 13.40738
                        - 52.52378
                      - - 13.40787
                        - 52.52443
                      - - 13.4079
                        - 52.52453
                      - - 13.40938
                        - 52.52401
                      - - 13.40962
                        - 52.52398
                      - - 13.41001
                        - 52.52395
                      - - 13.41072
                        - 52.52391
                      - - 13.41215
                        - 52.52389
                      - - 13.41233
                        - 52.52386
                      - - 13.4131
                        - 52.5235
                      - - 13.41288
                        - 52.52333
                      - - 13.41475
                        - 52.52247
                      - - 13.41496
                        - 52.52264
                      - - 13.41523
                        - 52.52251
                      - - 13.41633
                        - 52.52338
                      - - 13.41631
                        - 52.52346
                      - - 13.41654
                        - 52.52364
                      - - 13.41684
                        - 52.52351
                      type: LineString
                    - coordinates:
                      - - 13.41684
                        - 52.52351
                      - - 13.41654
                        - 52.52364
                      - - 13.41631
                        - 52.52346
                      - - 13.4163
                        - 52.52344
                      - - 13.41587
                        - 52.52363
                      - - 13.41572
                        - 52.5235
                      - - 13.41409
                        - 52.5242
                      - - 13.41454
                        - 52.52461
                      - - 13.41454
                        - 52.52466
                      - - 13.41358
                        - 52.52508
                      - - 13.41366
                        - 52.52514
                      - - 13.41344
                        - 52.52525
                      - - 13.4133
                        - 52.52514
                      - - 13.41316
                        - 52.5252
                      - - 13.41107
                        - 52.52585
                      - - 13.41118
                        - 52.52606
                      - - 13.41118
                        - 52.52616
                      - - 13.41095
                        - 52.52664
                      - - 13.41097
                        - 52.52678
                      - - 13.41084
                        - 52.52706
                      - - 13.41057
                        - 52.52747
                      - - 13.41028
                        - 52.52809
                      - - 13.41032
                        - 52.52821
                      - - 13.4102
                        - 52.52847
                      - - 13.40999
                        - 52.52875
                      - - 13.40984
                        - 52.52905
                      - - 13.40982
                        - 52.52914
                      - - 13.40984
                        - 52.52926
                      - - 13.4104
                        - 52.52998
                      - - 13.4105
                        - 52.53001
                      - - 13.41064
                        - 52.53016
                      - - 13.41082
                        - 52.5303
                      - - 13.41198
                        - 52.53107
                      - - 13.4122
                        - 52.53128
                      - - 13.41232
                        - 52.53143
                      - - 13.41247
                        - 52.53192
                      - - 13.41267
                        - 52.53245
                      - - 13.41275
                        - 52.53259
                      - - 13.41215
                        - 52.5327
                      - - 13.40731
                        - 52.53463
                      - - 13.40608
                        - 52.53701
                      type: LineString
                    activities:
                    - type: start
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      end_time: 1554804329
                      end_date_time: null
                      distance: 0
                      driving_time: 0
                      preparation_time: 0
                      waiting_time: 0
                      load_after:
                      - 0
                    - type: pickupShipment
                      id: 7fe77504-7df8-4497-843c-02d70b6490ce
                      location_id: 13.387613_52.529961
                      address:
                        location_id: 13.387613_52.529961
                        lat: 52.529961
                        lon: 13.387613
                      arr_time: 1554804789
                      arr_date_time: null
                      end_time: 1554804789
                      end_date_time: null
                      waiting_time: 0
                      distance: 2012
                      driving_time: 460
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: deliverShipment
                      id: 7fe77504-7df8-4497-843c-02d70b6490ce
                      location_id: 13.380575_52.513614
                      address:
                        location_id: 13.380575_52.513614
                        lat: 52.513614
                        lon: 13.380575
                      arr_time: 1554805344
                      arr_date_time: null
                      end_time: 1554805344
                      end_date_time: null
                      waiting_time: 0
                      distance: 4560
                      driving_time: 1015
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 0
                    - type: service
                      id: s-4
                      location_id: 13.395767_52.514038
                      address:
                        location_id: 13.395767_52.514038
                        lat: 52.514038
                        lon: 13.395767
                      arr_time: 1554805632
                      arr_date_time: null
                      end_time: 1554805632
                      end_date_time: null
                      waiting_time: 0
                      distance: 5887
                      driving_time: 1303
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: service
                      id: s-3
                      location_id: 13.416882_52.523543
                      address:
                        location_id: 13.416882_52.523543
                        lat: 52.523543
                        lon: 13.416882
                      arr_time: 1554806253
                      arr_date_time: null
                      end_time: 1554806253
                      end_date_time: null
                      waiting_time: 0
                      distance: 8486
                      driving_time: 1924
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 2
                    - type: end
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      arr_time: 1554806794
                      arr_date_time: null
                      distance: 10618
                      driving_time: 2465
                      preparation_time: 0
                      waiting_time: 0
                      load_before:
                      - 2
                  - vehicle_id: vehicle-1
                    distance: 7376
                    transport_time: 1629
                    completion_time: 1707
                    waiting_time: 78
                    service_duration: 0
                    preparation_time: 0
                    points:
                    - coordinates:
                      - - 13.40608
                        - 52.53701
                      - - 13.40674
                        - 52.53571
                      - - 13.40433
                        - 52.53313
                      - - 13.40271
                        - 52.53149
                      - - 13.40246
                        - 52.53121
                      - - 13.40148
                        - 52.52999
                      - - 13.40128
                        - 52.52993
                      - - 13.40118
                        - 52.52988
                      - - 13.40133
                        - 52.5296
                      - - 13.40138
                        - 52.52951
                      - - 13.40167
                        - 52.52914
                      - - 13.40188
                        - 52.52895
                      - - 13.398
                        - 52.52885
                      - - 13.39289
                        - 52.52748
                      - - 13.39354
                        - 52.5264
                      - - 13.39358
                        - 52.52628
                      - - 13.39324
                        - 52.52575
                      - - 13.39334
                        - 52.52573
                      - - 13.39339
                        - 52.52584
                      type: LineString
                    - coordinates:
                      - - 13.39339
                        - 52.52584
                      - - 13.3934
                        - 52.52599
                      - - 13.39358
                        - 52.52628
                      - - 13.39354
                        - 52.5264
                      - - 13.39242
                        - 52.52823
                      - - 13.39381
                        - 52.52852
                      - - 13.38973
                        - 52.53173
                      - - 13.38717
                        - 52.5315
                      - - 13.38678
                        - 52.5315
                      - - 13.38641
                        - 52.53147
                      - - 13.38617
                        - 52.53143
                      - - 13.38607
                        - 52.53155
                      - - 13.38526
                        - 52.53225
                      - - 13.38501
                        - 52.53252
                      - - 13.38316
                        - 52.53418
                      - - 13.38179
                        - 52.5355
                      - - 13.38084
                        - 52.53523
                      - - 13.38081
                        - 52.53531
                      - - 13.3795
                        - 52.53677
                      - - 13.37941
                        - 52.53682
                      - - 13.37935
                        - 52.53683
                      - - 13.37919
                        - 52.53682
                      - - 13.37617
                        - 52.5361
                      - - 13.37502
                        - 52.53698
                      - - 13.37584
                        - 52.53734
                      type: LineString
                    - coordinates:
                      - - 13.37584
                        - 52.53734
                      - - 13.37566
                        - 52.53726
                      - - 13.37515
                        - 52.53763
                      - - 13.37644
                        - 52.53841
                      - - 13.37807
                        - 52.53935
                      - - 13.37946
                        - 52.5402
                      - - 13.3796
                        - 52.54019
                      - - 13.37984
                        - 52.54021
                      - - 13.37988
                        - 52.54012
                      - - 13.38062
                        - 52.53936
                      - - 13.38169
                        - 52.53832
                      - - 13.38236
                        - 52.5377
                      - - 13.38363
                        - 52.53661
                      - - 13.38492
                        - 52.53555
                      - - 13.38613
                        - 52.53447
                      - - 13.38757
                        - 52.53338
                      - - 13.38791
                        - 52.53354
                      - - 13.38812
                        - 52.53368
                      - - 13.38833
                        - 52.53392
                      - - 13.38977
                        - 52.53518
                      - - 13.39003
                        - 52.53539
                      - - 13.39256
                        - 52.53701
                      - - 13.39316
                        - 52.53739
                      - - 13.39327
                        - 52.53744
                      - - 13.3936
                        - 52.53757
                      - - 13.40155
                        - 52.53982
                      - - 13.40357
                        - 52.53715
                      - - 13.40372
                        - 52.53719
                      - - 13.40465
                        - 52.53727
                      - - 13.4048
                        - 52.53726
                      - - 13.4059
                        - 52.53736
                      - - 13.40608
                        - 52.53701
                      type: LineString
                    activities:
                    - type: start
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      end_time: 1554804329
                      end_date_time: null
                      distance: 0
                      driving_time: 0
                      preparation_time: 0
                      waiting_time: 0
                      load_after:
                      - 0
                    - type: service
                      id: s-2
                      location_id: 13.393364_52.525851
                      address:
                        location_id: 13.393364_52.525851
                        lat: 52.525851
                        lon: 13.393364
                      arr_time: 1554804743
                      arr_date_time: null
                      end_time: 1554804743
                      end_date_time: null
                      waiting_time: 0
                      distance: 1884
                      driving_time: 414
                      preparation_time: 0
                      load_before:
                      - 0
                      load_after:
                      - 1
                    - type: service
                      id: s-1
                      location_id: 13.375854_52.537338
                      address:
                        location_id: 13.375854_52.537338
                        lat: 52.537338
                        lon: 13.375854
                      arr_time: 1554805251
                      arr_date_time: null
                      end_time: 1554805329
                      end_date_time: null
                      waiting_time: 78
                      distance: 4205
                      driving_time: 922
                      preparation_time: 0
                      load_before:
                      - 1
                      load_after:
                      - 2
                    - type: end
                      location_id: berlin
                      address:
                        location_id: berlin
                        lat: 52.537
                        lon: 13.406
                      arr_time: 1554806036
                      arr_date_time: null
                      distance: 7376
                      driving_time: 1629
                      preparation_time: 0
                      waiting_time: 0
                      load_before:
                      - 2
                  unassigned:
                    services: []
                    shipments: []
                    breaks: []
                    details: []
              schema:
                $ref: '#/components/schemas/Response'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred on client side such as invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSolution_404_response'
          description: Requested solution could not be found.
        "500":
          description: Error occurred on server side.
      summary: Retrieve solution of a route optimization job
      tags:
      - Route Optimization
      x-codeSamples:
      - lang: curl
        source: curl -X GET "https://graphhopper.com/api/1/vrp/solution/job_id?key=api_key"
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient();
          Request request = new Request.Builder()
                  .url("https://graphhopper.com/api/1/vrp/solution/job_id?key=api_key")
                  .get()
                  .build();

          Response response = client.newCall(request).execute();
  /cluster:
    post:
      description: |2

        The Cluster endpoint is used with a POST request towards
        `https://graphhopper.com/api/1/cluster?key=<your_key>`. The solution will be provided in the JSON response.
        Please note that for problems that take longer than 10 seconds a bad request error is returned.
        In this case please use the asynchronous [Batch Cluster Endpoint](#operation/asyncClusteringProblem) instead.
      operationId: solveClusteringProblem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRequest'
        description: Request object that contains the problem to be solved
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading the request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: POST Cluster Endpoint
      tags:
      - Clustering
  /cluster/calculate:
    post:
      description: |2

        Prefer the [synchronous endpoint](#operation/solveClusteringProblem) and use this Batch Cluster endpoint for
        long running problems only. The work flow is asynchronous:

        - send a POST request towards `https://graphhopper.com/api/1/cluster/calculate?key=<your_key>` and fetch the job_id.
        - poll the solution every 500ms until it gives `status=finished`. Do this with a GET request
          towards `https://graphhopper.com/api/1/cluster/solution/<job_id>?key=<your_key>`.
      operationId: asyncClusteringProblem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRequest'
        description: Request object that contains the problem to be solved
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobId'
          description: A jobId you can use to retrieve your solution from the server
            - see solution endpoint.
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
          links:
            GetSolutionByJobId:
              description: |
                The `job_id` value returned in the response can be used as the `jobId` parameter in `GET /vrp/{jobId}`.
              operationId: getSolution
              parameters:
                jobId: $response.body#/job_id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred when reading client request. Request is invalid.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorMessage'
          description: Error occurred on server side.
      summary: Batch Cluster Endpoint
      tags:
      - Clustering
  /cluster/solution/{jobId}:
    get:
      description: |
        This endpoint returns the solution of the clustering problems submitted to the [Batch Cluster endpoint](#operation/asyncClusteringProblem).
        You can fetch it with the job_id, you have been sent.
      operationId: getClusterSolution
      parameters:
      - description: Request solution with jobId
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterResponse'
          description: A response containing the solution
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
          description: Error occurred on client side such as invalid input.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSolution_404_response'
          description: Requested solution could not be found.
        "500":
          description: Error occurred on server side.
      summary: GET Batch Solution Endpoint
      tags:
      - Clustering
  /profiles:
    get:
      operationId: getProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileGetResponse'
          description: Your profiles
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
      summary: List your custom routing profiles
      tags:
      - Custom Profiles
    post:
      operationId: postProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          description: Profile created
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Credits:
              description: "The credit costs for this request. Note it could be a\
                \ decimal and even negative number, e.g. when an async request failed."
              explode: false
              schema:
                type: integer
              style: simple
      summary: Create a custom routing profile
      tags:
      - Custom Profiles
  /profiles/{profileId}:
    delete:
      operationId: deleteProfile
      parameters:
      - description: The profile to delete
        explode: false
        in: path
        name: profileId
        required: true
        schema:
          example: cp_shc_1_4390ba24-e6cb-406b-acc6-3402dd4d229d
          type: string
        style: simple
      responses:
        "200":
          description: Profile deleted
          headers:
            X-RateLimit-Limit:
              description: Your current daily credit limit.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Remaining:
              description: Your remaining credits until the reset.
              explode: false
              schema:
                type: integer
              style: simple
            X-RateLimit-Reset:
              description: The number of seconds that you have to wait before a reset
                of the credit count is done.
              explode: false
              schema:
                type: integer
              style: simple
      summary: Delete a custom routing profile
      tags:
      - Custom Profiles
components:
  schemas:
    ClusterResponse:
      example:
        waiting_time_in_queue: 0.8008281904610115
        processing_time: 4900
        copyrights:
        - GraphHopper
        - OpenStreetMap contributors
        clusters:
        - quantity: 40
          ids:
          - GraphHopper GmbH
        - quantity: 40
          ids:
          - GraphHopper GmbH
        status: finished
      properties:
        copyrights:
          example:
          - GraphHopper
          - OpenStreetMap contributors
          items:
            type: string
          type: array
        status:
          description: Indicates the current status of the job
          enum:
          - waiting_in_queue
          - processing
          - finished
          example: finished
          type: string
        waiting_time_in_queue:
          format: double
          type: number
        processing_time:
          example: 4900
          format: double
          type: number
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
    Cluster:
      example:
        quantity: 40
        ids:
        - GraphHopper GmbH
      properties:
        quantity:
          description: Cluster size
          example: 40
          format: int32
          type: number
        ids:
          description: Array of customer ids assigned to this specific cluster
          example:
          - GraphHopper GmbH
          items:
            type: string
          type: array
    ClusterRequest:
      example:
        configuration:
          routing:
            profile: car
            cost_per_second: 1
            cost_per_meter: 0
          response_type: json
          clustering:
            max_quantity: 50
            min_quantity: 30
            num_clusters: 10
        customers:
        - address:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          quantity: 10
          id: GraphHopper GmbH
        - address:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          quantity: 10
          id: GraphHopper GmbH
        clusters:
        - max_quantity: 10
          min_quantity: 10
          center:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          name: GraphHopper GmbH
        - max_quantity: 10
          min_quantity: 10
          center:
            street_hint: Lindenschmitstraße 52
            lon: 11.53941
            lat: 48.118434
          name: GraphHopper GmbH
      properties:
        configuration:
          $ref: '#/components/schemas/ClusterConfiguration'
        clusters:
          items:
            $ref: '#/components/schemas/Clusters'
          type: array
        customers:
          items:
            $ref: '#/components/schemas/ClusterCustomer'
          type: array
    ClusterConfiguration:
      example:
        routing:
          profile: car
          cost_per_second: 1
          cost_per_meter: 0
        response_type: json
        clustering:
          max_quantity: 50
          min_quantity: 30
          num_clusters: 10
      properties:
        response_type:
          default: json
          description: Specifies the response format. You can either choose `geojson`
            or `json`.
          example: json
          type: string
        routing:
          $ref: '#/components/schemas/ClusterConfigurationRouting'
        clustering:
          $ref: '#/components/schemas/ClusterConfigurationClustering'
    Clusters:
      example:
        max_quantity: 10
        min_quantity: 10
        center:
          street_hint: Lindenschmitstraße 52
          lon: 11.53941
          lat: 48.118434
        name: GraphHopper GmbH
      properties:
        name:
          description: id of customer
          example: GraphHopper GmbH
          type: string
        center:
          $ref: '#/components/schemas/ClusterCustomerAddress'
        min_quantity:
          description: Specifies min. quantity of this cluster
          example: 10
          format: int32
          type: number
        max_quantity:
          description: Specifies max. quantity of this cluster
          example: 10
          format: int32
          type: number
    ClusterCustomer:
      example:
        address:
          street_hint: Lindenschmitstraße 52
          lon: 11.53941
          lat: 48.118434
        quantity: 10
        id: GraphHopper GmbH
      properties:
        id:
          description: id of customer
          example: GraphHopper GmbH
          type: string
        address:
          $ref: '#/components/schemas/ClusterCustomerAddress'
        quantity:
          description: demand of customer
          example: 10
          format: int32
          type: number
    ClusterCustomerAddress:
      example:
        street_hint: Lindenschmitstraße 52
        lon: 11.53941
        lat: 48.118434
      properties:
        lon:
          description: Longitude
          example: 11.53941
          format: double
          type: number
        lat:
          description: Latitude
          example: 48.118434
          format: double
          type: number
        street_hint:
          description: "Optional parameter. Provide a hint that includes only the\
            \ street name for each address to better snap the coordinates (lon,lat)\
            \ to road network. E.g. if there is an address or house with two or more\
            \ neighboring streets you can control for which street the closest location\
            \ is looked up."
          example: Lindenschmitstraße 52
          type: string
    ClusterConfigurationRouting:
      example:
        profile: car
        cost_per_second: 1
        cost_per_meter: 0
      properties:
        profile:
          default: car
          description: "The routing profile. It determines the network, speed and\
            \ other physical attributes used when computing the route. See the section\
            \ about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more\
            \ details and valid profile values."
          type: string
        cost_per_second:
          description: Cost per second (travel time)
          example: 1
          format: double
          type: number
        cost_per_meter:
          description: Cost per meter (travel distance)
          example: 0
          format: double
          type: number
    ClusterConfigurationClustering:
      example:
        max_quantity: 50
        min_quantity: 30
        num_clusters: 10
      properties:
        num_clusters:
          description: Specifies the number of clusters
          example: 10
          format: int32
          type: number
        max_quantity:
          description: Specifies max. quantity in a cluster
          example: 50
          format: int32
          type: number
        min_quantity:
          description: Specifies min. quantity in a cluster
          example: 30
          format: int32
          type: number
    GeocodingResponse:
      example:
        hits:
        - osm_id: 240109189
          osm_type: "N"
          country: Deutschland
          osm_key: place
          city: Berlin
          osm_value: city
          postcode: "10117"
          name: Berlin
          point:
            lng: 13.3888599
            lat: 52.5170365
        - osm_id: 62422
          osm_type: R
          extent:
          - 13.088345
          - 52.6755087
          - 13.7611609
          - 52.33826
          country: Deutschland
          osm_key: place
          osm_value: city
          name: Berlin
          point:
            lng: 13.4385964
            lat: 52.5198535
        - osm_id: 120456814
          osm_type: W
          extent:
          - 13.3906703
          - 52.5200704
          - 13.3948873
          - 52.5175007
          country: Deutschland
          osm_key: amenity
          city: Berlin
          street: Dorotheenstraße
          osm_value: university
          postcode: "10117"
          name: Humboldt-Universität zu Berlin
          point:
            lng: 13.393560493637775
            lat: 52.51875685
        - osm_id: 6647
          osm_type: R
          extent:
          - 13.3924346
          - 52.5191829
          - 13.3948768
          - 52.517526
          country: Deutschland
          osm_key: building
          housenumber: "6"
          city: Berlin
          street: Unter den Linden
          osm_value: "yes"
          postcode: "10117"
          name: Humboldt-Universität zu Berlin
          point:
            lng: 13.392908021752554
            lat: 52.51840935
        - osm_id: 38862723
          osm_type: W
          extent:
          - 13.2364563
          - 52.5161915
          - 13.2433375
          - 52.5129557
          country: Deutschland
          osm_key: leisure
          housenumber: "3"
          city: Berlin
          street: Olympischer Platz
          osm_value: stadium
          postcode: "14053"
          name: Olympiastadion Berlin
          point:
            lng: 13.239776301622072
            lat: 52.5147077
        - osm_id: 583306346
          osm_type: W
          extent:
          - 13.3739245
          - 52.528547
          - 13.3818019
          - 52.5229778
          country: Deutschland
          osm_key: amenity
          city: Berlin
          street: Hufelandweg
          osm_value: hospital
          postcode: "10117"
          name: Charité Universitätsmedizin Berlin
          point:
            lng: 13.377739577932736
            lat: 52.52585125
        - osm_id: 180594
          osm_type: R
          extent:
          - 13.3906159
          - 52.5190301
          - 13.3923847
          - 52.5174089
          country: Deutschland
          osm_key: amenity
          housenumber: "8"
          city: Berlin
          street: Unter den Linden
          osm_value: library
          postcode: "10117"
          name: Staatsbibliothek zu Berlin
          point:
            lng: 13.391516532100738
            lat: 52.5182233
        - osm_id: 3856100103
          osm_type: "N"
          country: Deutschland
          osm_key: railway
          city: Berlin
          street: Washingtonplatz
          osm_value: station
          postcode: "10557"
          name: Berlin Hauptbahnhof
          point:
            lng: 13.3696614
            lat: 52.5249451
        - osm_id: 1078631331
          osm_type: "N"
          country: Deutschland
          osm_key: historic
          city: Berlin
          street: Gertrud-Kolmar-Straße
          osm_value: battlefield
          postcode: "10117"
          name: Schlacht um Berlin
          point:
            lng: 13.3814231
            lat: 52.5127537
        - osm_id: 1154556
          osm_type: R
          extent:
          - 13.3807495
          - 52.5083344
          - 13.3822459
          - 52.5074359
          country: Deutschland
          osm_key: office
          housenumber: "5"
          city: Berlin
          street: Niederkirchnerstraße
          osm_value: government
          postcode: "10117"
          name: Abgeordnetenhaus von Berlin
          point:
            lng: 13.381504320489928
            lat: 52.50786655
        took: 37
      properties:
        hits:
          items:
            $ref: '#/components/schemas/GeocodingLocation'
          type: array
        took:
          description: in ms
          format: int64
          type: number
    GeocodingLocation:
      properties:
        point:
          $ref: '#/components/schemas/GeocodingPoint'
        osm_id:
          description: The OSM ID of the entity
          type: string
        osm_type:
          description: "N = node, R = relation, W = way"
          type: string
        osm_key:
          description: The OSM key of the entity
          type: string
        name:
          description: "The name of the entity. Can be a boundary, POI, address, etc"
          type: string
        country:
          description: The country of the address
          type: string
        city:
          description: The city of the address
          type: string
        state:
          description: The state of the address
          type: string
        street:
          description: The street of the address
          type: string
        housenumber:
          description: The housenumber of the address
          type: string
        postcode:
          description: The postcode of the address
          type: string
    GeocodingPoint:
      properties:
        lat:
          description: Latitude
          format: double
          type: number
        lng:
          description: Longitude
          format: double
          type: number
    MatrixRequest:
      example:
        from_points:
        - - -0.11379003524780275
          - 51.53664617804063
        - - -0.10866165161132814
          - 51.538621486960956
        - - -0.11059284210205078
          - 51.53245503603458
        to_points:
        - - -0.09576559066772462
          - 51.512882367963456
        - - -0.08797645568847656
          - 51.51317615367198
        from_point_hints:
        - Copenhagen Street
        - Richmond Avenue
        - White Lion Street
        to_point_hints:
        - Cannon
        - Cornhill
        out_arrays:
        - weights
        - times
        - distances
        vehicle: car
      properties:
        profile:
          default: car
          description: "The routing profile. It determines the network, speed and\
            \ other physical attributes used when computing the route. See the section\
            \ about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more\
            \ details and valid profile values."
          type: string
        from_points:
          description: "The origin points for the routes in an array of `[longitude,latitude]`."
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        to_points:
          description: "The destination points for the routes in an array of `[longitude,latitude]`."
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        from_point_hints:
          description: See `point_hints`of symmetrical matrix
          items:
            type: string
          type: array
        to_point_hints:
          description: See `point_hints`of symmetrical matrix
          items:
            type: string
          type: array
        snap_preventions:
          description: See `snap_preventions` of symmetrical matrix
          items:
            type: string
          type: array
        from_curbsides:
          description: See `curbsides`of symmetrical matrix
          items:
            type: string
          type: array
        to_curbsides:
          description: See `curbsides`of symmetrical matrix
          items:
            type: string
          type: array
        out_arrays:
          description: "Specifies which matrices should be included in the response.\
            \ Specify one or more of the following options `weights`, `times`, `distances`.\
            \ The units of the entries of `distances` are meters, of `times` are seconds\
            \ and of `weights` is arbitrary and it can differ for different vehicles\
            \ or versions of this API."
          items:
            type: string
          type: array
        fail_fast:
          default: true
          description: Specifies whether or not the matrix calculation should return
            with an error as soon as possible in case some points cannot be found
            or some points are not connected. If set to `false` the time/weight/distance
            matrix will be calculated for all valid points and contain the `null`
            value for all entries that could not be calculated. The `hint` field of
            the response will also contain additional information about what went
            wrong (see its documentation).
          type: boolean
    SymmetricalMatrixRequest:
      example:
        points:
        - - -0.11379003524780275
          - 51.53664617804063
        - - -0.10866165161132814
          - 51.538621486960956
        - - -0.11059284210205078
          - 51.53245503603458
        point_hints:
        - Copenhagen Street
        - Richmond Avenue
        - White Lion Street
        out_arrays:
        - weights
        - times
        - distances
        vehicle: car
      properties:
        profile:
          default: car
          description: "The routing profile. It determines the network, speed and\
            \ other physical attributes used when computing the route. See the section\
            \ about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more\
            \ details and valid profile values."
          type: string
        points:
          description: "Specify multiple points for which the weight-, route-, time-\
            \ or distance-matrix should be calculated as follows: `[longitude,latitude]`.\
            \ In this case the origins are identical to the destinations. Thus, if\
            \ there are N points, NxN entries are calculated. The order of the point\
            \ parameter is important. Specify at least three points. Cannot be used\
            \ together with `from_point` or `to_point.`."
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        point_hints:
          description: Optional parameter. Specifies a hint for each point in the
            `points` array to prefer a certain street for the closest location lookup.
            E.g. if there is an address or house with two or more neighboring streets
            you can control for which street the closest location is looked up.
          items:
            type: string
          type: array
        snap_preventions:
          description: "Optional parameter. 'Snapping' is the process of finding the\
            \ closest road location for GPS coordinates provided in the `points` array.\
            \ The `snap_preventions` array allows you to prevent snapping to specific\
            \ types of roads. For example, if the array includes `bridge`, then the\
            \ routing engine will avoid snapping to a bridge, even if it is the closest\
            \ road for the given point. Note that once snapped the routing algorithm\
            \ can still route over bridges (or the other values). To avoid this you\
            \ need to use the `custom_model`."
          example:
          - motorway
          - trunk
          - bridge
          - tunnel
          - ferry
          - ford
          items:
            enum:
            - motorway
            - trunk
            - bridge
            - ford
            - tunnel
            - ferry
            type: string
          type: array
        curbsides:
          description: Optional parameter. It specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. You need to specify this parameter for either none or all points.
            Only supported for motor vehicles and OpenStreetMap.
          items:
            enum:
            - right
            - left
            - any
            type: string
          type: array
        out_arrays:
          description: "Specifies which matrices should be included in the response.\
            \ Specify one or more of the following options `weights`, `times`, `distances`.\
            \ The units of the entries of `distances` are meters, of `times` are seconds\
            \ and of `weights` is arbitrary and it can differ for different vehicle\
            \ profiles or versions of this API."
          items:
            type: string
          type: array
        fail_fast:
          default: true
          description: Specifies whether or not the matrix calculation should return
            with an error as soon as possible in case some points cannot be found
            or some points are not connected. If set to `false` the time/weight/distance
            matrix will be calculated for all valid points and contain the `null`
            value for all entries that could not be calculated. The `hint` field of
            the response will also contain additional information about what went
            wrong (see its documentation).
          type: boolean
    MatrixResponse:
      example:
        distances:
        - - 0
          - 97653
          - 48887
        - - 97426
          - 0
          - 121035
        - - 49006
          - 121049
          - 0
        times:
        - - 0
          - 4197
          - 2994
        - - 4192
          - 0
          - 6074
        - - 3006
          - 6062
          - 0
        weights:
        - - 0
          - 5662.551
          - 3727.147
        - - 5653.807
          - 0
          - 7889.653
        - - 3741.528
          - 7878.365
          - 0
        info:
          copyrights:
          - GraphHopper
          - OpenStreetMap contributors
      properties:
        distances:
          description: The distance matrix for the specified points in the same order
            as the time matrix. The distances are in meters. If `fail_fast=false`
            the matrix will contain `null` for connections that could not be found.
          items:
            items:
              format: int64
              type: number
            type: array
          type: array
        times:
          description: "The time matrix for the specified points in the order [[from1->to1,\
            \ from1->to2, ...], [from2->to1, from2->to2, ...], ...]. The times are\
            \ in seconds. If `fail_fast=false` the matrix will contain `null` for\
            \ connections that could not be found."
          items:
            items:
              format: int64
              type: number
            type: array
          type: array
        weights:
          description: The weight matrix for the specified points in the same order
            as the time matrix. The weights for different vehicle profiles can have
            a different unit but the weights array is perfectly suited as input for
            Vehicle Routing Problems as it is currently faster to calculate. If `fail_fast=false`
            the matrix will contain `null` for connections that could not be found.
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        info:
          $ref: '#/components/schemas/ResponseInfo'
        hints:
          description: Optional. Additional response data.
          items:
            $ref: '#/components/schemas/MatrixResponse_hints_inner'
          type: array
    RouteRequest:
      example:
        profile: bike
        points:
        - - 11.539421
          - 48.118477
        - - 11.559023
          - 48.12228
        point_hints:
        - Lindenschmitstraße
        - Thalkirchener Str.
        snap_preventions:
        - motorway
        - ferry
        - tunnel
        details:
        - road_class
        - surface
      properties:
        profile:
          default: car
          description: "The routing profile. It determines the network, speed and\
            \ other physical attributes used when computing the route. See the section\
            \ about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more\
            \ details and valid profile values."
          type: string
        points:
          description: |
            The points for the route in an array of `[longitude,latitude]`. For instance, if you want to calculate a route from point A to B to C
            then you specify `points: [ [A_longitude, A_latitude], [B_longitude, B_latitude], [C_longitude, C_latitude]]
          example:
          - - 11.539421
            - 48.118477
          - - 11.559023
            - 48.12228
          items:
            items:
              format: double
              type: number
            type: array
          type: array
        point_hints:
          description: Optional parameter. Specifies a hint for each point in the
            `points` array to prefer a certain street for the closest location lookup.
            E.g. if there is an address or house with two or more neighboring streets
            you can control for which street the closest location is looked up. Make
            sure you do not include the house number of city name and only the street
            name to improve the quality of the matching.
          example:
          - Lindenschmitstraße
          - Thalkirchener Str.
          items:
            type: string
          type: array
        snap_preventions:
          description: "Optional parameter. 'Snapping' is the process of finding the\
            \ closest road location for GPS coordinates provided in the `points` array.\
            \ The `snap_preventions` array allows you to prevent snapping to specific\
            \ types of roads. For example, if the array includes `bridge`, then the\
            \ routing engine will avoid snapping to a bridge, even if it is the closest\
            \ road for the given point. Note that once snapped the routing algorithm\
            \ can still route over bridges (or the other values). To avoid this you\
            \ need to use the `custom_model`."
          example:
          - motorway
          - trunk
          - bridge
          - tunnel
          - ferry
          - ford
          items:
            enum:
            - motorway
            - trunk
            - bridge
            - ford
            - tunnel
            - ferry
            type: string
          type: array
        curbsides:
          description: Optional parameter. It specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. You need to specify this parameter for either none or all points.
            Only supported for motor vehicle profiles and OpenStreetMap.
          example:
          - any
          - right
          items:
            enum:
            - any
            - right
            - left
            type: string
          type: array
        locale:
          default: en
          description: |
            The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German.
          type: string
        elevation:
          default: false
          description: |
            If `true`, a third coordinate, the altitude, is included with all positions in the response.
            This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their
            encodings. Unless you switch off the `points_encoded` parameter, you need special code on the
            client side that can handle three-dimensional coordinates.
          type: boolean
        details:
          description: "Optional parameter. The following path details are available:\
            \ `street_name`, `street_ref`, `street_destination`, `leg_time`, `leg_distance`,\
            \ `roundabout`, `country`, `time`, `distance`, `max_speed`,\n`max_weight`,\
            \ `max_width`, `toll`, `road_class`, `road_class_link`, `road_access`,\
            \ `road_environment`, `hazmat`, `hazmat_tunnel`, `hazmat_water`, \n`lanes`,\
            \ `surface`, `smoothness`, `hike_rating`, `mtb_rating`, `foot_network`,\
            \ `bike_network`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539).\n"
          items:
            type: string
          type: array
        optimize:
          default: "false"
          description: |
            Normally, the calculated route will visit the points in the order you specified them.
            If you have more than two points, you can set this parameter to `"true"` and the points may be re-ordered to minimize the total travel time.
            Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits.
          type: string
        instructions:
          default: true
          description: |
            If instructions should be calculated and returned
          type: boolean
        calc_points:
          default: true
          description: |
            If the points for the route should be calculated at all.
          type: boolean
        debug:
          default: false
          description: |
            If `true`, the output will be formatted.
          type: boolean
        points_encoded:
          default: true
          description: |
            Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact
            but requires special client code to unpack. (We provide it in our JavaScript client library!)
            Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`.
            See the description of the response format for more information.
          type: boolean
        ch.disable:
          default: false
          description: |
            Use this parameter in combination with one or more parameters from below.
          type: boolean
        custom_model:
          $ref: '#/components/schemas/CustomModel'
        headings:
          description: |
            Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points.
            In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree.
            This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`.
          items:
            format: int32
            type: integer
          type: array
        heading_penalty:
          default: 300
          description: |
            Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`.
          format: int32
          type: integer
        pass_through:
          default: false
          description: |
            If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`.
          type: boolean
        algorithm:
          description: "Rather than looking for the shortest or fastest path, this\
            \ parameter lets you solve two different problems related to routing:\n\
            With `alternative_route`, we give you not one but several routes that\
            \ are close to optimal, but\nnot too similar to each other. \nWith `round_trip`,\
            \ the route will get you back to where you started. This is meant for\
            \ fun (think of\na bike trip), so we will add some randomness. The `round_trip`\
            \ option requires `ch.disable=true`.\nYou can control both of these features\
            \ with additional parameters, see below. \n"
          enum:
          - round_trip
          - alternative_route
          type: string
        round_trip.distance:
          default: 10000
          description: |
            If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`.
          format: int32
          type: integer
        round_trip.seed:
          description: |
            If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value.
          format: int64
          type: integer
        alternative_route.max_paths:
          default: 2
          description: |
            If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives.
          format: int32
          type: integer
        alternative_route.max_weight_factor:
          default: 1.4
          description: |
            If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives.
          type: number
        alternative_route.max_share_factor:
          default: 0.6
          description: |
            If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives.
          type: number
    CustomModel:
      description: "The custom_model modifies the routing behaviour of the specified\
        \ profile. See the [detailed documentation](#tag/Custom-Model). \nBelow is\
        \ a complete request example in Berlin that limits all speeds to 100km/h,\
        \ excludes motorways and makes shorter routes a bit more likely than the default\
        \ due to a higher distance_influence. \nNote that it also includes the `\"\
        ch.disabled\": true` parameter which is required to make use of `custom_model`.\n\
        \n```json\n{\n  \"points\": [\n    [\n      13.31543,\n      52.509535\n \
        \   ],\n    [\n      13.29779,\n      52.512434\n    ]\n  ],\n  \"profile\"\
        : \"car\",\n  \"ch.disable\": true,\n  \"custom_model\": {\n    \"speed\"\
        : [\n      {\n        \"if\": \"true\",\n        \"limit_to\": \"100\"\n \
        \     }\n    ],\n    \"priority\": [\n      {\n        \"if\": \"road_class\
        \ == MOTORWAY\",\n        \"multiply_by\": \"0\"\n      }\n    ],\n    \"\
        distance_influence\": 100\n  }\n} \n```\n"
      properties:
        speed:
          description: "See [speed customization](#tag/Custom-Model/Customizing-speed)"
          items:
            type: object
          type: array
        priority:
          description: "See [priority customization](#tag/Custom-Model/Customizing-priority)"
          items:
            type: object
          type: array
        distance_influence:
          default: 70
          description: "Use higher values to prefer shorter routes. See [here](#tag/Custom-Model/Customizing-distance_influence)\
            \ for more details."
          type: number
        areas:
          $ref: '#/components/schemas/FeatureCollection'
    CustomModelForProfile:
      description: "The custom_model modifies the routing behaviour of the given `profile`.\
        \ See the [detailed documentation](#tag/Custom-Model). \nHere is a complete\
        \ example that limits all speeds to 100km/h, avoids motorways and makes shorter\
        \ routes a bit more likely than the default due to a higher distance_influence.\n\
        \n```json\n{\n  \"speed\": [\n    {\n      \"if\": \"true\",\n      \"limit_to\"\
        : 100\n    }\n  ],\n  \"priority\": [\n    {\n      \"if\": \"road_class ==\
        \ MOTORWAY\",\n      \"multiply_by\": 0.1\n    }\n  ],\n  \"distance_influence\"\
        : 100\n}\n```        \n"
      example:
        distance_influence: 6.027456183070403
        areas: "{}"
        priority:
        - "{}"
        - "{}"
        speed:
        - "{}"
        - "{}"
      properties:
        speed:
          description: "See [speed customization](#tag/Custom-Model/Customizing-speed)"
          items:
            type: object
          type: array
        priority:
          description: "See [priority customization](#tag/Custom-Model/Customizing-priority)"
          items:
            type: object
          type: array
        distance_influence:
          default: 70
          description: "Use higher values to prefer shorter routes. See [here](#tag/Custom-Model/Customizing-distance_influence)\
            \ for more details."
          type: number
        areas:
          description: |
            Areas are given in a GeoJson format. Currently only one format is supported: one object with type Feature, a geometry with type Polygon and optional (but ignored) id and properties fields. See more details and an example [here](#tag/Custom-Model/Define-areas).
          type: object
    ProfileRequest:
      example:
        profile: car
        bounds:
          bbox:
          - 0.8008281904610115
          - 0.8008281904610115
        custom_model:
          distance_influence: 6.027456183070403
          areas: "{}"
          priority:
          - "{}"
          - "{}"
          speed:
          - "{}"
          - "{}"
      properties:
        profile:
          description: The built-in profile your new custom profile shall be based
            on. Currently we only support `car` but you can add size restrictions
            and speed reduction to get similar profiles like `small_truck` and `truck`.
            Contact us to learn more about this.
          enum:
          - car
          type: string
        bounds:
          $ref: '#/components/schemas/ProfileRequest_bounds'
        custom_model:
          $ref: '#/components/schemas/CustomModelForProfile'
    ProfileResponse:
      example:
        profile: car
        bounds:
          bbox:
          - 0.8008281904610115
          - 0.8008281904610115
        custom_model:
          distance_influence: 6.027456183070403
          areas: "{}"
          priority:
          - "{}"
          - "{}"
          speed:
          - "{}"
          - "{}"
        id: id
      properties:
        profile:
          description: The built-in profile this custom profile is based on.
          enum:
          - car
          - small_truck
          type: string
        bounds:
          $ref: '#/components/schemas/ProfileResponse_bounds'
        custom_model:
          $ref: '#/components/schemas/CustomModelForProfile'
        id:
          description: The name of the created profile. Use this as the `profile`
            parameter for the /route API etc. For route optimization requests you
            need to define a vehicle_type where you can enter the custom profile.
          type: string
    ProfileGetResponse:
      example:
        custom_profiles:
        - profile: car
          bounds:
            bbox:
            - 0.8008281904610115
            - 0.8008281904610115
          custom_model:
            distance_influence: 6.027456183070403
            areas: "{}"
            priority:
            - "{}"
            - "{}"
            speed:
            - "{}"
            - "{}"
          id: id
        - profile: car
          bounds:
            bbox:
            - 0.8008281904610115
            - 0.8008281904610115
          custom_model:
            distance_influence: 6.027456183070403
            areas: "{}"
            priority:
            - "{}"
            - "{}"
            speed:
            - "{}"
            - "{}"
          id: id
      properties:
        custom_profiles:
          description: The existing custom profiles including their ids
          items:
            $ref: '#/components/schemas/ProfileResponse'
          type: array
    RouteResponse:
      example:
        paths:
        - descend: 5.962133916683182
          instructions:
          - exit_number: 2
            distance: 2.3021358869347655
            sign: 3
            turn_angle: 4.145608029883936
            interval:
            - 9
            - 9
            text: text
            time: 7
            street_name: street_name
          - exit_number: 2
            distance: 2.3021358869347655
            sign: 3
            turn_angle: 4.145608029883936
            interval:
            - 9
            - 9
            text: text
            time: 7
            street_name: street_name
          ascend: 1.4658129805029452
          distance: 0.8008281904610115
          bbox:
          - 5.637376656633329
          - 5.637376656633329
          points_order:
          - 7
          - 7
          details: "{}"
          time: 6
          points_encoded: true
          points: {}
          snapped_waypoints: {}
        - descend: 5.962133916683182
          instructions:
          - exit_number: 2
            distance: 2.3021358869347655
            sign: 3
            turn_angle: 4.145608029883936
            interval:
            - 9
            - 9
            text: text
            time: 7
            street_name: street_name
          - exit_number: 2
            distance: 2.3021358869347655
            sign: 3
            turn_angle: 4.145608029883936
            interval:
            - 9
            - 9
            text: text
            time: 7
            street_name: street_name
          ascend: 1.4658129805029452
          distance: 0.8008281904610115
          bbox:
          - 5.637376656633329
          - 5.637376656633329
          points_order:
          - 7
          - 7
          details: "{}"
          time: 6
          points_encoded: true
          points: {}
          snapped_waypoints: {}
        info:
          took: 1.2315135367772556
          copyrights:
          - copyrights
          - copyrights
      properties:
        paths:
          items:
            $ref: '#/components/schemas/RouteResponsePath'
          type: array
        info:
          $ref: '#/components/schemas/ResponseInfo'
    EncodedLineString:
      description: "A polyline-encoded list of positions. You'll need to decode this\
        \ string in client code. We provide open source code in [Java](https://github.com/graphhopper/graphhopper/blob/e649aaed8d3f4378bf2d8889bbbc2318261eabb2/web-api/src/main/java/com/graphhopper/http/WebHelper.java#L54)\
        \ and [JavaScript](https://github.com/graphhopper/directions-api-js-client/blob/cf43d1a5bc93a3e8007a44fcfc551117e4fa49bc/src/GHUtil.js#L27)."
      type: string
    BBox:
      example:
        bbox:
        - 0.8008281904610115
        - 0.8008281904610115
      properties:
        bbox:
          description: "A rectangular area given as an array [minLon, minLat, maxLon,\
            \ maxLat]. The created profile will only work in this area. The maximum\
            \ area size is 160 000 square kilometers."
          items:
            format: double
            type: number
          type: array
    FeatureCollection:
      properties:
        type:
          enum:
          - FeatureCollection
          type: string
        features:
          description: A FeatureCollection is an array of type "Feature" from GeoJSON
          items:
            $ref: '#/components/schemas/FeatureCollection_features_inner'
          type: array
    RouteResponsePath:
      example:
        descend: 5.962133916683182
        instructions:
        - exit_number: 2
          distance: 2.3021358869347655
          sign: 3
          turn_angle: 4.145608029883936
          interval:
          - 9
          - 9
          text: text
          time: 7
          street_name: street_name
        - exit_number: 2
          distance: 2.3021358869347655
          sign: 3
          turn_angle: 4.145608029883936
          interval:
          - 9
          - 9
          text: text
          time: 7
          street_name: street_name
        ascend: 1.4658129805029452
        distance: 0.8008281904610115
        bbox:
        - 5.637376656633329
        - 5.637376656633329
        points_order:
        - 7
        - 7
        details: "{}"
        time: 6
        points_encoded: true
        points: {}
        snapped_waypoints: {}
      properties:
        distance:
          description: |
            The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
          format: double
          type: number
        time:
          description: |
            The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
          format: int64
          type: integer
        ascend:
          description: |
            The total ascent, in meters.
          format: double
          type: number
        descend:
          description: |
            The total descent, in meters.
          format: double
          type: number
        points:
          $ref: '#/components/schemas/RouteResponsePath_points'
        snapped_waypoints:
          $ref: '#/components/schemas/RouteResponsePath_snapped_waypoints'
        points_encoded:
          description: |
            Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
            of coordinates. See the field description for more information on the two formats.
          type: boolean
        bbox:
          description: |
            The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
          items:
            format: double
            type: number
          type: array
        instructions:
          description: |
            The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
            so be mindful when using them for navigation.
          items:
            $ref: '#/components/schemas/RouteResponsePath_instructions_inner'
          type: array
        details:
          description: |
            Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Straße"],[2,6,"Zollweg"]]}`.
            In this example, the route uses two streets: The first, Frankfurter Straße, is
            used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
            Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539).
          type: object
        points_order:
          description: |
            An array of indices (zero-based), specifiying the order in which the input points are visited.
            Only present if the `optimize` parameter was used.
          items:
            type: integer
          type: array
    ResponseInfo:
      description: Additional information for your request
      example:
        took: 1.2315135367772556
        copyrights:
        - copyrights
        - copyrights
      properties:
        copyrights:
          description: Attribution according to our documentation is necessary if
            no white-label option included.
          items:
            type: string
          type: array
        took:
          format: double
          type: number
    IsochroneResponse:
      example:
        polygons:
        - properties:
            bucket: 0
          type: Feature
          geometry:
            type: Polygon
            coordinates:
            - - 13.351851
              - 52.51345
            - - 13.350402
              - 52.516949
            - - 13.352598
              - 52.522252
            - - 13.351851
              - 52.51345
      properties:
        polygons:
          description: |
            The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:

            ```
            L.geoJson(json.polygons).addTo(map)
            ```

            The number of polygon is identical to the specified buckets in the query. Every polygon contains the bucket number in the properties section of the GeoJson.
          items:
            $ref: '#/components/schemas/IsochroneResponsePolygon'
          type: array
    IsochroneResponsePolygon:
      description: A found path
      properties:
        properties:
          $ref: '#/components/schemas/IsochroneResponsePolygon_properties'
        type:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
    LineString:
      properties:
        type:
          type: string
        coordinates:
          description: |
            A list of coordinate pairs or triples, `[lon,lat]` or `[lon,lat,elevation]`.
          items:
            items:
              type: number
            type: array
          type: array
    Polygon:
      properties:
        type:
          enum:
          - Polygon
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              type: array
            type: array
          type: array
    GHError:
      example:
        hints:
        - message: message
        - message: message
        message: message
      properties:
        message:
          type: string
        hints:
          description: Optional error information.
          items:
            $ref: '#/components/schemas/GHError_hints_inner'
          type: array
    JobId:
      example:
        job_id: 44886560-b584-4da5-b245-768151dacd8f
      properties:
        job_id:
          description: UUID. Unique id for your job/request with which you can fetch
            your solution
          example: 44886560-b584-4da5-b245-768151dacd8f
          format: uuid
          type: string
    BadRequest:
      example:
        hints:
        - details: class java.lang.IllegalArgumentException
          message: "unsupported json property [vehiles]. allowed properties: [vehicles,\
            \ vehicle_types, services, shipments, relations, algorithm, objectives,\
            \ cost_matrices, configuration]"
        - details: class java.lang.IllegalArgumentException
          message: "unsupported json property [vehiles]. allowed properties: [vehicles,\
            \ vehicle_types, services, shipments, relations, algorithm, objectives,\
            \ cost_matrices, configuration]"
        message: Bad Request
        status: finished
      properties:
        message:
          description: Short error message
          example: Bad Request
          type: string
        hints:
          description: Optional error information.
          items:
            $ref: '#/components/schemas/ErrorMessage'
          type: array
        status:
          default: finished
          description: status
          example: finished
          type: string
    ErrorMessage:
      example:
        details: class java.lang.IllegalArgumentException
        message: "unsupported json property [vehiles]. allowed properties: [vehicles,\
          \ vehicle_types, services, shipments, relations, algorithm, objectives,\
          \ cost_matrices, configuration]"
      properties:
        message:
          description: error message
          example: "unsupported json property [vehiles]. allowed properties: [vehicles,\
            \ vehicle_types, services, shipments, relations, algorithm, objectives,\
            \ cost_matrices, configuration]"
          type: string
        details:
          description: Details
          example: class java.lang.IllegalArgumentException
          type: string
    InternalErrorMessage:
      example:
        code: 500
        message: There has been an internal server error.
      properties:
        code:
          default: 500
          example: 500
          format: int32
          type: integer
        message:
          description: Details
          example: There has been an internal server error.
          type: string
    Request:
      example:
        vehicle_types:
        - type_id: my-own-type
          network_data_provider: openstreetmap
          profile: car
          cost_per_meter: 7.061401241503109
          cost_per_second: 9.301444243932576
          speed_factor: 5.637376656633329
          cost_per_activation: 3.616076749251911
          consider_traffic: false
          service_time_factor: 2.3021358869347655
          capacity:
          - 100
          - 500
        - type_id: my-own-type
          network_data_provider: openstreetmap
          profile: car
          cost_per_meter: 7.061401241503109
          cost_per_second: 9.301444243932576
          speed_factor: 5.637376656633329
          cost_per_activation: 3.616076749251911
          consider_traffic: false
          service_time_factor: 2.3021358869347655
          capacity:
          - 100
          - 500
        configuration:
          routing:
            network_data_provider: openstreetmap
            curbside_strictness: soft
            fail_fast: true
            calc_points: false
            consider_traffic: false
            return_snapped_waypoints: false
            snap_preventions:
            - motorway
            - trunk
            - bridge
            - tunnel
            - ferry
            - ford
          optimization:
            free_insertion: false
        vehicles:
        - move_to_end_address: true
          break: null
          type_id: my-own-type
          return_to_depot: true
          earliest_start: 1
          skills:
          - drilling_maschine
          - screw_driver
          min_jobs: 12
          start_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          latest_end: 5
          max_driving_time: 28800
          shifts:
          - break:
              duration: 2700
              earliest: 1550136467
              latest: 1550148467
            return_to_depot: true
            shift_id: shift_id
            start_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            latest_end: 6
            end_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            earliest_start: 0
          - break:
              duration: 2700
              earliest: 1550136467
              latest: 1550148467
            return_to_depot: true
            shift_id: shift_id
            start_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            latest_end: 6
            end_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            earliest_start: 0
          end_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          max_activities: 24
          vehicle_id: vehicle-1
          max_distance: 400000
          max_jobs: 12
        - move_to_end_address: true
          break: null
          type_id: my-own-type
          return_to_depot: true
          earliest_start: 1
          skills:
          - drilling_maschine
          - screw_driver
          min_jobs: 12
          start_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          latest_end: 5
          max_driving_time: 28800
          shifts:
          - break:
              duration: 2700
              earliest: 1550136467
              latest: 1550148467
            return_to_depot: true
            shift_id: shift_id
            start_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            latest_end: 6
            end_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            earliest_start: 0
          - break:
              duration: 2700
              earliest: 1550136467
              latest: 1550148467
            return_to_depot: true
            shift_id: shift_id
            start_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            latest_end: 6
            end_address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            earliest_start: 0
          end_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          max_activities: 24
          vehicle_id: vehicle-1
          max_distance: 400000
          max_jobs: 12
        objectives:
        - type: min
          value: vehicles
        - type: min
          value: completion_time
        services:
        - time_windows:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          preferred_vehicles:
          - priority: 2
            vehicle_id: vehicle_id
          - priority: 2
            vehicle_id: vehicle_id
          type: delivery
          priority: 1
          duration: 1800
          size:
          - 30
          - 5
          - 1
          allowed_vehicles:
          - technician_peter
          - technician_stefan
          required_skills:
          - drilling_machine
          - screw_driver
          disallowed_vehicles:
          - driver-A
          - driver-B
          name: delivery pizza
          preparation_time: 300
          max_time_in_vehicle: 900
          id: 7fe77504-7df8-4497-843c-02d70b6490ce
          group: group-A
        - time_windows:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          preferred_vehicles:
          - priority: 2
            vehicle_id: vehicle_id
          - priority: 2
            vehicle_id: vehicle_id
          type: delivery
          priority: 1
          duration: 1800
          size:
          - 30
          - 5
          - 1
          allowed_vehicles:
          - technician_peter
          - technician_stefan
          required_skills:
          - drilling_machine
          - screw_driver
          disallowed_vehicles:
          - driver-A
          - driver-B
          name: delivery pizza
          preparation_time: 300
          max_time_in_vehicle: 900
          id: 7fe77504-7df8-4497-843c-02d70b6490ce
          group: group-A
        relations:
        - ids:
          - pickup-1
          - pickup-2
          type: in_direct_sequence
          vehicle_id: driver-Peter
        - ids:
          - pickup-1
          - pickup-2
          type: in_direct_sequence
          vehicle_id: driver-Peter
        shipments:
        - delivery:
            duration: 1800
            time_windows:
            - earliest: 32400
              latest: 36000
            - earliest: 50400
              latest: 54000
            address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            preparation_time: 300
            group: ASAP
          size:
          - 3
          allowed_vehicles:
          - technician_peter
          - technician_stefan
          preferred_vehicles:
          - priority: 2
            vehicle_id: vehicle_id
          - priority: 2
            vehicle_id: vehicle_id
          required_skills:
          - drilling_machine
          - screw_driver
          disallowed_vehicles:
          - driver-A
          - driver-B
          name: pickup and deliver pizza to Peter
          pickup:
            duration: 1800
            time_windows:
            - earliest: 32400
              latest: 36000
            - earliest: 50400
              latest: 54000
            address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            preparation_time: 300
            group: ASAP
          max_time_in_vehicle: 1800
          id: 7fe77504-7df8-4497-843c-02d70b6490ce
          priority: 1
        - delivery:
            duration: 1800
            time_windows:
            - earliest: 32400
              latest: 36000
            - earliest: 50400
              latest: 54000
            address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            preparation_time: 300
            group: ASAP
          size:
          - 3
          allowed_vehicles:
          - technician_peter
          - technician_stefan
          preferred_vehicles:
          - priority: 2
            vehicle_id: vehicle_id
          - priority: 2
            vehicle_id: vehicle_id
          required_skills:
          - drilling_machine
          - screw_driver
          disallowed_vehicles:
          - driver-A
          - driver-B
          name: pickup and deliver pizza to Peter
          pickup:
            duration: 1800
            time_windows:
            - earliest: 32400
              latest: 36000
            - earliest: 50400
              latest: 54000
            address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              curbside: If you would like to arrive at this address without having
                to cross the street use `curbside=right/left` for countries with right/left-hand
                driving. Using `curbside=any` is the same as not specifying this parameter
                at all.
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            preparation_time: 300
            group: ASAP
          max_time_in_vehicle: 1800
          id: 7fe77504-7df8-4497-843c-02d70b6490ce
          priority: 1
        cost_matrices:
        - data:
            distances:
            - - 7.386281948385884
              - 7.386281948385884
            - - 7.386281948385884
              - 7.386281948385884
            times:
            - - 4
              - 4
            - - 4
              - 4
            info:
              took: 1.2315135367772556
              copyrights:
              - copyrights
              - copyrights
          location_ids:
          - location_ids
          - location_ids
          profile: profile
          type: default
        - data:
            distances:
            - - 7.386281948385884
              - 7.386281948385884
            - - 7.386281948385884
              - 7.386281948385884
            times:
            - - 4
              - 4
            - - 4
              - 4
            info:
              took: 1.2315135367772556
              copyrights:
              - copyrights
              - copyrights
          location_ids:
          - location_ids
          - location_ids
          profile: profile
          type: default
        algorithm:
          problem_type: min
          objective: transport_time
      properties:
        vehicles:
          description: Specifies the available vehicles.
          items:
            $ref: '#/components/schemas/Vehicle'
          minItems: 1
          type: array
        vehicle_types:
          description: Specifies the available vehicle types. These types can be assigned
            to vehicles.
          items:
            $ref: '#/components/schemas/VehicleType'
          type: array
        services:
          description: "Specifies the orders of the type \"service\". These are, for\
            \ example, pick-ups, deliveries or other stops that are to be approached\
            \ by the specified vehicles. Each of these orders contains only one location."
          items:
            $ref: '#/components/schemas/Service'
          type: array
        shipments:
          description: "Specifies the available shipments. Each shipment consists\
            \ of a pickup and a delivery. For a single shipment, the pickup must always\
            \ occur before the delivery. However, pickups and deliveries from multiple\
            \ shipments can be sequenced independently."
          items:
            $ref: '#/components/schemas/Shipment'
          type: array
        relations:
          description: Defines additional relationships between orders.
          items:
            $ref: '#/components/schemas/Request_relations_inner'
          type: array
        algorithm:
          $ref: '#/components/schemas/Algorithm'
        objectives:
          description: Specifies an objective function. The vehicle routing problem
            is solved in such a way that this objective function is minimized.
          example:
          - type: min
            value: vehicles
          - type: min
            value: completion_time
          items:
            $ref: '#/components/schemas/Objective'
          type: array
        cost_matrices:
          description: Specifies your own tranport time and distance matrices.
          items:
            $ref: '#/components/schemas/CostMatrix'
          type: array
        configuration:
          $ref: '#/components/schemas/Configuration'
    Vehicle:
      example:
        move_to_end_address: true
        break: null
        type_id: my-own-type
        return_to_depot: true
        earliest_start: 1
        skills:
        - drilling_maschine
        - screw_driver
        min_jobs: 12
        start_address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        latest_end: 5
        max_driving_time: 28800
        shifts:
        - break:
            duration: 2700
            earliest: 1550136467
            latest: 1550148467
          return_to_depot: true
          shift_id: shift_id
          start_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          latest_end: 6
          end_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          earliest_start: 0
        - break:
            duration: 2700
            earliest: 1550136467
            latest: 1550148467
          return_to_depot: true
          shift_id: shift_id
          start_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          latest_end: 6
          end_address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          earliest_start: 0
        end_address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        max_activities: 24
        vehicle_id: vehicle-1
        max_distance: 400000
        max_jobs: 12
      properties:
        vehicle_id:
          description: "Specifies the ID of the vehicle. Ids must be unique, i.e.\
            \ if there are two vehicles with the same ID, an error is returned."
          example: vehicle-1
          type: string
        type_id:
          default: default-type
          description: "The type ID assigns a vehicle type to this vehicle. You can\
            \ specify types in the array of vehicle types. If you omit the type ID,\
            \ the default type is used. The default type is a `car` with a capacity\
            \ of 0."
          example: my-own-type
          type: string
        shifts:
          description: Array of shifts.
          items:
            $ref: '#/components/schemas/Shift'
          type: array
        start_address:
          $ref: '#/components/schemas/Address'
        end_address:
          $ref: '#/components/schemas/Address'
        break:
          $ref: '#/components/schemas/Vehicle_break'
        return_to_depot:
          default: true
          description: "If it is false, the algorithm decides where to end the vehicle\
            \ route. It ends in one of your customers' locations. The end is chosen\
            \ such that it contributes to the overall objective function, e.g. min\
            \ transport_time. If it is true, you can either specify a specific end\
            \ location (which is then regarded as end depot) or you can leave it and\
            \ the driver returns to its start location."
          type: boolean
        earliest_start:
          default: 0
          description: Earliest start of vehicle in seconds. It is recommended to
            use the unix timestamp.
          format: int64
          type: integer
        latest_end:
          default: 9223372036854776000
          description: "Latest end of vehicle in seconds, i.e. the time the vehicle\
            \ needs to be at its end location at latest."
          format: int64
          type: integer
        skills:
          description: "Array of skills, i.e. array of string (not case sensitive)."
          example:
          - drilling_maschine
          - screw_driver
          items:
            type: string
          type: array
        max_distance:
          description: Specifies the maximum distance (in meters) a vehicle can go.
          example: 400000
          format: int64
          type: integer
        max_driving_time:
          description: "Specifies the maximum drive time (in seconds) a vehicle/driver\
            \ can go, i.e. the maximum time on the road (service and waiting times\
            \ are not included here)"
          example: 28800
          format: int64
          type: integer
        max_jobs:
          description: Specifies the maximum number of jobs a vehicle can load.
          example: 12
          format: int32
          type: integer
        min_jobs:
          description: "Specifies the minimum number of jobs a vehicle should load.\
            \ This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”\
            , we will still try to get as close as possible to this constraint."
          example: 12
          format: int32
          type: integer
        max_activities:
          description: Specifies the maximum number of activities a vehicle can conduct.
          example: 24
          format: int32
          type: integer
        move_to_end_address:
          description: Indicates whether a vehicle should be moved even though it
            has not been assigned any jobs.
          type: boolean
      required:
      - vehicle_id
    VehicleProfileId:
      default: car
      description: "The routing profile. It determines the network, speed and other\
        \ physical attributes used when computing the route. See the section about\
        \ [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more details\
        \ and valid profile values."
      type: string
    Shift:
      description: Shift of vehicle.
      example:
        break:
          duration: 2700
          earliest: 1550136467
          latest: 1550148467
        return_to_depot: true
        shift_id: shift_id
        start_address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        latest_end: 6
        end_address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        earliest_start: 0
      properties:
        shift_id:
          description: A unique identifier for this vehicle's shift.
          type: string
        start_address:
          $ref: '#/components/schemas/Address'
        end_address:
          $ref: '#/components/schemas/Address'
        earliest_start:
          default: 0
          description: Earliest start of vehicle in seconds. It is recommended to
            use the unix timestamp.
          format: int64
          type: integer
        latest_end:
          default: 9223372036854776000
          description: "Latest end of vehicle in seconds, i.e. the time the vehicle\
            \ needs to be at its end location at latest."
          format: int64
          type: integer
        return_to_depot:
          default: true
          description: "If true, vehicle returns to its start location (or specified\
            \ end location). If false, vehicle can end at any customer location that\
            \ optimizes the objective function."
          type: boolean
        break:
          $ref: '#/components/schemas/Vehicle_break'
    Algorithm:
      deprecated: true
      description: Use `objectives` instead.
      example:
        problem_type: min
        objective: transport_time
      properties:
        problem_type:
          enum:
          - min
          - min-max
          type: string
        objective:
          enum:
          - transport_time
          - completion_time
          type: string
    Address:
      example:
        street_hint: Queens Victoria Street 70
        name: "Queens Victoria Street 70, Second Floor, Flat 245"
        curbside: If you would like to arrive at this address without having to cross
          the street use `curbside=right/left` for countries with right/left-hand
          driving. Using `curbside=any` is the same as not specifying this parameter
          at all.
        lon: -0.092869
        location_id: 550e8400-e29b-11d4-a716-446655440000
        lat: 51.512665
      properties:
        location_id:
          description: Specifies the id of the location.
          example: 550e8400-e29b-11d4-a716-446655440000
          type: string
        name:
          description: Name of location.
          example: "Queens Victoria Street 70, Second Floor, Flat 245"
          type: string
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
        street_hint:
          description: "Optional parameter. Provide a hint that includes only the\
            \ street name for each address to better snap the coordinates (lon,lat)\
            \ to road network. E.g. if there is an address or house with two or more\
            \ neighboring streets you can control for which street the closest location\
            \ is looked up."
          example: Queens Victoria Street 70
          type: string
        curbside:
          default: any
          description: Optional parameter. Specifies on which side a point should
            be relative to the driver when she leaves/arrives at a start/target/via
            point. Only supported for motor vehicles and OpenStreetMap.
          enum:
          - right
          - left
          - any
          example: If you would like to arrive at this address without having to cross
            the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          type: string
      required:
      - lat
      - location_id
      - lon
    ResponseAddress:
      description: Address of activity
      example:
        street_hint: Queens Victoria Street 70
        name: "Queens Victoria Street 70, Second Floor, Flat 245"
        snapped_waypoint:
          lon: -0.092869
          lat: 51.512665
        lon: -0.092869
        location_id: 550e8400-e29b-11d4-a716-446655440000
        lat: 51.512665
      properties:
        location_id:
          description: Specifies the id of the location.
          example: 550e8400-e29b-11d4-a716-446655440000
          type: string
        name:
          description: Name of location.
          example: "Queens Victoria Street 70, Second Floor, Flat 245"
          type: string
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
        street_hint:
          description: "Optional parameter. Specifies a hint for each address to better\
            \ snap the coordinates (lon,lat) to road network. E.g. if there is an\
            \ address or house with two or more neighboring streets you can control\
            \ for which street the closest location is looked up."
          example: Queens Victoria Street 70
          type: string
        snapped_waypoint:
          $ref: '#/components/schemas/SnappedWaypoint'
    SnappedWaypoint:
      description: Access point to the (road)network. It is only available if `return_snapped_waypoints`
        is true (be default it is false).
      example:
        lon: -0.092869
        lat: 51.512665
      properties:
        lon:
          description: Longitude of location.
          example: -0.092869
          format: double
          type: number
        lat:
          description: Latitude of location.
          example: 51.512665
          format: double
          type: number
    DriveTimeBreak:
      properties:
        duration:
          description: Specifies the duration of the break in seconds.
          example: 2700
          format: int64
          type: integer
        max_driving_time:
          description: Specifies the max driving time (in a row) without break in
            seconds.
          example: 14400
          format: int64
          type: integer
        initial_driving_time:
          description: Specifies the initial (current) driving time of a driver to
            allow dynamic adaptations in seconds.
          example: 3600
          format: int64
          type: integer
        possible_split:
          description: Array specifying how a break duration (in seconds) can be split
            into several smaller breaks
          example:
          - 900
          - 1800
          items:
            format: int64
            type: integer
          type: array
      required:
      - duration
      - max_driving_time
    TimeWindowBreak:
      example:
        duration: 2700
        earliest: 1550136467
        latest: 1550148467
      properties:
        earliest:
          description: Specifies the earliest start time of the break in seconds.
          example: 1550136467
          format: int64
          type: integer
        latest:
          description: Specifies the latest start time of break in seconds.
          example: 1550148467
          format: int64
          type: integer
        duration:
          description: Specifies the duration of the break in seconds.
          example: 2700
          format: int64
          type: integer
      required:
      - duration
      - earliest
      - latest
    VehicleType:
      example:
        type_id: my-own-type
        network_data_provider: openstreetmap
        profile: car
        cost_per_meter: 7.061401241503109
        cost_per_second: 9.301444243932576
        speed_factor: 5.637376656633329
        cost_per_activation: 3.616076749251911
        consider_traffic: false
        service_time_factor: 2.3021358869347655
        capacity:
        - 100
        - 500
      properties:
        type_id:
          description: "Specifies the id of the vehicle type. If a vehicle needs to\
            \ be of this type, it should refer to this with its type_id attribute."
          example: my-own-type
          type: string
        profile:
          default: car
          description: "The routing profile. It determines the network, speed and\
            \ other physical attributes used when computing the route. See the section\
            \ about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more\
            \ details and valid profile values."
          type: string
        capacity:
          default:
          - 0
          description: "Specifies an array of capacity dimension values which need\
            \ to be int values. For example, if there are two dimensions such as volume\
            \ and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum\
            \ volume of 1000 and a maximum weight of 300."
          example:
          - 100
          - 500
          items:
            format: int32
            type: integer
          type: array
        speed_factor:
          default: 1
          description: Specifies a speed factor for this vehicle type. If the vehicle
            that uses this type needs to be only half as fast as what is actually
            calculated with our routing engine then set the speed factor to 0.5.
          format: double
          type: number
        service_time_factor:
          default: 1
          description: Specifies a service time factor for this vehicle type. If the
            vehicle/driver that uses this type is able to conduct the service as double
            as fast as it is determined in the corresponding service or shipment then
            set it to 0.5.
          format: double
          type: number
        cost_per_meter:
          description: "**_BETA feature_**! Cost parameter per distance unit, here\
            \ meter is used"
          format: double
          type: number
        cost_per_second:
          description: "**_BETA feature_**! Cost parameter per time unit, here second\
            \ is used"
          format: double
          type: number
        cost_per_activation:
          description: "**_BETA feature_**! Cost parameter vehicle activation, i.e.\
            \ fixed costs per vehicle"
          format: double
          type: number
        consider_traffic:
          default: false
          description: "Specifies whether traffic should be considered. if \"tomtom\"\
            \ is used and this is false, free flow travel times from \"tomtom\" are\
            \ calculated. If this is true, historical traffic info are used. We do\
            \ not yet have traffic data for \"openstreetmap\", thus, setting this\
            \ true has no effect at all."
          type: boolean
        network_data_provider:
          default: openstreetmap
          description: "Specifies the network data provider. Either use [`openstreetmap`](#tag/Map-Data-and-Routing-Profiles/OpenStreetMap)\
            \ (default) or [`tomtom`](#tag/Map-Data-and-Routing-Profiles/TomTom) (add-on\
            \ required)."
          enum:
          - openstreetmap
          - tomtom
          type: string
      required:
      - type_id
    Service:
      example:
        time_windows:
        - earliest: 32400
          latest: 36000
        - earliest: 50400
          latest: 54000
        address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        preferred_vehicles:
        - priority: 2
          vehicle_id: vehicle_id
        - priority: 2
          vehicle_id: vehicle_id
        type: delivery
        priority: 1
        duration: 1800
        size:
        - 30
        - 5
        - 1
        allowed_vehicles:
        - technician_peter
        - technician_stefan
        required_skills:
        - drilling_machine
        - screw_driver
        disallowed_vehicles:
        - driver-A
        - driver-B
        name: delivery pizza
        preparation_time: 300
        max_time_in_vehicle: 900
        id: 7fe77504-7df8-4497-843c-02d70b6490ce
        group: group-A
      properties:
        id:
          description: Specifies the id of the service. Ids need to be unique so there
            must not be two services/shipments with the same id.
          example: 7fe77504-7df8-4497-843c-02d70b6490ce
          type: string
        type:
          default: service
          description: "Specifies type of service. This makes a difference if items\
            \ are loaded or unloaded, i.e. if one of the size dimensions > 0. If it\
            \ is specified as `service` or `pickup`, items are loaded and will stay\
            \ in the vehicle for the rest of the route (and thus consumes capacity\
            \ for the rest of the route). If it is a `delivery`, items are implicitly\
            \ loaded at the beginning of the route and will stay in the route until\
            \ delivery (and thus releases capacity for the rest of the route)."
          enum:
          - service
          - pickup
          - delivery
          example: delivery
          type: string
        priority:
          default: 2
          description: Specifies the priority. Can be 1 = high priority to 10 = low
            priority. Often there are more services/shipments than the available vehicle
            fleet can handle. Then you can set priorities to differentiate high priority
            tasks from those that could be left unassigned. I.e. the lower the priority
            the earlier these tasks are omitted in the solution.
          example: 1
          format: int32
          type: integer
        name:
          description: "Meaningful name for service, e.g. `\"deliver pizza\"`."
          example: delivery pizza
          type: string
        address:
          $ref: '#/components/schemas/Address'
        duration:
          default: 0
          description: "Specifies the duration of the service in seconds, i.e. how\
            \ long it takes at the customer site."
          example: 1800
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        preparation_time:
          default: 0
          description: "Specifies the preparation time in seconds. It can be used\
            \ to model parking lot search time since if you have 3 identical locations\
            \ in a row, it only falls due once."
          example: 300
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        time_windows:
          description: "Specifies an array of time window objects (see time_window\
            \ object below). Specify the time either with the recommended Unix time\
            \ stamp (the number of seconds since 1970-01-01) or you can also count\
            \ the seconds relative to Monday morning 00:00 and define the whole week\
            \ in seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour\
            \ = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour\
            \ + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more\
            \ information."
          example:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          items:
            $ref: '#/components/schemas/TimeWindow'
          type: array
        size:
          default:
          - 0
          description: "Size can have multiple dimensions and should be in line with\
            \ the capacity dimension array of the vehicle type. For example, if the\
            \ item that needs to be delivered has two size dimension, volume and weight,\
            \ then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight\
            \ of 5."
          example:
          - 30
          - 5
          - 1
          items:
            format: int32
            type: integer
          type: array
        required_skills:
          description: "Specifies an array of required skills, i.e. array of string\
            \ (not case sensitive). For example, if this service needs to be conducted\
            \ by a technician having a `drilling_machine` and a `screw_driver` then\
            \ specify the array as follows: `[\"drilling_machine\",\"screw_driver\"\
            ]`. This means that the service can only be done by a vehicle (technician)\
            \ that has the skills `drilling_machine` AND `screw_driver` in its skill\
            \ array. Otherwise it remains unassigned."
          example:
          - drilling_machine
          - screw_driver
          items:
            type: string
          type: array
        allowed_vehicles:
          description: "Specifies an array of allowed vehicles, i.e. array of vehicle\
            \ ids. For example, if this service can only be conducted EITHER by `technician_peter`\
            \ OR `technician_stefan` specify this as follows: `[\"technician_peter\"\
            ,\"technician_stefan\"]`."
          example:
          - technician_peter
          - technician_stefan
          items:
            type: string
          type: array
        disallowed_vehicles:
          description: "Specifies an array of disallowed vehicles, i.e. array of vehicle\
            \ ids."
          example:
          - driver-A
          - driver-B
          items:
            type: string
          type: array
        preferred_vehicles:
          description: Specifies an array of preferred vehicles.
          items:
            $ref: '#/components/schemas/PreferredVehicle'
          type: array
        max_time_in_vehicle:
          default: 9223372036854776000
          description: "Specifies the maximum time in seconds a delivery can stay\
            \ in the vehicle. Currently, it only works with services of \"type\":\"\
            delivery\"."
          example: 900
          format: int64
          type: integer
        group:
          description: "Group this service belongs to. See the group relation and\
            \ [this post](https://discuss.graphhopper.com/t/4040) on how to utilize\
            \ this."
          example: group-A
          type: string
      required:
      - id
    Shipment:
      example:
        delivery:
          duration: 1800
          time_windows:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          preparation_time: 300
          group: ASAP
        size:
        - 3
        allowed_vehicles:
        - technician_peter
        - technician_stefan
        preferred_vehicles:
        - priority: 2
          vehicle_id: vehicle_id
        - priority: 2
          vehicle_id: vehicle_id
        required_skills:
        - drilling_machine
        - screw_driver
        disallowed_vehicles:
        - driver-A
        - driver-B
        name: pickup and deliver pizza to Peter
        pickup:
          duration: 1800
          time_windows:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            curbside: If you would like to arrive at this address without having to
              cross the street use `curbside=right/left` for countries with right/left-hand
              driving. Using `curbside=any` is the same as not specifying this parameter
              at all.
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          preparation_time: 300
          group: ASAP
        max_time_in_vehicle: 1800
        id: 7fe77504-7df8-4497-843c-02d70b6490ce
        priority: 1
      properties:
        id:
          description: Specifies the id of the shipment. Ids need to be unique so
            there must not be two services/shipments with the same id.
          example: 7fe77504-7df8-4497-843c-02d70b6490ce
          type: string
        name:
          description: "Meaningful name for shipment, e.g. \"pickup and deliver pizza\
            \ to Peter\"."
          example: pickup and deliver pizza to Peter
          type: string
        priority:
          default: 2
          description: Specifies the priority. Can be 1 = high priority to 10 = low
            priority. Often there are more services/shipments than the available vehicle
            fleet can handle. Then you can set priorities to differentiate high priority
            tasks from those that could be left unassigned. I.e. the lower the priority
            the earlier these tasks are omitted in the solution.
          example: 1
          format: int32
          type: integer
        pickup:
          $ref: '#/components/schemas/Stop'
        delivery:
          $ref: '#/components/schemas/Stop'
        size:
          default:
          - 0
          description: "Size can have multiple dimensions and should be in line with\
            \ the capacity dimension array of the vehicle type. For example, if the\
            \ item that needs to be delivered has two size dimension, volume and weight,\
            \ then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight\
            \ of 5."
          example:
          - 3
          items:
            format: int32
            type: integer
          type: array
        required_skills:
          description: "Specifies an array of required skills, i.e. array of string\
            \ (not case sensitive). For example, if this shipment needs to be conducted\
            \ by a technician having a `drilling_machine` and a `screw_driver` then\
            \ specify the array as follows: `[\"drilling_machine\",\"screw_driver\"\
            ]`. This means that the service can only be done by a vehicle (technician)\
            \ that has the skills `drilling_machine` AND `screw_driver` in its skill\
            \ array. Otherwise it remains unassigned."
          example:
          - drilling_machine
          - screw_driver
          items:
            type: string
          type: array
        allowed_vehicles:
          description: "Specifies an array of allowed vehicles, i.e. array of vehicle\
            \ ids. For example, if this shipment can only be conducted EITHER by \"\
            technician_peter\" OR \"technician_stefan\" specify this as follows: [\"\
            technician_peter\",\"technician_stefan\"]."
          example:
          - technician_peter
          - technician_stefan
          items:
            type: string
          type: array
        disallowed_vehicles:
          description: "Specifies an array of disallowed vehicles, i.e. array of vehicle\
            \ ids."
          example:
          - driver-A
          - driver-B
          items:
            type: string
          type: array
        preferred_vehicles:
          description: Specifies an array of preferred vehicles.
          items:
            $ref: '#/components/schemas/PreferredVehicle'
          type: array
        max_time_in_vehicle:
          default: 9223372036854776000
          description: Specifies the maximum time in seconds a shipment can stay in
            the vehicle.
          example: 1800
          format: int64
          type: integer
      required:
      - delivery
      - id
      - pickup
    Pickup:
      $ref: '#/components/schemas/Stop'
    Stop:
      example:
        duration: 1800
        time_windows:
        - earliest: 32400
          latest: 36000
        - earliest: 50400
          latest: 54000
        address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          curbside: If you would like to arrive at this address without having to
            cross the street use `curbside=right/left` for countries with right/left-hand
            driving. Using `curbside=any` is the same as not specifying this parameter
            at all.
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        preparation_time: 300
        group: ASAP
      properties:
        address:
          $ref: '#/components/schemas/Address'
        duration:
          default: 0
          description: "Specifies the duration of the pickup or delivery in seconds,\
            \ e.g. how long it takes unload items at the customer site."
          example: 1800
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        preparation_time:
          default: 0
          description: "Specifies the preparation time in seconds. It can be used\
            \ to model parking lot search time since if you have 3 identical locations\
            \ in a row, it only falls due once."
          example: 300
          format: int64
          maximum: 604800
          minimum: 0
          type: integer
        time_windows:
          description: "Specifies an array of time window objects (see time window\
            \ object below). For example, if an item needs to be delivered between\
            \ 7am and 10am then specify the array as follows: [ { \"earliest\": 25200,\
            \ \"latest\" : 32400 } ] (starting the day from 0 in seconds)."
          example:
          - earliest: 32400
            latest: 36000
          - earliest: 50400
            latest: 54000
          items:
            $ref: '#/components/schemas/TimeWindow'
          type: array
        group:
          description: "Group this stop belongs to. See the group relation and [this\
            \ post](https://discuss.graphhopper.com/t/4040) on how to utilize this."
          example: ASAP
          type: string
    TimeWindow:
      properties:
        earliest:
          default: 0
          description: "Specifies the opening time of the time window in seconds,\
            \ i.e. the earliest time the service can start."
          format: int64
          type: integer
        latest:
          default: 9223372036854776000
          description: "Specifies the closing time of the time window in seconds,\
            \ i.e. the latest time the service can start."
          format: int64
          type: integer
    PreferredVehicle:
      example:
        priority: 2
        vehicle_id: vehicle_id
      properties:
        vehicle_id:
          description: Id of the preferred vehicle.
          type: string
        priority:
          default: 2
          description: "Number between 1 and 10 which indicates the priority of the\
            \ preferred vehicle. 1 indicates the highest priority, 10 the lowest."
          format: int64
          type: integer
    Configuration:
      description: Specifies general configurations that are taken into account when
        solving the vehicle routing problem.
      example:
        routing:
          network_data_provider: openstreetmap
          curbside_strictness: soft
          fail_fast: true
          calc_points: false
          consider_traffic: false
          return_snapped_waypoints: false
          snap_preventions:
          - motorway
          - trunk
          - bridge
          - tunnel
          - ferry
          - ford
        optimization:
          free_insertion: false
      properties:
        routing:
          $ref: '#/components/schemas/Routing'
        optimization:
          $ref: '#/components/schemas/Optimization'
    Optimization:
      description: This contains all optimization specific configurations.
      example:
        free_insertion: false
      properties:
        free_insertion:
          default: false
          description: "If you use groups, you sometimes want to place orders without\
            \ group assignment in the best position, i.e. sometimes in the middle\
            \ of a group and not before or after the group. This is not allowed by\
            \ default. However, if this field here is \"true\", these orders (without\
            \ a group assignment) can be inserted freely."
          type: boolean
    Routing:
      description: This contains all routing specific configurations.
      example:
        network_data_provider: openstreetmap
        curbside_strictness: soft
        fail_fast: true
        calc_points: false
        consider_traffic: false
        return_snapped_waypoints: false
        snap_preventions:
        - motorway
        - trunk
        - bridge
        - tunnel
        - ferry
        - ford
      properties:
        calc_points:
          default: false
          description: "It lets you specify whether the API should provide you with\
            \ route geometries for vehicle routes or not. Thus, you do not need to\
            \ do extra routing to get the polyline for each route."
          type: boolean
        consider_traffic:
          default: false
          description: indicates whether historical traffic information should be
            considered
          type: boolean
        network_data_provider:
          default: openstreetmap
          description: "specifies the data provider, read more about it [here](#tag/Map-Data-and-Routing-Profiles)."
          enum:
          - openstreetmap
          - tomtom
          type: string
        curbside_strictness:
          default: soft
          description: In some cases curbside constraints cannot be fulfilled. For
            example in one-way streets you cannot arrive at a building that is on
            the left side of the street such that the building is to the right of
            you (unless you drove the one-way street the wrong/illegal way). You can
            set the `curbside_strictness` to `soft` to ignore the curbside constraint
            in such cases or set it to `strict` to get an error response instead.
            You can also set it to `ignore` to ignore all curbside constraints (this
            is useful to compare the results with and without constraints without
            modifying every single address).
          enum:
          - ignore
          - soft
          - strict
          type: string
        fail_fast:
          default: true
          description: indicates whether matrix calculation should fail fast when
            points cannot be connected
          type: boolean
        return_snapped_waypoints:
          default: false
          description: Indicates whether a solution includes snapped waypoints. In
            contrary to the address coordinate a snapped waypoint is the access point
            to the (road) network.
          type: boolean
        snap_preventions:
          description: "Optional parameter. 'Snapping' is the process of finding the\
            \ closest road location for GPS coordinates provided in the `points` array.\
            \ The `snap_preventions` array allows you to prevent snapping to specific\
            \ types of roads. For example, if the array includes `bridge`, then the\
            \ routing engine will avoid snapping to a bridge, even if it is the closest\
            \ road for the given point. Note that once snapped the routing algorithm\
            \ can still route over bridges (or the other values). To avoid this you\
            \ need to use the `custom_model`."
          example:
          - motorway
          - trunk
          - bridge
          - tunnel
          - ferry
          - ford
          items:
            enum:
            - motorway
            - trunk
            - bridge
            - ford
            - tunnel
            - ferry
            type: string
          type: array
    Objective:
      example:
        type: min
        value: vehicles
      properties:
        type:
          default: min
          description: |
            Type of objective function, i.e. `min` or `min-max`.

             * `min`: Minimizes the objective value.
             * `min-max`: Minimizes the maximum objective value.

            For instance, `min` -> `vehicles` minimizes the number of employed vehicles.
            `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.

            If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan.
            This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact.
            If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that
            the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours
            to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However,
            this usually comes with higher transport costs.

            If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:

            ```json
            "objectives" : [
               {
                  "type": "min",
                  "value": "vehicles"
               },
               {
                  "type": "min",
                  "value": "completion_time"
               }
            ]
            ```

            If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:

            ```json
            "objectives" : [
               {
                  "type": "min-max",
                  "value": "completion_time"
               },
               {
                  "type": "min-max",
                  "value": "activities"
               }
            ]
            ```
          enum:
          - min
          - min-max
          type: string
        value:
          default: transport_time
          description: "The value of the objective function.\nThe objective value\
            \ `transport_time` solely considers the time\nyour drivers spend on the\
            \ road, i.e. transport time. In contrary to `transport_time`, `completion_time`\
            \ also takes waiting times at customer sites into account.\nThe `completion_time`\
            \ of a route is defined as the time from starting to ending the route,\n\
            i.e. the route's transport time, the sum of waiting times plus the sum\
            \ of activity durations. \nThe `completion_time_last_stop`, on the other\
            \ hand, refers to the completion time of the very last order in a tour\
            \ or, in other words, \nthe completion time without the last section from\
            \ the last stop to the end of the tour. \nThis is typically used if the\
            \ orders are to be processed as quickly as possible.\nThe objective value\
            \ `vehicles` can only be used along with `min` and minimizes vehicles.\n"
          enum:
          - completion_time
          - completion_time_last_stop
          - transport_time
          - vehicles
          - activities
          type: string
      required:
      - type
      - value
    CostMatrix:
      example:
        data:
          distances:
          - - 7.386281948385884
            - 7.386281948385884
          - - 7.386281948385884
            - 7.386281948385884
          times:
          - - 4
            - 4
          - - 4
            - 4
          info:
            took: 1.2315135367772556
            copyrights:
            - copyrights
            - copyrights
        location_ids:
        - location_ids
        - location_ids
        profile: profile
        type: default
      properties:
        type:
          description: "type of cost matrix, currently default or google are supported"
          enum:
          - default
          - google
          type: string
        location_ids:
          items:
            type: string
          type: array
        data:
          $ref: '#/components/schemas/CostMatrix_data'
        profile:
          description: vehicle profile or empty if catch all fallback
          type: string
    GroupRelation:
      properties:
        type:
          description: |
            Specifies the type of relation. It must be either of type `in_sequence`, `in_direct_sequence` or `neighbor`.
          example: in_direct_sequence
          type: string
        groups:
          description: An array of groups that should be related
          example:
          - group-A
          - group-B
          items:
            description: group of services or shipments
            type: string
          type: array
      required:
      - groups
      - type
    JobRelation:
      example:
        ids:
        - pickup-1
        - pickup-2
        type: in_direct_sequence
        vehicle_id: driver-Peter
      properties:
        type:
          description: |+
            Specifies the type of relation. It must be either of type `in_same_route`, `not_in_same_route`, `in_sequence`, `in_direct_sequence` or `neighbor`.

            `in_same_route`: As the name suggest, it enforces the specified services or shipments to be in the same route. It can be specified as follows:

            ```json
            {
               "type": "in_same_route",
               "ids": ["serv_i_id","serv_j_id"]
            }
            ```

            This enforces service i to be in the same route as service j no matter which vehicle will be employed. If a specific vehicle (driver) is required to conduct this, just add a `vehicle_id` like this:

            ```
            {
               "type": "in_same_route",
               "ids": ["serv_i_id","serv_j_id"],
               "vehicle_id": "vehicle1"
            }
            ```

            This not only enforce service i and j to be in the same route, but also makes sure that both services are in the route of `vehicle1`.

            *Tip*: This way initial loads and vehicle routes can be modelled. For example, if your vehicles are already on the road and new orders come in, then vehicles can still be rescheduled subject to the orders that have already been assigned to these vehicles.

            `not_in_same_route`: It ensures that 2 or more orders are not transported by the same vehicle. It can be specified as follows:

            ```json
            {
               "type": "not_in_same_route",
               "ids": ["serv_i_id","serv_j_id"]
            }
            ```


            `in_sequence`: This relation type enforces n jobs to be in sequence. It can be specified as

            ```json
            {
               "type": "in_sequence",
               "ids": ["serv_i_id","serv_j_id"]
            }
            ```

            which means that service j need to be in the same route as service i AND it needs to occur somewhere after service i. As described above if a specific vehicle needs to conduct this, just add `vehicle_id`.


            `in_direct_sequence`: This enforces n services or shipments to be in direct sequence. It can be specified as

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["serv_i_id","serv_j_id","serv_k_id"]
            }
            ```

            yielding service j to occur directly after service i, and service k to occur directly after service j i.e. in strong order. Again, a vehicle can be assigned a priority by adding a `vehicle_id` to the relation.

            `neighbor`: This specifies a neighbor relationship, i.e., if services i and j are to be neighbors, i must be either immediately before or after j. I can be specified as follows:

            ```json
            {
                "type": "neighbor",
                "ids": ["serv_i_id","serv_j_id"]
            }
            ```

            *Special IDs*:
            If you look at the previous example and you want service i to be the first in the route, use the special ID `start` as follows:

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["start","serv_i_id","serv_j_id","serv_k_id"]
            }
            ```

            Latter enforces the direct sequence of i, j and k at the beginning of the route. If this sequence should be bound to the end of the route, use the special ID `end` like this:

            ```json
            {
               "type": "in_direct_sequence",
               "ids": ["serv_i_id","service_j_id","serv_k_id","end"]
            }
            ```

            If you deal with services then you need to use the 'id' of your services in the field 'ids'. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use the shipment id plus the keyword `_pickup` or `_delivery`. For example, to ensure that the pickup and delivery of the shipment with the id 'my_shipment' are direct neighbors, you need the following specification:

            ```
            {
               "type": "in_direct_sequence",
               "ids": ["my_ship_pickup","my_ship_delivery"]
            }
            ```

          example: in_direct_sequence
          type: string
        ids:
          description: "Specifies an array of shipment and/or service ids that are\
            \ in relation. If you deal with services then you need to use the id of\
            \ your services in ids. To also consider sequences of the pickups and\
            \ deliveries of your shipments, you need to use a special ID, i.e. use\
            \ your shipment id plus the keyword `_pickup` or `_delivery`. If you want\
            \ to place a service or shipment activity at the beginning of your route,\
            \ use the special ID `start`. In turn, use `end` to place it at the end\
            \ of the route."
          example:
          - pickup-1
          - pickup-2
          items:
            type: string
          type: array
        vehicle_id:
          description: "Id of pre-assigned vehicle, i.e. the vehicle id that is determined\
            \ to conduct the services and shipments in this relation."
          example: driver-Peter
          type: string
      required:
      - ids
      - type
    Response:
      example:
        waiting_time_in_queue: 300000
        processing_time: 900000
        solution:
          costs: 0
          completion_time: 12000
          distance: 1200
          transport_time: 12000
          waiting_time: 200
          unassigned:
            breaks:
            - breaks
            - breaks
            details:
            - reason: reason
              code: 1
              id: id
            - reason: reason
              code: 1
              id: id
            services:
            - service-1
            - service-3
            shipments:
            - shipment-5
          service_duration: 1200
          routes:
          - completion_time: 1800
            distance: 10000
            transport_time: 1800
            waiting_time: 5
            activities:
            - address:
                street_hint: Queens Victoria Street 70
                name: "Queens Victoria Street 70, Second Floor, Flat 245"
                snapped_waypoint:
                  lon: -0.092869
                  lat: 51.512665
                lon: -0.092869
                location_id: 550e8400-e29b-11d4-a716-446655440000
                lat: 51.512665
              arr_date_time: 2000-01-23T04:56:07.000+00:00
              distance: 4
              waiting_time: 3
              driving_time: 7
              end_time: 9
              type: start
              location_id: location_id
              load_after:
              - 1
              - 1
              end_date_time: 2000-01-23T04:56:07.000+00:00
              preparation_time: 2
              load_before:
              - 1
              - 1
              arr_time: 7
              id: id
            - address:
                street_hint: Queens Victoria Street 70
                name: "Queens Victoria Street 70, Second Floor, Flat 245"
                snapped_waypoint:
                  lon: -0.092869
                  lat: 51.512665
                lon: -0.092869
                location_id: 550e8400-e29b-11d4-a716-446655440000
                lat: 51.512665
              arr_date_time: 2000-01-23T04:56:07.000+00:00
              distance: 4
              waiting_time: 3
              driving_time: 7
              end_time: 9
              type: start
              location_id: location_id
              load_after:
              - 1
              - 1
              end_date_time: 2000-01-23T04:56:07.000+00:00
              preparation_time: 2
              load_before:
              - 1
              - 1
              arr_time: 7
              id: id
            preparation_time: 2
            vehicle_id: driver-stefan
            service_duration: 5
            points:
            - coordinates:
              - "{}"
              - "{}"
              type: type
            - coordinates:
              - "{}"
              - "{}"
              type: type
          - completion_time: 1800
            distance: 10000
            transport_time: 1800
            waiting_time: 5
            activities:
            - address:
                street_hint: Queens Victoria Street 70
                name: "Queens Victoria Street 70, Second Floor, Flat 245"
                snapped_waypoint:
                  lon: -0.092869
                  lat: 51.512665
                lon: -0.092869
                location_id: 550e8400-e29b-11d4-a716-446655440000
                lat: 51.512665
              arr_date_time: 2000-01-23T04:56:07.000+00:00
              distance: 4
              waiting_time: 3
              driving_time: 7
              end_time: 9
              type: start
              location_id: location_id
              load_after:
              - 1
              - 1
              end_date_time: 2000-01-23T04:56:07.000+00:00
              preparation_time: 2
              load_before:
              - 1
              - 1
              arr_time: 7
              id: id
            - address:
                street_hint: Queens Victoria Street 70
                name: "Queens Victoria Street 70, Second Floor, Flat 245"
                snapped_waypoint:
                  lon: -0.092869
                  lat: 51.512665
                lon: -0.092869
                location_id: 550e8400-e29b-11d4-a716-446655440000
                lat: 51.512665
              arr_date_time: 2000-01-23T04:56:07.000+00:00
              distance: 4
              waiting_time: 3
              driving_time: 7
              end_time: 9
              type: start
              location_id: location_id
              load_after:
              - 1
              - 1
              end_date_time: 2000-01-23T04:56:07.000+00:00
              preparation_time: 2
              load_before:
              - 1
              - 1
              arr_time: 7
              id: id
            preparation_time: 2
            vehicle_id: driver-stefan
            service_duration: 5
            points:
            - coordinates:
              - "{}"
              - "{}"
              type: type
            - coordinates:
              - "{}"
              - "{}"
              type: type
          no_vehicles: 10
          preparation_time: 1
          time: 6
          no_unassigned: 1
          max_operation_time: 4000
        copyrights:
        - GraphHopper
        - OpenStreetMap contributors
        status: finished
      properties:
        copyrights:
          example:
          - GraphHopper
          - OpenStreetMap contributors
          items:
            description: Attribution
            type: string
          type: array
        status:
          description: Indicates the current status of the job
          enum:
          - waiting_in_queue
          - processing
          - finished
          example: finished
          type: string
        waiting_time_in_queue:
          description: Waiting time in ms
          example: 300000
          format: int64
          type: integer
        processing_time:
          description: "Processing time in ms. If job is still waiting in queue, processing_time\
            \ is 0"
          example: 900000
          format: int64
          type: integer
        solution:
          $ref: '#/components/schemas/Solution'
    Solution:
      description: Only available if status field indicates `finished`.
      example:
        costs: 0
        completion_time: 12000
        distance: 1200
        transport_time: 12000
        waiting_time: 200
        unassigned:
          breaks:
          - breaks
          - breaks
          details:
          - reason: reason
            code: 1
            id: id
          - reason: reason
            code: 1
            id: id
          services:
          - service-1
          - service-3
          shipments:
          - shipment-5
        service_duration: 1200
        routes:
        - completion_time: 1800
          distance: 10000
          transport_time: 1800
          waiting_time: 5
          activities:
          - address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              snapped_waypoint:
                lon: -0.092869
                lat: 51.512665
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            arr_date_time: 2000-01-23T04:56:07.000+00:00
            distance: 4
            waiting_time: 3
            driving_time: 7
            end_time: 9
            type: start
            location_id: location_id
            load_after:
            - 1
            - 1
            end_date_time: 2000-01-23T04:56:07.000+00:00
            preparation_time: 2
            load_before:
            - 1
            - 1
            arr_time: 7
            id: id
          - address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              snapped_waypoint:
                lon: -0.092869
                lat: 51.512665
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            arr_date_time: 2000-01-23T04:56:07.000+00:00
            distance: 4
            waiting_time: 3
            driving_time: 7
            end_time: 9
            type: start
            location_id: location_id
            load_after:
            - 1
            - 1
            end_date_time: 2000-01-23T04:56:07.000+00:00
            preparation_time: 2
            load_before:
            - 1
            - 1
            arr_time: 7
            id: id
          preparation_time: 2
          vehicle_id: driver-stefan
          service_duration: 5
          points:
          - coordinates:
            - "{}"
            - "{}"
            type: type
          - coordinates:
            - "{}"
            - "{}"
            type: type
        - completion_time: 1800
          distance: 10000
          transport_time: 1800
          waiting_time: 5
          activities:
          - address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              snapped_waypoint:
                lon: -0.092869
                lat: 51.512665
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            arr_date_time: 2000-01-23T04:56:07.000+00:00
            distance: 4
            waiting_time: 3
            driving_time: 7
            end_time: 9
            type: start
            location_id: location_id
            load_after:
            - 1
            - 1
            end_date_time: 2000-01-23T04:56:07.000+00:00
            preparation_time: 2
            load_before:
            - 1
            - 1
            arr_time: 7
            id: id
          - address:
              street_hint: Queens Victoria Street 70
              name: "Queens Victoria Street 70, Second Floor, Flat 245"
              snapped_waypoint:
                lon: -0.092869
                lat: 51.512665
              lon: -0.092869
              location_id: 550e8400-e29b-11d4-a716-446655440000
              lat: 51.512665
            arr_date_time: 2000-01-23T04:56:07.000+00:00
            distance: 4
            waiting_time: 3
            driving_time: 7
            end_time: 9
            type: start
            location_id: location_id
            load_after:
            - 1
            - 1
            end_date_time: 2000-01-23T04:56:07.000+00:00
            preparation_time: 2
            load_before:
            - 1
            - 1
            arr_time: 7
            id: id
          preparation_time: 2
          vehicle_id: driver-stefan
          service_duration: 5
          points:
          - coordinates:
            - "{}"
            - "{}"
            type: type
          - coordinates:
            - "{}"
            - "{}"
            type: type
        no_vehicles: 10
        preparation_time: 1
        time: 6
        no_unassigned: 1
        max_operation_time: 4000
      properties:
        costs:
          deprecated: true
          format: int32
          type: integer
        distance:
          description: "Overall distance travelled in meter, i.e. the sum of each\
            \ route's transport distance"
          example: 1200
          format: int32
          type: integer
        time:
          deprecated: true
          description: Use `transport_time` instead.
          format: int64
          type: integer
        transport_time:
          description: "Overall time travelled in seconds, i.e. the sum of each route's\
            \ transport time."
          example: 12000
          format: int64
          type: integer
        max_operation_time:
          description: Operation time of longest route in seconds.
          example: 4000
          format: int64
          type: integer
        waiting_time:
          description: Overall waiting time in seconds.
          example: 200
          format: int64
          type: integer
        service_duration:
          description: Overall service time in seconds.
          example: 1200
          format: int64
          type: integer
        preparation_time:
          description: Overall preparation time in seconds.
          format: int64
          type: integer
        completion_time:
          description: "Overall completion time in seconds, i.e. the sum of each routes/drivers\
            \ operation time."
          example: 12000
          format: int64
          type: integer
        no_vehicles:
          description: Number of employed vehicles.
          example: 10
          format: int32
          type: integer
        no_unassigned:
          description: Number of jobs that could not be assigned to final solution.
          example: 1
          format: int32
          type: integer
        routes:
          description: An array of routes
          items:
            $ref: '#/components/schemas/Route'
          type: array
        unassigned:
          $ref: '#/components/schemas/Solution_unassigned'
    Detail:
      example:
        reason: reason
        code: 1
        id: id
      properties:
        id:
          description: Id of unassigned service/shipment
          type: string
        code:
          description: |
            Reason code

            Code   |  Reason
            :------|:---------
            1 | cannot serve required skill
            2 | cannot be visited within time window
            3 | does not fit into any vehicle due to capacity
            4 | cannot be assigned due to max distance constraint of vehicles
            21 | could not be assigned due to relation constraint
            22 | could not be assigned due to allowed vehicle constraint
            23 | could not be assigned due to max-time-in-vehicle constraint
            24 | driver does not need a break
            25 | could not be assigned due to disallowed vehicle constraint
            26 | could not be assigned due to max drive time constraint
            27 | could not be assigned due to max job constraint
            28 | could not be assigned due to max activity constraint
            29 | could not be assigned due to group relation constraint
            30 | could not be assigned due to driving time break
            50 | underlying location cannot be accessed over road network by at least one vehicle
          format: int32
          type: integer
        reason:
          description: Human readable reason as listed above
          type: string
    Route:
      example:
        completion_time: 1800
        distance: 10000
        transport_time: 1800
        waiting_time: 5
        activities:
        - address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            snapped_waypoint:
              lon: -0.092869
              lat: 51.512665
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          arr_date_time: 2000-01-23T04:56:07.000+00:00
          distance: 4
          waiting_time: 3
          driving_time: 7
          end_time: 9
          type: start
          location_id: location_id
          load_after:
          - 1
          - 1
          end_date_time: 2000-01-23T04:56:07.000+00:00
          preparation_time: 2
          load_before:
          - 1
          - 1
          arr_time: 7
          id: id
        - address:
            street_hint: Queens Victoria Street 70
            name: "Queens Victoria Street 70, Second Floor, Flat 245"
            snapped_waypoint:
              lon: -0.092869
              lat: 51.512665
            lon: -0.092869
            location_id: 550e8400-e29b-11d4-a716-446655440000
            lat: 51.512665
          arr_date_time: 2000-01-23T04:56:07.000+00:00
          distance: 4
          waiting_time: 3
          driving_time: 7
          end_time: 9
          type: start
          location_id: location_id
          load_after:
          - 1
          - 1
          end_date_time: 2000-01-23T04:56:07.000+00:00
          preparation_time: 2
          load_before:
          - 1
          - 1
          arr_time: 7
          id: id
        preparation_time: 2
        vehicle_id: driver-stefan
        service_duration: 5
        points:
        - coordinates:
          - "{}"
          - "{}"
          type: type
        - coordinates:
          - "{}"
          - "{}"
          type: type
      properties:
        vehicle_id:
          description: Id of vehicle that operates route
          example: driver-stefan
          type: string
        distance:
          description: Distance of route in meter
          example: 10000
          format: int64
          type: integer
        transport_time:
          description: Transport time of route in seconds
          example: 1800
          format: int64
          type: integer
        completion_time:
          description: Completion time of route in seconds
          example: 1800
          format: int64
          type: integer
        waiting_time:
          description: Waiting time of route in seconds
          format: int64
          type: integer
        service_duration:
          description: Service duration of route in seconds
          format: int64
          type: integer
        preparation_time:
          description: Preparation time of route in seconds
          format: int64
          type: integer
        activities:
          description: Array of activities
          items:
            $ref: '#/components/schemas/Activity'
          type: array
        points:
          description: Array of route planning points
          items:
            $ref: '#/components/schemas/RoutePoint'
          type: array
    RoutePoint:
      example:
        coordinates:
        - "{}"
        - "{}"
        type: type
      properties:
        type:
          type: string
        coordinates:
          items:
            type: object
          type: array
    Activity:
      example:
        address:
          street_hint: Queens Victoria Street 70
          name: "Queens Victoria Street 70, Second Floor, Flat 245"
          snapped_waypoint:
            lon: -0.092869
            lat: 51.512665
          lon: -0.092869
          location_id: 550e8400-e29b-11d4-a716-446655440000
          lat: 51.512665
        arr_date_time: 2000-01-23T04:56:07.000+00:00
        distance: 4
        waiting_time: 3
        driving_time: 7
        end_time: 9
        type: start
        location_id: location_id
        load_after:
        - 1
        - 1
        end_date_time: 2000-01-23T04:56:07.000+00:00
        preparation_time: 2
        load_before:
        - 1
        - 1
        arr_time: 7
        id: id
      properties:
        type:
          description: type of activity
          enum:
          - start
          - end
          - service
          - pickupShipment
          - deliverShipment
          - pickup
          - delivery
          - break
          type: string
        id:
          description: "Id referring to the underlying service or shipment, i.e. the\
            \ shipment or service this activity belongs to"
          type: string
        location_id:
          description: Id that refers to address
          type: string
        address:
          $ref: '#/components/schemas/ResponseAddress'
        arr_time:
          description: "Arrival time at this activity in seconds. If type is `start`,\
            \ this is not available (since it makes no sense to have `arr_time` at\
            \ start). However, `end_time` is available and actually means \\\"departure\
            \ time\\\" at start location. It is important to note that `arr_time`\
            \ does not necessarily mean \\\"start of underlying activity\\\", it solely\
            \ means arrival time at activity location. If this activity has no time\
            \ windows and if there are no further preparation times, `arr_time` is\
            \ equal to activity start time."
          format: int64
          type: integer
        end_time:
          description: "End time of and thus departure time at this activity. If type\
            \ is `end`, this is not available (since it makes no sense to have an\
            \ `end_time` at end) `end_time` at each activity is equal to the departure\
            \ time at the activity location."
          format: int64
          type: integer
        end_date_time:
          description: "Translation of unix timestamp in `end_time` to end date time\
            \ string with zone offset. It will be in the following ISO-8601 format:\
            \ 2007-12-03T10:15:30+01:00."
          format: date-time
          type: string
        arr_date_time:
          description: "Translation of unix timestamp in `arr_time` to arrival date\
            \ time string with zone offset. It will be in the following ISO-8601 format:\
            \ 2007-12-03T10:15:30+01:00."
          format: date-time
          type: string
        waiting_time:
          description: Waiting time at this activity in seconds. A waiting time can
            occur if the activity has at least one time window. If `arr_time` < `time_window.earliest`
            a waiting time of `time_window_earliest` - `arr_time` occurs.
          format: int64
          type: integer
        preparation_time:
          description: preparation time at this activity in seconds
          format: int64
          type: integer
        distance:
          description: cumulated distance from start to this activity in m
          format: int64
          type: integer
        driving_time:
          description: cumulated driving time from start to this driver activity in
            seconds
          format: int64
          type: integer
        load_before:
          description: Array with size/capacity dimensions before this activity
          items:
            description: dimension value
            format: int32
            type: integer
          type: array
        load_after:
          description: Array with size/capacity dimensions after this activity
          items:
            description: dimension value
            format: int32
            type: integer
          type: array
    postMatrix_request:
      oneOf:
      - $ref: '#/components/schemas/MatrixRequest'
      - $ref: '#/components/schemas/SymmetricalMatrixRequest'
    getMatrixSolution_200_response:
      example:
        solution:
          distances:
          - - 0
            - 97653
            - 48887
          - - 97426
            - 0
            - 121035
          - - 49006
            - 121049
            - 0
          times:
          - - 0
            - 4197
            - 2994
          - - 4192
            - 0
            - 6074
          - - 3006
            - 6062
            - 0
          weights:
          - - 0
            - 5662.551
            - 3727.147
          - - 5653.807
            - 0
            - 7889.653
          - - 3741.528
            - 7878.365
            - 0
          info:
            copyrights:
            - GraphHopper
            - OpenStreetMap contributors
      properties:
        solution:
          $ref: '#/components/schemas/MatrixResponse'
    getSolution_404_response:
      example:
        message: Invalid job_id 73314c89-ee4b-459c-aca4-0ad6d6e558da
        status: finished
      properties:
        message:
          description: Error message
          example: Invalid job_id 73314c89-ee4b-459c-aca4-0ad6d6e558da
          type: string
        status:
          default: finished
          description: status
          example: finished
          type: string
    MatrixResponse_hints_inner:
      properties:
        message:
          description: Short description of this hint
          type: string
        details:
          description: Details of this hint
          type: string
        invalid_from_points:
          description: Optional. An array of from_point indices of points that could
            not be found. Will only be added if `fail_fast=false` and some `from_point`s
            were not found.`
          items:
            format: int32
            type: number
          type: array
        invalid_to_points:
          description: Optional. An array of to_point indices of points that could
            not be found. Will only be added if `fail_fast=false` and some `to_point`s
            were not found.`
          items:
            format: int32
            type: number
          type: array
        point_pairs:
          description: Optional. An array of two-element arrays representing the from/to_point
            indices of points for which no connection could be found. Will only be
            added if `fail_fast=false` and some connections were not found.
          items:
            items:
              format: int32
              type: number
            type: array
          type: array
    ProfileRequest_bounds:
      anyOf:
      - $ref: '#/components/schemas/BBox'
      - $ref: '#/components/schemas/FeatureCollection'
    ProfileResponse_bounds:
      example:
        bbox:
        - 0.8008281904610115
        - 0.8008281904610115
      properties:
        bbox:
          description: "A rectangular area given as an array [minLon, minLat, maxLon,\
            \ maxLat]. The profile will only work in this area."
          items:
            format: double
            type: number
          type: array
    FeatureCollection_features_inner:
      properties:
        type:
          enum:
          - Feature
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
    RouteResponsePath_points:
      allOf:
      - description: |
          The geometry of the route. The format depends on the value of `points_encoded`.
      - anyOf:
        - $ref: '#/components/schemas/EncodedLineString'
        - $ref: '#/components/schemas/LineString'
      example: {}
    RouteResponsePath_snapped_waypoints:
      allOf:
      - description: |
          The snapped input points. The format depends on the value of `points_encoded`.
      - anyOf:
        - $ref: '#/components/schemas/EncodedLineString'
        - $ref: '#/components/schemas/LineString'
      example: {}
    RouteResponsePath_instructions_inner:
      example:
        exit_number: 2
        distance: 2.3021358869347655
        sign: 3
        turn_angle: 4.145608029883936
        interval:
        - 9
        - 9
        text: text
        time: 7
        street_name: street_name
      properties:
        text:
          description: |
            A description what the user has to do in order to follow the route. The language depends on the locale parameter.
          type: string
        street_name:
          description: |
            The name of the street to turn onto in order to follow the route.
          type: string
        distance:
          description: |
            The distance for this instruction, in meters.
          format: double
          type: number
        time:
          description: |
            The duration for this instruction, in milliseconds.
          format: int32
          type: integer
        interval:
          description: |
            Two indices into `points`, referring to the beginning and the end of the segment of the route
            this instruction refers to.
          items:
            format: int32
            type: integer
          type: array
        sign:
          description: |
            A number which specifies the sign to show:

            | sign | description  |
            |---|---|
            |-98| an U-turn without the knowledge if it is a right or left U-turn |
            | -8| a left U-turn |
            | -7| keep left |
            | -6| **not yet used**: leave roundabout |
            | -3| turn sharp left |
            | -2| turn left |
            | -1| turn slight left |
            |  0| continue on street |
            |  1| turn slight right |
            |  2| turn right |
            |  3| turn sharp right |
            |  4| the finish instruction before the last point |
            |  5| the instruction before a via point |
            |  6| the instruction before entering a roundabout |
            |  7| keep right |
            |  8| a right U-turn |
            |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers
          format: int32
          type: integer
        exit_number:
          description: |
            Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout.
          format: int32
          type: integer
        turn_angle:
          description: |
            Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and
            `-2*PI < r < 0` for counterclockwise turns.
          format: double
          type: number
    IsochroneResponsePolygon_properties:
      properties:
        bucket:
          format: int32
          type: integer
    GHError_hints_inner:
      example:
        message: message
      properties:
        message:
          type: string
    Request_relations_inner:
      anyOf:
      - $ref: '#/components/schemas/JobRelation'
      - $ref: '#/components/schemas/GroupRelation'
    Vehicle_break:
      anyOf:
      - $ref: '#/components/schemas/TimeWindowBreak'
      - $ref: '#/components/schemas/DriveTimeBreak'
    CostMatrix_data_info:
      description: Additional information for your request
      example:
        took: 1.2315135367772556
        copyrights:
        - copyrights
        - copyrights
      properties:
        copyrights:
          items:
            type: string
          type: array
        took:
          format: double
          type: number
    CostMatrix_data:
      description: JSON data of matrix response
      example:
        distances:
        - - 7.386281948385884
          - 7.386281948385884
        - - 7.386281948385884
          - 7.386281948385884
        times:
        - - 4
          - 4
        - - 4
          - 4
        info:
          took: 1.2315135367772556
          copyrights:
          - copyrights
          - copyrights
      properties:
        times:
          items:
            items:
              format: int64
              type: integer
            type: array
          minItems: 1
          type: array
        distances:
          items:
            items:
              format: double
              type: number
            type: array
          minItems: 1
          type: array
        info:
          $ref: '#/components/schemas/CostMatrix_data_info'
    Solution_unassigned:
      example:
        breaks:
        - breaks
        - breaks
        details:
        - reason: reason
          code: 1
          id: id
        - reason: reason
          code: 1
          id: id
        services:
        - service-1
        - service-3
        shipments:
        - shipment-5
      properties:
        services:
          description: An array of ids of unassigned services
          example:
          - service-1
          - service-3
          items:
            description: Id of unassigned service
            type: string
          type: array
        shipments:
          description: An array of ids of unassigned shipments
          example:
          - shipment-5
          items:
            description: Id of unassigned shipments
            type: string
          type: array
        breaks:
          description: An array of ids of unassigned breaks
          items:
            description: Id of unassigned breaks
            type: string
          type: array
        details:
          description: "An array of details, i.e. reason for unassigned services or\
            \ shipments"
          items:
            $ref: '#/components/schemas/Detail'
          type: array
  securitySchemes:
    api_key:
      in: query
      name: key
      type: apiKey
