/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterResponse{}

// ClusterResponse struct for ClusterResponse
type ClusterResponse struct {
	Copyrights []string `json:"copyrights,omitempty"`
	// Indicates the current status of the job
	Status *string `json:"status,omitempty"`
	WaitingTimeInQueue *float64 `json:"waiting_time_in_queue,omitempty"`
	ProcessingTime *float64 `json:"processing_time,omitempty"`
	Clusters []Cluster `json:"clusters,omitempty"`
}

// NewClusterResponse instantiates a new ClusterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterResponse() *ClusterResponse {
	this := ClusterResponse{}
	return &this
}

// NewClusterResponseWithDefaults instantiates a new ClusterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterResponseWithDefaults() *ClusterResponse {
	this := ClusterResponse{}
	return &this
}

// GetCopyrights returns the Copyrights field value if set, zero value otherwise.
func (o *ClusterResponse) GetCopyrights() []string {
	if o == nil || IsNil(o.Copyrights) {
		var ret []string
		return ret
	}
	return o.Copyrights
}

// GetCopyrightsOk returns a tuple with the Copyrights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResponse) GetCopyrightsOk() ([]string, bool) {
	if o == nil || IsNil(o.Copyrights) {
		return nil, false
	}
	return o.Copyrights, true
}

// HasCopyrights returns a boolean if a field has been set.
func (o *ClusterResponse) HasCopyrights() bool {
	if o != nil && !IsNil(o.Copyrights) {
		return true
	}

	return false
}

// SetCopyrights gets a reference to the given []string and assigns it to the Copyrights field.
func (o *ClusterResponse) SetCopyrights(v []string) {
	o.Copyrights = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ClusterResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ClusterResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ClusterResponse) SetStatus(v string) {
	o.Status = &v
}

// GetWaitingTimeInQueue returns the WaitingTimeInQueue field value if set, zero value otherwise.
func (o *ClusterResponse) GetWaitingTimeInQueue() float64 {
	if o == nil || IsNil(o.WaitingTimeInQueue) {
		var ret float64
		return ret
	}
	return *o.WaitingTimeInQueue
}

// GetWaitingTimeInQueueOk returns a tuple with the WaitingTimeInQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResponse) GetWaitingTimeInQueueOk() (*float64, bool) {
	if o == nil || IsNil(o.WaitingTimeInQueue) {
		return nil, false
	}
	return o.WaitingTimeInQueue, true
}

// HasWaitingTimeInQueue returns a boolean if a field has been set.
func (o *ClusterResponse) HasWaitingTimeInQueue() bool {
	if o != nil && !IsNil(o.WaitingTimeInQueue) {
		return true
	}

	return false
}

// SetWaitingTimeInQueue gets a reference to the given float64 and assigns it to the WaitingTimeInQueue field.
func (o *ClusterResponse) SetWaitingTimeInQueue(v float64) {
	o.WaitingTimeInQueue = &v
}

// GetProcessingTime returns the ProcessingTime field value if set, zero value otherwise.
func (o *ClusterResponse) GetProcessingTime() float64 {
	if o == nil || IsNil(o.ProcessingTime) {
		var ret float64
		return ret
	}
	return *o.ProcessingTime
}

// GetProcessingTimeOk returns a tuple with the ProcessingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResponse) GetProcessingTimeOk() (*float64, bool) {
	if o == nil || IsNil(o.ProcessingTime) {
		return nil, false
	}
	return o.ProcessingTime, true
}

// HasProcessingTime returns a boolean if a field has been set.
func (o *ClusterResponse) HasProcessingTime() bool {
	if o != nil && !IsNil(o.ProcessingTime) {
		return true
	}

	return false
}

// SetProcessingTime gets a reference to the given float64 and assigns it to the ProcessingTime field.
func (o *ClusterResponse) SetProcessingTime(v float64) {
	o.ProcessingTime = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *ClusterResponse) GetClusters() []Cluster {
	if o == nil || IsNil(o.Clusters) {
		var ret []Cluster
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResponse) GetClustersOk() ([]Cluster, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *ClusterResponse) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []Cluster and assigns it to the Clusters field.
func (o *ClusterResponse) SetClusters(v []Cluster) {
	o.Clusters = v
}

func (o ClusterResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Copyrights) {
		toSerialize["copyrights"] = o.Copyrights
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.WaitingTimeInQueue) {
		toSerialize["waiting_time_in_queue"] = o.WaitingTimeInQueue
	}
	if !IsNil(o.ProcessingTime) {
		toSerialize["processing_time"] = o.ProcessingTime
	}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	return toSerialize, nil
}

type NullableClusterResponse struct {
	value *ClusterResponse
	isSet bool
}

func (v NullableClusterResponse) Get() *ClusterResponse {
	return v.value
}

func (v *NullableClusterResponse) Set(val *ClusterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterResponse(val *ClusterResponse) *NullableClusterResponse {
	return &NullableClusterResponse{value: val, isSet: true}
}

func (v NullableClusterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


