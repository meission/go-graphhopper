/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteResponsePathInstructionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteResponsePathInstructionsInner{}

// RouteResponsePathInstructionsInner struct for RouteResponsePathInstructionsInner
type RouteResponsePathInstructionsInner struct {
	// A description what the user has to do in order to follow the route. The language depends on the locale parameter. 
	Text *string `json:"text,omitempty"`
	// The name of the street to turn onto in order to follow the route. 
	StreetName *string `json:"street_name,omitempty"`
	// The distance for this instruction, in meters. 
	Distance *float64 `json:"distance,omitempty"`
	// The duration for this instruction, in milliseconds. 
	Time *int32 `json:"time,omitempty"`
	// Two indices into `points`, referring to the beginning and the end of the segment of the route this instruction refers to. 
	Interval []int32 `json:"interval,omitempty"`
	// A number which specifies the sign to show:  | sign | description  | |---|---| |-98| an U-turn without the knowledge if it is a right or left U-turn | | -8| a left U-turn | | -7| keep left | | -6| **not yet used**: leave roundabout | | -3| turn sharp left | | -2| turn left | | -1| turn slight left | |  0| continue on street | |  1| turn slight right | |  2| turn right | |  3| turn sharp right | |  4| the finish instruction before the last point | |  5| the instruction before a via point | |  6| the instruction before entering a roundabout | |  7| keep right | |  8| a right U-turn | |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers 
	Sign *int32 `json:"sign,omitempty"`
	// Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout. 
	ExitNumber *int32 `json:"exit_number,omitempty"`
	// Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and `-2*PI < r < 0` for counterclockwise turns. 
	TurnAngle *float64 `json:"turn_angle,omitempty"`
}

// NewRouteResponsePathInstructionsInner instantiates a new RouteResponsePathInstructionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteResponsePathInstructionsInner() *RouteResponsePathInstructionsInner {
	this := RouteResponsePathInstructionsInner{}
	return &this
}

// NewRouteResponsePathInstructionsInnerWithDefaults instantiates a new RouteResponsePathInstructionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteResponsePathInstructionsInnerWithDefaults() *RouteResponsePathInstructionsInner {
	this := RouteResponsePathInstructionsInner{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RouteResponsePathInstructionsInner) SetText(v string) {
	o.Text = &v
}

// GetStreetName returns the StreetName field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetStreetName() string {
	if o == nil || IsNil(o.StreetName) {
		var ret string
		return ret
	}
	return *o.StreetName
}

// GetStreetNameOk returns a tuple with the StreetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetStreetNameOk() (*string, bool) {
	if o == nil || IsNil(o.StreetName) {
		return nil, false
	}
	return o.StreetName, true
}

// HasStreetName returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasStreetName() bool {
	if o != nil && !IsNil(o.StreetName) {
		return true
	}

	return false
}

// SetStreetName gets a reference to the given string and assigns it to the StreetName field.
func (o *RouteResponsePathInstructionsInner) SetStreetName(v string) {
	o.StreetName = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetDistance() float64 {
	if o == nil || IsNil(o.Distance) {
		var ret float64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetDistanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float64 and assigns it to the Distance field.
func (o *RouteResponsePathInstructionsInner) SetDistance(v float64) {
	o.Distance = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetTime() int32 {
	if o == nil || IsNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *RouteResponsePathInstructionsInner) SetTime(v int32) {
	o.Time = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetInterval() []int32 {
	if o == nil || IsNil(o.Interval) {
		var ret []int32
		return ret
	}
	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetIntervalOk() ([]int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given []int32 and assigns it to the Interval field.
func (o *RouteResponsePathInstructionsInner) SetInterval(v []int32) {
	o.Interval = v
}

// GetSign returns the Sign field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetSign() int32 {
	if o == nil || IsNil(o.Sign) {
		var ret int32
		return ret
	}
	return *o.Sign
}

// GetSignOk returns a tuple with the Sign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetSignOk() (*int32, bool) {
	if o == nil || IsNil(o.Sign) {
		return nil, false
	}
	return o.Sign, true
}

// HasSign returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasSign() bool {
	if o != nil && !IsNil(o.Sign) {
		return true
	}

	return false
}

// SetSign gets a reference to the given int32 and assigns it to the Sign field.
func (o *RouteResponsePathInstructionsInner) SetSign(v int32) {
	o.Sign = &v
}

// GetExitNumber returns the ExitNumber field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetExitNumber() int32 {
	if o == nil || IsNil(o.ExitNumber) {
		var ret int32
		return ret
	}
	return *o.ExitNumber
}

// GetExitNumberOk returns a tuple with the ExitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetExitNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.ExitNumber) {
		return nil, false
	}
	return o.ExitNumber, true
}

// HasExitNumber returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasExitNumber() bool {
	if o != nil && !IsNil(o.ExitNumber) {
		return true
	}

	return false
}

// SetExitNumber gets a reference to the given int32 and assigns it to the ExitNumber field.
func (o *RouteResponsePathInstructionsInner) SetExitNumber(v int32) {
	o.ExitNumber = &v
}

// GetTurnAngle returns the TurnAngle field value if set, zero value otherwise.
func (o *RouteResponsePathInstructionsInner) GetTurnAngle() float64 {
	if o == nil || IsNil(o.TurnAngle) {
		var ret float64
		return ret
	}
	return *o.TurnAngle
}

// GetTurnAngleOk returns a tuple with the TurnAngle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponsePathInstructionsInner) GetTurnAngleOk() (*float64, bool) {
	if o == nil || IsNil(o.TurnAngle) {
		return nil, false
	}
	return o.TurnAngle, true
}

// HasTurnAngle returns a boolean if a field has been set.
func (o *RouteResponsePathInstructionsInner) HasTurnAngle() bool {
	if o != nil && !IsNil(o.TurnAngle) {
		return true
	}

	return false
}

// SetTurnAngle gets a reference to the given float64 and assigns it to the TurnAngle field.
func (o *RouteResponsePathInstructionsInner) SetTurnAngle(v float64) {
	o.TurnAngle = &v
}

func (o RouteResponsePathInstructionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteResponsePathInstructionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.StreetName) {
		toSerialize["street_name"] = o.StreetName
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Sign) {
		toSerialize["sign"] = o.Sign
	}
	if !IsNil(o.ExitNumber) {
		toSerialize["exit_number"] = o.ExitNumber
	}
	if !IsNil(o.TurnAngle) {
		toSerialize["turn_angle"] = o.TurnAngle
	}
	return toSerialize, nil
}

type NullableRouteResponsePathInstructionsInner struct {
	value *RouteResponsePathInstructionsInner
	isSet bool
}

func (v NullableRouteResponsePathInstructionsInner) Get() *RouteResponsePathInstructionsInner {
	return v.value
}

func (v *NullableRouteResponsePathInstructionsInner) Set(val *RouteResponsePathInstructionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteResponsePathInstructionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteResponsePathInstructionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteResponsePathInstructionsInner(val *RouteResponsePathInstructionsInner) *NullableRouteResponsePathInstructionsInner {
	return &NullableRouteResponsePathInstructionsInner{value: val, isSet: true}
}

func (v NullableRouteResponsePathInstructionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteResponsePathInstructionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


