/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route struct for Route
type Route struct {
	// Id of vehicle that operates route
	VehicleId *string `json:"vehicle_id,omitempty"`
	// Distance of route in meter
	Distance *int64 `json:"distance,omitempty"`
	// Transport time of route in seconds
	TransportTime *int64 `json:"transport_time,omitempty"`
	// Completion time of route in seconds
	CompletionTime *int64 `json:"completion_time,omitempty"`
	// Waiting time of route in seconds
	WaitingTime *int64 `json:"waiting_time,omitempty"`
	// Service duration of route in seconds
	ServiceDuration *int64 `json:"service_duration,omitempty"`
	// Preparation time of route in seconds
	PreparationTime *int64 `json:"preparation_time,omitempty"`
	// Array of activities
	Activities []Activity `json:"activities,omitempty"`
	// Array of route planning points
	Points []RoutePoint `json:"points,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute() *Route {
	this := Route{}
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *Route) GetVehicleId() string {
	if o == nil || IsNil(o.VehicleId) {
		var ret string
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetVehicleIdOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleId) {
		return nil, false
	}
	return o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *Route) HasVehicleId() bool {
	if o != nil && !IsNil(o.VehicleId) {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given string and assigns it to the VehicleId field.
func (o *Route) SetVehicleId(v string) {
	o.VehicleId = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *Route) GetDistance() int64 {
	if o == nil || IsNil(o.Distance) {
		var ret int64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDistanceOk() (*int64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *Route) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int64 and assigns it to the Distance field.
func (o *Route) SetDistance(v int64) {
	o.Distance = &v
}

// GetTransportTime returns the TransportTime field value if set, zero value otherwise.
func (o *Route) GetTransportTime() int64 {
	if o == nil || IsNil(o.TransportTime) {
		var ret int64
		return ret
	}
	return *o.TransportTime
}

// GetTransportTimeOk returns a tuple with the TransportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTransportTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.TransportTime) {
		return nil, false
	}
	return o.TransportTime, true
}

// HasTransportTime returns a boolean if a field has been set.
func (o *Route) HasTransportTime() bool {
	if o != nil && !IsNil(o.TransportTime) {
		return true
	}

	return false
}

// SetTransportTime gets a reference to the given int64 and assigns it to the TransportTime field.
func (o *Route) SetTransportTime(v int64) {
	o.TransportTime = &v
}

// GetCompletionTime returns the CompletionTime field value if set, zero value otherwise.
func (o *Route) GetCompletionTime() int64 {
	if o == nil || IsNil(o.CompletionTime) {
		var ret int64
		return ret
	}
	return *o.CompletionTime
}

// GetCompletionTimeOk returns a tuple with the CompletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetCompletionTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CompletionTime) {
		return nil, false
	}
	return o.CompletionTime, true
}

// HasCompletionTime returns a boolean if a field has been set.
func (o *Route) HasCompletionTime() bool {
	if o != nil && !IsNil(o.CompletionTime) {
		return true
	}

	return false
}

// SetCompletionTime gets a reference to the given int64 and assigns it to the CompletionTime field.
func (o *Route) SetCompletionTime(v int64) {
	o.CompletionTime = &v
}

// GetWaitingTime returns the WaitingTime field value if set, zero value otherwise.
func (o *Route) GetWaitingTime() int64 {
	if o == nil || IsNil(o.WaitingTime) {
		var ret int64
		return ret
	}
	return *o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetWaitingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.WaitingTime) {
		return nil, false
	}
	return o.WaitingTime, true
}

// HasWaitingTime returns a boolean if a field has been set.
func (o *Route) HasWaitingTime() bool {
	if o != nil && !IsNil(o.WaitingTime) {
		return true
	}

	return false
}

// SetWaitingTime gets a reference to the given int64 and assigns it to the WaitingTime field.
func (o *Route) SetWaitingTime(v int64) {
	o.WaitingTime = &v
}

// GetServiceDuration returns the ServiceDuration field value if set, zero value otherwise.
func (o *Route) GetServiceDuration() int64 {
	if o == nil || IsNil(o.ServiceDuration) {
		var ret int64
		return ret
	}
	return *o.ServiceDuration
}

// GetServiceDurationOk returns a tuple with the ServiceDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetServiceDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.ServiceDuration) {
		return nil, false
	}
	return o.ServiceDuration, true
}

// HasServiceDuration returns a boolean if a field has been set.
func (o *Route) HasServiceDuration() bool {
	if o != nil && !IsNil(o.ServiceDuration) {
		return true
	}

	return false
}

// SetServiceDuration gets a reference to the given int64 and assigns it to the ServiceDuration field.
func (o *Route) SetServiceDuration(v int64) {
	o.ServiceDuration = &v
}

// GetPreparationTime returns the PreparationTime field value if set, zero value otherwise.
func (o *Route) GetPreparationTime() int64 {
	if o == nil || IsNil(o.PreparationTime) {
		var ret int64
		return ret
	}
	return *o.PreparationTime
}

// GetPreparationTimeOk returns a tuple with the PreparationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPreparationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreparationTime) {
		return nil, false
	}
	return o.PreparationTime, true
}

// HasPreparationTime returns a boolean if a field has been set.
func (o *Route) HasPreparationTime() bool {
	if o != nil && !IsNil(o.PreparationTime) {
		return true
	}

	return false
}

// SetPreparationTime gets a reference to the given int64 and assigns it to the PreparationTime field.
func (o *Route) SetPreparationTime(v int64) {
	o.PreparationTime = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *Route) GetActivities() []Activity {
	if o == nil || IsNil(o.Activities) {
		var ret []Activity
		return ret
	}
	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetActivitiesOk() ([]Activity, bool) {
	if o == nil || IsNil(o.Activities) {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *Route) HasActivities() bool {
	if o != nil && !IsNil(o.Activities) {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []Activity and assigns it to the Activities field.
func (o *Route) SetActivities(v []Activity) {
	o.Activities = v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *Route) GetPoints() []RoutePoint {
	if o == nil || IsNil(o.Points) {
		var ret []RoutePoint
		return ret
	}
	return o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetPointsOk() ([]RoutePoint, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *Route) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given []RoutePoint and assigns it to the Points field.
func (o *Route) SetPoints(v []RoutePoint) {
	o.Points = v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VehicleId) {
		toSerialize["vehicle_id"] = o.VehicleId
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.TransportTime) {
		toSerialize["transport_time"] = o.TransportTime
	}
	if !IsNil(o.CompletionTime) {
		toSerialize["completion_time"] = o.CompletionTime
	}
	if !IsNil(o.WaitingTime) {
		toSerialize["waiting_time"] = o.WaitingTime
	}
	if !IsNil(o.ServiceDuration) {
		toSerialize["service_duration"] = o.ServiceDuration
	}
	if !IsNil(o.PreparationTime) {
		toSerialize["preparation_time"] = o.PreparationTime
	}
	if !IsNil(o.Activities) {
		toSerialize["activities"] = o.Activities
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	return toSerialize, nil
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


