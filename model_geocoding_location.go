/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GeocodingLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeocodingLocation{}

// GeocodingLocation struct for GeocodingLocation
type GeocodingLocation struct {
	Point *GeocodingPoint `json:"point,omitempty"`
	// The OSM ID of the entity
	OsmId *string `json:"osm_id,omitempty"`
	// N = node, R = relation, W = way
	OsmType *string `json:"osm_type,omitempty"`
	// The OSM key of the entity
	OsmKey *string `json:"osm_key,omitempty"`
	// The name of the entity. Can be a boundary, POI, address, etc
	Name *string `json:"name,omitempty"`
	// The country of the address
	Country *string `json:"country,omitempty"`
	// The city of the address
	City *string `json:"city,omitempty"`
	// The state of the address
	State *string `json:"state,omitempty"`
	// The street of the address
	Street *string `json:"street,omitempty"`
	// The housenumber of the address
	Housenumber *string `json:"housenumber,omitempty"`
	// The postcode of the address
	Postcode *string `json:"postcode,omitempty"`
}

// NewGeocodingLocation instantiates a new GeocodingLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeocodingLocation() *GeocodingLocation {
	this := GeocodingLocation{}
	return &this
}

// NewGeocodingLocationWithDefaults instantiates a new GeocodingLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeocodingLocationWithDefaults() *GeocodingLocation {
	this := GeocodingLocation{}
	return &this
}

// GetPoint returns the Point field value if set, zero value otherwise.
func (o *GeocodingLocation) GetPoint() GeocodingPoint {
	if o == nil || IsNil(o.Point) {
		var ret GeocodingPoint
		return ret
	}
	return *o.Point
}

// GetPointOk returns a tuple with the Point field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetPointOk() (*GeocodingPoint, bool) {
	if o == nil || IsNil(o.Point) {
		return nil, false
	}
	return o.Point, true
}

// HasPoint returns a boolean if a field has been set.
func (o *GeocodingLocation) HasPoint() bool {
	if o != nil && !IsNil(o.Point) {
		return true
	}

	return false
}

// SetPoint gets a reference to the given GeocodingPoint and assigns it to the Point field.
func (o *GeocodingLocation) SetPoint(v GeocodingPoint) {
	o.Point = &v
}

// GetOsmId returns the OsmId field value if set, zero value otherwise.
func (o *GeocodingLocation) GetOsmId() string {
	if o == nil || IsNil(o.OsmId) {
		var ret string
		return ret
	}
	return *o.OsmId
}

// GetOsmIdOk returns a tuple with the OsmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetOsmIdOk() (*string, bool) {
	if o == nil || IsNil(o.OsmId) {
		return nil, false
	}
	return o.OsmId, true
}

// HasOsmId returns a boolean if a field has been set.
func (o *GeocodingLocation) HasOsmId() bool {
	if o != nil && !IsNil(o.OsmId) {
		return true
	}

	return false
}

// SetOsmId gets a reference to the given string and assigns it to the OsmId field.
func (o *GeocodingLocation) SetOsmId(v string) {
	o.OsmId = &v
}

// GetOsmType returns the OsmType field value if set, zero value otherwise.
func (o *GeocodingLocation) GetOsmType() string {
	if o == nil || IsNil(o.OsmType) {
		var ret string
		return ret
	}
	return *o.OsmType
}

// GetOsmTypeOk returns a tuple with the OsmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetOsmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OsmType) {
		return nil, false
	}
	return o.OsmType, true
}

// HasOsmType returns a boolean if a field has been set.
func (o *GeocodingLocation) HasOsmType() bool {
	if o != nil && !IsNil(o.OsmType) {
		return true
	}

	return false
}

// SetOsmType gets a reference to the given string and assigns it to the OsmType field.
func (o *GeocodingLocation) SetOsmType(v string) {
	o.OsmType = &v
}

// GetOsmKey returns the OsmKey field value if set, zero value otherwise.
func (o *GeocodingLocation) GetOsmKey() string {
	if o == nil || IsNil(o.OsmKey) {
		var ret string
		return ret
	}
	return *o.OsmKey
}

// GetOsmKeyOk returns a tuple with the OsmKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetOsmKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OsmKey) {
		return nil, false
	}
	return o.OsmKey, true
}

// HasOsmKey returns a boolean if a field has been set.
func (o *GeocodingLocation) HasOsmKey() bool {
	if o != nil && !IsNil(o.OsmKey) {
		return true
	}

	return false
}

// SetOsmKey gets a reference to the given string and assigns it to the OsmKey field.
func (o *GeocodingLocation) SetOsmKey(v string) {
	o.OsmKey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GeocodingLocation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GeocodingLocation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GeocodingLocation) SetName(v string) {
	o.Name = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *GeocodingLocation) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *GeocodingLocation) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *GeocodingLocation) SetCountry(v string) {
	o.Country = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *GeocodingLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *GeocodingLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *GeocodingLocation) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GeocodingLocation) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GeocodingLocation) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GeocodingLocation) SetState(v string) {
	o.State = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *GeocodingLocation) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *GeocodingLocation) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *GeocodingLocation) SetStreet(v string) {
	o.Street = &v
}

// GetHousenumber returns the Housenumber field value if set, zero value otherwise.
func (o *GeocodingLocation) GetHousenumber() string {
	if o == nil || IsNil(o.Housenumber) {
		var ret string
		return ret
	}
	return *o.Housenumber
}

// GetHousenumberOk returns a tuple with the Housenumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetHousenumberOk() (*string, bool) {
	if o == nil || IsNil(o.Housenumber) {
		return nil, false
	}
	return o.Housenumber, true
}

// HasHousenumber returns a boolean if a field has been set.
func (o *GeocodingLocation) HasHousenumber() bool {
	if o != nil && !IsNil(o.Housenumber) {
		return true
	}

	return false
}

// SetHousenumber gets a reference to the given string and assigns it to the Housenumber field.
func (o *GeocodingLocation) SetHousenumber(v string) {
	o.Housenumber = &v
}

// GetPostcode returns the Postcode field value if set, zero value otherwise.
func (o *GeocodingLocation) GetPostcode() string {
	if o == nil || IsNil(o.Postcode) {
		var ret string
		return ret
	}
	return *o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeocodingLocation) GetPostcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Postcode) {
		return nil, false
	}
	return o.Postcode, true
}

// HasPostcode returns a boolean if a field has been set.
func (o *GeocodingLocation) HasPostcode() bool {
	if o != nil && !IsNil(o.Postcode) {
		return true
	}

	return false
}

// SetPostcode gets a reference to the given string and assigns it to the Postcode field.
func (o *GeocodingLocation) SetPostcode(v string) {
	o.Postcode = &v
}

func (o GeocodingLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeocodingLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Point) {
		toSerialize["point"] = o.Point
	}
	if !IsNil(o.OsmId) {
		toSerialize["osm_id"] = o.OsmId
	}
	if !IsNil(o.OsmType) {
		toSerialize["osm_type"] = o.OsmType
	}
	if !IsNil(o.OsmKey) {
		toSerialize["osm_key"] = o.OsmKey
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Housenumber) {
		toSerialize["housenumber"] = o.Housenumber
	}
	if !IsNil(o.Postcode) {
		toSerialize["postcode"] = o.Postcode
	}
	return toSerialize, nil
}

type NullableGeocodingLocation struct {
	value *GeocodingLocation
	isSet bool
}

func (v NullableGeocodingLocation) Get() *GeocodingLocation {
	return v.value
}

func (v *NullableGeocodingLocation) Set(val *GeocodingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeocodingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableGeocodingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeocodingLocation(val *GeocodingLocation) *NullableGeocodingLocation {
	return &NullableGeocodingLocation{value: val, isSet: true}
}

func (v NullableGeocodingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeocodingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


