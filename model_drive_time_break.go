/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DriveTimeBreak type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriveTimeBreak{}

// DriveTimeBreak struct for DriveTimeBreak
type DriveTimeBreak struct {
	// Specifies the duration of the break in seconds.
	Duration int64 `json:"duration"`
	// Specifies the max driving time (in a row) without break in seconds.
	MaxDrivingTime int64 `json:"max_driving_time"`
	// Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds.
	InitialDrivingTime *int64 `json:"initial_driving_time,omitempty"`
	// Array specifying how a break duration (in seconds) can be split into several smaller breaks
	PossibleSplit []int64 `json:"possible_split,omitempty"`
}

type _DriveTimeBreak DriveTimeBreak

// NewDriveTimeBreak instantiates a new DriveTimeBreak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriveTimeBreak(duration int64, maxDrivingTime int64) *DriveTimeBreak {
	this := DriveTimeBreak{}
	this.Duration = duration
	this.MaxDrivingTime = maxDrivingTime
	return &this
}

// NewDriveTimeBreakWithDefaults instantiates a new DriveTimeBreak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveTimeBreakWithDefaults() *DriveTimeBreak {
	this := DriveTimeBreak{}
	return &this
}

// GetDuration returns the Duration field value
func (o *DriveTimeBreak) GetDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *DriveTimeBreak) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *DriveTimeBreak) SetDuration(v int64) {
	o.Duration = v
}

// GetMaxDrivingTime returns the MaxDrivingTime field value
func (o *DriveTimeBreak) GetMaxDrivingTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxDrivingTime
}

// GetMaxDrivingTimeOk returns a tuple with the MaxDrivingTime field value
// and a boolean to check if the value has been set.
func (o *DriveTimeBreak) GetMaxDrivingTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxDrivingTime, true
}

// SetMaxDrivingTime sets field value
func (o *DriveTimeBreak) SetMaxDrivingTime(v int64) {
	o.MaxDrivingTime = v
}

// GetInitialDrivingTime returns the InitialDrivingTime field value if set, zero value otherwise.
func (o *DriveTimeBreak) GetInitialDrivingTime() int64 {
	if o == nil || IsNil(o.InitialDrivingTime) {
		var ret int64
		return ret
	}
	return *o.InitialDrivingTime
}

// GetInitialDrivingTimeOk returns a tuple with the InitialDrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveTimeBreak) GetInitialDrivingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.InitialDrivingTime) {
		return nil, false
	}
	return o.InitialDrivingTime, true
}

// HasInitialDrivingTime returns a boolean if a field has been set.
func (o *DriveTimeBreak) HasInitialDrivingTime() bool {
	if o != nil && !IsNil(o.InitialDrivingTime) {
		return true
	}

	return false
}

// SetInitialDrivingTime gets a reference to the given int64 and assigns it to the InitialDrivingTime field.
func (o *DriveTimeBreak) SetInitialDrivingTime(v int64) {
	o.InitialDrivingTime = &v
}

// GetPossibleSplit returns the PossibleSplit field value if set, zero value otherwise.
func (o *DriveTimeBreak) GetPossibleSplit() []int64 {
	if o == nil || IsNil(o.PossibleSplit) {
		var ret []int64
		return ret
	}
	return o.PossibleSplit
}

// GetPossibleSplitOk returns a tuple with the PossibleSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveTimeBreak) GetPossibleSplitOk() ([]int64, bool) {
	if o == nil || IsNil(o.PossibleSplit) {
		return nil, false
	}
	return o.PossibleSplit, true
}

// HasPossibleSplit returns a boolean if a field has been set.
func (o *DriveTimeBreak) HasPossibleSplit() bool {
	if o != nil && !IsNil(o.PossibleSplit) {
		return true
	}

	return false
}

// SetPossibleSplit gets a reference to the given []int64 and assigns it to the PossibleSplit field.
func (o *DriveTimeBreak) SetPossibleSplit(v []int64) {
	o.PossibleSplit = v
}

func (o DriveTimeBreak) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriveTimeBreak) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	toSerialize["max_driving_time"] = o.MaxDrivingTime
	if !IsNil(o.InitialDrivingTime) {
		toSerialize["initial_driving_time"] = o.InitialDrivingTime
	}
	if !IsNil(o.PossibleSplit) {
		toSerialize["possible_split"] = o.PossibleSplit
	}
	return toSerialize, nil
}

func (o *DriveTimeBreak) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"max_driving_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriveTimeBreak := _DriveTimeBreak{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDriveTimeBreak)

	if err != nil {
		return err
	}

	*o = DriveTimeBreak(varDriveTimeBreak)

	return err
}

type NullableDriveTimeBreak struct {
	value *DriveTimeBreak
	isSet bool
}

func (v NullableDriveTimeBreak) Get() *DriveTimeBreak {
	return v.value
}

func (v *NullableDriveTimeBreak) Set(val *DriveTimeBreak) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveTimeBreak) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveTimeBreak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveTimeBreak(val *DriveTimeBreak) *NullableDriveTimeBreak {
	return &NullableDriveTimeBreak{value: val, isSet: true}
}

func (v NullableDriveTimeBreak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveTimeBreak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


