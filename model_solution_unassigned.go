/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SolutionUnassigned type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolutionUnassigned{}

// SolutionUnassigned struct for SolutionUnassigned
type SolutionUnassigned struct {
	// An array of ids of unassigned services
	Services []string `json:"services,omitempty"`
	// An array of ids of unassigned shipments
	Shipments []string `json:"shipments,omitempty"`
	// An array of ids of unassigned breaks
	Breaks []string `json:"breaks,omitempty"`
	// An array of details, i.e. reason for unassigned services or shipments
	Details []Detail `json:"details,omitempty"`
}

// NewSolutionUnassigned instantiates a new SolutionUnassigned object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolutionUnassigned() *SolutionUnassigned {
	this := SolutionUnassigned{}
	return &this
}

// NewSolutionUnassignedWithDefaults instantiates a new SolutionUnassigned object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolutionUnassignedWithDefaults() *SolutionUnassigned {
	this := SolutionUnassigned{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *SolutionUnassigned) GetServices() []string {
	if o == nil || IsNil(o.Services) {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolutionUnassigned) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *SolutionUnassigned) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *SolutionUnassigned) SetServices(v []string) {
	o.Services = v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *SolutionUnassigned) GetShipments() []string {
	if o == nil || IsNil(o.Shipments) {
		var ret []string
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolutionUnassigned) GetShipmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *SolutionUnassigned) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []string and assigns it to the Shipments field.
func (o *SolutionUnassigned) SetShipments(v []string) {
	o.Shipments = v
}

// GetBreaks returns the Breaks field value if set, zero value otherwise.
func (o *SolutionUnassigned) GetBreaks() []string {
	if o == nil || IsNil(o.Breaks) {
		var ret []string
		return ret
	}
	return o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolutionUnassigned) GetBreaksOk() ([]string, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *SolutionUnassigned) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given []string and assigns it to the Breaks field.
func (o *SolutionUnassigned) SetBreaks(v []string) {
	o.Breaks = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *SolutionUnassigned) GetDetails() []Detail {
	if o == nil || IsNil(o.Details) {
		var ret []Detail
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SolutionUnassigned) GetDetailsOk() ([]Detail, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *SolutionUnassigned) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []Detail and assigns it to the Details field.
func (o *SolutionUnassigned) SetDetails(v []Detail) {
	o.Details = v
}

func (o SolutionUnassigned) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolutionUnassigned) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.Breaks) {
		toSerialize["breaks"] = o.Breaks
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableSolutionUnassigned struct {
	value *SolutionUnassigned
	isSet bool
}

func (v NullableSolutionUnassigned) Get() *SolutionUnassigned {
	return v.value
}

func (v *NullableSolutionUnassigned) Set(val *SolutionUnassigned) {
	v.value = val
	v.isSet = true
}

func (v NullableSolutionUnassigned) IsSet() bool {
	return v.isSet
}

func (v *NullableSolutionUnassigned) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolutionUnassigned(val *SolutionUnassigned) *NullableSolutionUnassigned {
	return &NullableSolutionUnassigned{value: val, isSet: true}
}

func (v NullableSolutionUnassigned) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolutionUnassigned) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


