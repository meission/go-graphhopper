/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SymmetricalMatrixRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymmetricalMatrixRequest{}

// SymmetricalMatrixRequest struct for SymmetricalMatrixRequest
type SymmetricalMatrixRequest struct {
	// The routing profile. It determines the network, speed and other physical attributes used when computing the route. See the section about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more details and valid profile values.
	Profile *string `json:"profile,omitempty"`
	// Specify multiple points for which the weight-, route-, time- or distance-matrix should be calculated as follows: `[longitude,latitude]`. In this case the origins are identical to the destinations. Thus, if there are N points, NxN entries are calculated. The order of the point parameter is important. Specify at least three points. Cannot be used together with `from_point` or `to_point.`.
	Points [][]float64 `json:"points,omitempty"`
	// Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.
	PointHints []string `json:"point_hints,omitempty"`
	// Optional parameter. 'Snapping' is the process of finding the closest road location for GPS coordinates provided in the `points` array. The `snap_preventions` array allows you to prevent snapping to specific types of roads. For example, if the array includes `bridge`, then the routing engine will avoid snapping to a bridge, even if it is the closest road for the given point. Note that once snapped the routing algorithm can still route over bridges (or the other values). To avoid this you need to use the `custom_model`.
	SnapPreventions []string `json:"snap_preventions,omitempty"`
	// Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.
	Curbsides []string `json:"curbsides,omitempty"`
	// Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicle profiles or versions of this API.
	OutArrays []string `json:"out_arrays,omitempty"`
	// Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).
	FailFast *bool `json:"fail_fast,omitempty"`
}

// NewSymmetricalMatrixRequest instantiates a new SymmetricalMatrixRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymmetricalMatrixRequest() *SymmetricalMatrixRequest {
	this := SymmetricalMatrixRequest{}
	var profile string = "car"
	this.Profile = &profile
	var failFast bool = true
	this.FailFast = &failFast
	return &this
}

// NewSymmetricalMatrixRequestWithDefaults instantiates a new SymmetricalMatrixRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymmetricalMatrixRequestWithDefaults() *SymmetricalMatrixRequest {
	this := SymmetricalMatrixRequest{}
	var profile string = "car"
	this.Profile = &profile
	var failFast bool = true
	this.FailFast = &failFast
	return &this
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *SymmetricalMatrixRequest) SetProfile(v string) {
	o.Profile = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetPoints() [][]float64 {
	if o == nil || IsNil(o.Points) {
		var ret [][]float64
		return ret
	}
	return o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetPointsOk() ([][]float64, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given [][]float64 and assigns it to the Points field.
func (o *SymmetricalMatrixRequest) SetPoints(v [][]float64) {
	o.Points = v
}

// GetPointHints returns the PointHints field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetPointHints() []string {
	if o == nil || IsNil(o.PointHints) {
		var ret []string
		return ret
	}
	return o.PointHints
}

// GetPointHintsOk returns a tuple with the PointHints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetPointHintsOk() ([]string, bool) {
	if o == nil || IsNil(o.PointHints) {
		return nil, false
	}
	return o.PointHints, true
}

// HasPointHints returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasPointHints() bool {
	if o != nil && !IsNil(o.PointHints) {
		return true
	}

	return false
}

// SetPointHints gets a reference to the given []string and assigns it to the PointHints field.
func (o *SymmetricalMatrixRequest) SetPointHints(v []string) {
	o.PointHints = v
}

// GetSnapPreventions returns the SnapPreventions field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetSnapPreventions() []string {
	if o == nil || IsNil(o.SnapPreventions) {
		var ret []string
		return ret
	}
	return o.SnapPreventions
}

// GetSnapPreventionsOk returns a tuple with the SnapPreventions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetSnapPreventionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SnapPreventions) {
		return nil, false
	}
	return o.SnapPreventions, true
}

// HasSnapPreventions returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasSnapPreventions() bool {
	if o != nil && !IsNil(o.SnapPreventions) {
		return true
	}

	return false
}

// SetSnapPreventions gets a reference to the given []string and assigns it to the SnapPreventions field.
func (o *SymmetricalMatrixRequest) SetSnapPreventions(v []string) {
	o.SnapPreventions = v
}

// GetCurbsides returns the Curbsides field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetCurbsides() []string {
	if o == nil || IsNil(o.Curbsides) {
		var ret []string
		return ret
	}
	return o.Curbsides
}

// GetCurbsidesOk returns a tuple with the Curbsides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetCurbsidesOk() ([]string, bool) {
	if o == nil || IsNil(o.Curbsides) {
		return nil, false
	}
	return o.Curbsides, true
}

// HasCurbsides returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasCurbsides() bool {
	if o != nil && !IsNil(o.Curbsides) {
		return true
	}

	return false
}

// SetCurbsides gets a reference to the given []string and assigns it to the Curbsides field.
func (o *SymmetricalMatrixRequest) SetCurbsides(v []string) {
	o.Curbsides = v
}

// GetOutArrays returns the OutArrays field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetOutArrays() []string {
	if o == nil || IsNil(o.OutArrays) {
		var ret []string
		return ret
	}
	return o.OutArrays
}

// GetOutArraysOk returns a tuple with the OutArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetOutArraysOk() ([]string, bool) {
	if o == nil || IsNil(o.OutArrays) {
		return nil, false
	}
	return o.OutArrays, true
}

// HasOutArrays returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasOutArrays() bool {
	if o != nil && !IsNil(o.OutArrays) {
		return true
	}

	return false
}

// SetOutArrays gets a reference to the given []string and assigns it to the OutArrays field.
func (o *SymmetricalMatrixRequest) SetOutArrays(v []string) {
	o.OutArrays = v
}

// GetFailFast returns the FailFast field value if set, zero value otherwise.
func (o *SymmetricalMatrixRequest) GetFailFast() bool {
	if o == nil || IsNil(o.FailFast) {
		var ret bool
		return ret
	}
	return *o.FailFast
}

// GetFailFastOk returns a tuple with the FailFast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymmetricalMatrixRequest) GetFailFastOk() (*bool, bool) {
	if o == nil || IsNil(o.FailFast) {
		return nil, false
	}
	return o.FailFast, true
}

// HasFailFast returns a boolean if a field has been set.
func (o *SymmetricalMatrixRequest) HasFailFast() bool {
	if o != nil && !IsNil(o.FailFast) {
		return true
	}

	return false
}

// SetFailFast gets a reference to the given bool and assigns it to the FailFast field.
func (o *SymmetricalMatrixRequest) SetFailFast(v bool) {
	o.FailFast = &v
}

func (o SymmetricalMatrixRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymmetricalMatrixRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.PointHints) {
		toSerialize["point_hints"] = o.PointHints
	}
	if !IsNil(o.SnapPreventions) {
		toSerialize["snap_preventions"] = o.SnapPreventions
	}
	if !IsNil(o.Curbsides) {
		toSerialize["curbsides"] = o.Curbsides
	}
	if !IsNil(o.OutArrays) {
		toSerialize["out_arrays"] = o.OutArrays
	}
	if !IsNil(o.FailFast) {
		toSerialize["fail_fast"] = o.FailFast
	}
	return toSerialize, nil
}

type NullableSymmetricalMatrixRequest struct {
	value *SymmetricalMatrixRequest
	isSet bool
}

func (v NullableSymmetricalMatrixRequest) Get() *SymmetricalMatrixRequest {
	return v.value
}

func (v *NullableSymmetricalMatrixRequest) Set(val *SymmetricalMatrixRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSymmetricalMatrixRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSymmetricalMatrixRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymmetricalMatrixRequest(val *SymmetricalMatrixRequest) *NullableSymmetricalMatrixRequest {
	return &NullableSymmetricalMatrixRequest{value: val, isSet: true}
}

func (v NullableSymmetricalMatrixRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymmetricalMatrixRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


