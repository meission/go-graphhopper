/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeWindowBreak type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeWindowBreak{}

// TimeWindowBreak struct for TimeWindowBreak
type TimeWindowBreak struct {
	// Specifies the earliest start time of the break in seconds.
	Earliest int64 `json:"earliest"`
	// Specifies the latest start time of break in seconds.
	Latest int64 `json:"latest"`
	// Specifies the duration of the break in seconds.
	Duration int64 `json:"duration"`
}

type _TimeWindowBreak TimeWindowBreak

// NewTimeWindowBreak instantiates a new TimeWindowBreak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeWindowBreak(earliest int64, latest int64, duration int64) *TimeWindowBreak {
	this := TimeWindowBreak{}
	this.Earliest = earliest
	this.Latest = latest
	this.Duration = duration
	return &this
}

// NewTimeWindowBreakWithDefaults instantiates a new TimeWindowBreak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeWindowBreakWithDefaults() *TimeWindowBreak {
	this := TimeWindowBreak{}
	return &this
}

// GetEarliest returns the Earliest field value
func (o *TimeWindowBreak) GetEarliest() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Earliest
}

// GetEarliestOk returns a tuple with the Earliest field value
// and a boolean to check if the value has been set.
func (o *TimeWindowBreak) GetEarliestOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Earliest, true
}

// SetEarliest sets field value
func (o *TimeWindowBreak) SetEarliest(v int64) {
	o.Earliest = v
}

// GetLatest returns the Latest field value
func (o *TimeWindowBreak) GetLatest() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value
// and a boolean to check if the value has been set.
func (o *TimeWindowBreak) GetLatestOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latest, true
}

// SetLatest sets field value
func (o *TimeWindowBreak) SetLatest(v int64) {
	o.Latest = v
}

// GetDuration returns the Duration field value
func (o *TimeWindowBreak) GetDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *TimeWindowBreak) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *TimeWindowBreak) SetDuration(v int64) {
	o.Duration = v
}

func (o TimeWindowBreak) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeWindowBreak) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["earliest"] = o.Earliest
	toSerialize["latest"] = o.Latest
	toSerialize["duration"] = o.Duration
	return toSerialize, nil
}

func (o *TimeWindowBreak) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"earliest",
		"latest",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeWindowBreak := _TimeWindowBreak{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeWindowBreak)

	if err != nil {
		return err
	}

	*o = TimeWindowBreak(varTimeWindowBreak)

	return err
}

type NullableTimeWindowBreak struct {
	value *TimeWindowBreak
	isSet bool
}

func (v NullableTimeWindowBreak) Get() *TimeWindowBreak {
	return v.value
}

func (v *NullableTimeWindowBreak) Set(val *TimeWindowBreak) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeWindowBreak) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeWindowBreak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeWindowBreak(val *TimeWindowBreak) *NullableTimeWindowBreak {
	return &NullableTimeWindowBreak{value: val, isSet: true}
}

func (v NullableTimeWindowBreak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeWindowBreak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


