/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// IsochronesAPIService IsochronesAPI service
type IsochronesAPIService service

type ApiGetIsochroneRequest struct {
	ctx context.Context
	ApiService *IsochronesAPIService
	point *string
	timeLimit *int32
	distanceLimit *int32
	profile *string
	buckets *int32
	reverseFlow *bool
}

// Specify the start coordinate
func (r ApiGetIsochroneRequest) Point(point string) ApiGetIsochroneRequest {
	r.point = &point
	return r
}

// Specify which time the vehicle should travel. In seconds.
func (r ApiGetIsochroneRequest) TimeLimit(timeLimit int32) ApiGetIsochroneRequest {
	r.timeLimit = &timeLimit
	return r
}

// Specify which distance the vehicle should travel. In meters.
func (r ApiGetIsochroneRequest) DistanceLimit(distanceLimit int32) ApiGetIsochroneRequest {
	r.distanceLimit = &distanceLimit
	return r
}

func (r ApiGetIsochroneRequest) Profile(profile string) ApiGetIsochroneRequest {
	r.profile = &profile
	return r
}

// Number by which to divide the given &#x60;time_limit&#x60; to create &#x60;buckets&#x60; nested isochrones of time intervals &#x60;time_limit-n*time_limit/buckets&#x60;. Applies analogously to &#x60;distance_limit&#x60;.
func (r ApiGetIsochroneRequest) Buckets(buckets int32) ApiGetIsochroneRequest {
	r.buckets = &buckets
	return r
}

// If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example use case for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.* 
func (r ApiGetIsochroneRequest) ReverseFlow(reverseFlow bool) ApiGetIsochroneRequest {
	r.reverseFlow = &reverseFlow
	return r
}

func (r ApiGetIsochroneRequest) Execute() (*IsochroneResponse, *http.Response, error) {
	return r.ApiService.GetIsochroneExecute(r)
}

/*
GetIsochrone Compute an isochrone

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetIsochroneRequest
*/
func (a *IsochronesAPIService) GetIsochrone(ctx context.Context) ApiGetIsochroneRequest {
	return ApiGetIsochroneRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IsochroneResponse
func (a *IsochronesAPIService) GetIsochroneExecute(r ApiGetIsochroneRequest) (*IsochroneResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IsochroneResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IsochronesAPIService.GetIsochrone")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/isochrone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.point == nil {
		return localVarReturnValue, nil, reportError("point is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "point", r.point, "form", "")
	if r.timeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_limit", r.timeLimit, "form", "")
	} else {
		var defaultValue int32 = 600
		r.timeLimit = &defaultValue
	}
	if r.distanceLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distance_limit", r.distanceLimit, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	} else {
		var defaultValue string = "car"
		r.profile = &defaultValue
	}
	if r.buckets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buckets", r.buckets, "form", "")
	} else {
		var defaultValue int32 = 1
		r.buckets = &defaultValue
	}
	if r.reverseFlow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reverse_flow", r.reverseFlow, "form", "")
	} else {
		var defaultValue bool = false
		r.reverseFlow = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
