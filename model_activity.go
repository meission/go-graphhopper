/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Activity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Activity{}

// Activity struct for Activity
type Activity struct {
	// type of activity
	Type *string `json:"type,omitempty"`
	// Id referring to the underlying service or shipment, i.e. the shipment or service this activity belongs to
	Id *string `json:"id,omitempty"`
	// Id that refers to address
	LocationId *string `json:"location_id,omitempty"`
	Address *ResponseAddress `json:"address,omitempty"`
	// Arrival time at this activity in seconds. If type is `start`, this is not available (since it makes no sense to have `arr_time` at start). However, `end_time` is available and actually means \\\"departure time\\\" at start location. It is important to note that `arr_time` does not necessarily mean \\\"start of underlying activity\\\", it solely means arrival time at activity location. If this activity has no time windows and if there are no further preparation times, `arr_time` is equal to activity start time.
	ArrTime *int64 `json:"arr_time,omitempty"`
	// End time of and thus departure time at this activity. If type is `end`, this is not available (since it makes no sense to have an `end_time` at end) `end_time` at each activity is equal to the departure time at the activity location.
	EndTime *int64 `json:"end_time,omitempty"`
	// Translation of unix timestamp in `end_time` to end date time string with zone offset. It will be in the following ISO-8601 format: 2007-12-03T10:15:30+01:00.
	EndDateTime *time.Time `json:"end_date_time,omitempty"`
	// Translation of unix timestamp in `arr_time` to arrival date time string with zone offset. It will be in the following ISO-8601 format: 2007-12-03T10:15:30+01:00.
	ArrDateTime *time.Time `json:"arr_date_time,omitempty"`
	// Waiting time at this activity in seconds. A waiting time can occur if the activity has at least one time window. If `arr_time` < `time_window.earliest` a waiting time of `time_window_earliest` - `arr_time` occurs.
	WaitingTime *int64 `json:"waiting_time,omitempty"`
	// preparation time at this activity in seconds
	PreparationTime *int64 `json:"preparation_time,omitempty"`
	// cumulated distance from start to this activity in m
	Distance *int64 `json:"distance,omitempty"`
	// cumulated driving time from start to this driver activity in seconds
	DrivingTime *int64 `json:"driving_time,omitempty"`
	// Array with size/capacity dimensions before this activity
	LoadBefore []int32 `json:"load_before,omitempty"`
	// Array with size/capacity dimensions after this activity
	LoadAfter []int32 `json:"load_after,omitempty"`
}

// NewActivity instantiates a new Activity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivity() *Activity {
	this := Activity{}
	return &this
}

// NewActivityWithDefaults instantiates a new Activity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityWithDefaults() *Activity {
	this := Activity{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Activity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Activity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Activity) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Activity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Activity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Activity) SetId(v string) {
	o.Id = &v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *Activity) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *Activity) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *Activity) SetLocationId(v string) {
	o.LocationId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Activity) GetAddress() ResponseAddress {
	if o == nil || IsNil(o.Address) {
		var ret ResponseAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetAddressOk() (*ResponseAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Activity) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given ResponseAddress and assigns it to the Address field.
func (o *Activity) SetAddress(v ResponseAddress) {
	o.Address = &v
}

// GetArrTime returns the ArrTime field value if set, zero value otherwise.
func (o *Activity) GetArrTime() int64 {
	if o == nil || IsNil(o.ArrTime) {
		var ret int64
		return ret
	}
	return *o.ArrTime
}

// GetArrTimeOk returns a tuple with the ArrTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetArrTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.ArrTime) {
		return nil, false
	}
	return o.ArrTime, true
}

// HasArrTime returns a boolean if a field has been set.
func (o *Activity) HasArrTime() bool {
	if o != nil && !IsNil(o.ArrTime) {
		return true
	}

	return false
}

// SetArrTime gets a reference to the given int64 and assigns it to the ArrTime field.
func (o *Activity) SetArrTime(v int64) {
	o.ArrTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Activity) GetEndTime() int64 {
	if o == nil || IsNil(o.EndTime) {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Activity) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *Activity) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *Activity) GetEndDateTime() time.Time {
	if o == nil || IsNil(o.EndDateTime) {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDateTime) {
		return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *Activity) HasEndDateTime() bool {
	if o != nil && !IsNil(o.EndDateTime) {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given time.Time and assigns it to the EndDateTime field.
func (o *Activity) SetEndDateTime(v time.Time) {
	o.EndDateTime = &v
}

// GetArrDateTime returns the ArrDateTime field value if set, zero value otherwise.
func (o *Activity) GetArrDateTime() time.Time {
	if o == nil || IsNil(o.ArrDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ArrDateTime
}

// GetArrDateTimeOk returns a tuple with the ArrDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetArrDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ArrDateTime) {
		return nil, false
	}
	return o.ArrDateTime, true
}

// HasArrDateTime returns a boolean if a field has been set.
func (o *Activity) HasArrDateTime() bool {
	if o != nil && !IsNil(o.ArrDateTime) {
		return true
	}

	return false
}

// SetArrDateTime gets a reference to the given time.Time and assigns it to the ArrDateTime field.
func (o *Activity) SetArrDateTime(v time.Time) {
	o.ArrDateTime = &v
}

// GetWaitingTime returns the WaitingTime field value if set, zero value otherwise.
func (o *Activity) GetWaitingTime() int64 {
	if o == nil || IsNil(o.WaitingTime) {
		var ret int64
		return ret
	}
	return *o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetWaitingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.WaitingTime) {
		return nil, false
	}
	return o.WaitingTime, true
}

// HasWaitingTime returns a boolean if a field has been set.
func (o *Activity) HasWaitingTime() bool {
	if o != nil && !IsNil(o.WaitingTime) {
		return true
	}

	return false
}

// SetWaitingTime gets a reference to the given int64 and assigns it to the WaitingTime field.
func (o *Activity) SetWaitingTime(v int64) {
	o.WaitingTime = &v
}

// GetPreparationTime returns the PreparationTime field value if set, zero value otherwise.
func (o *Activity) GetPreparationTime() int64 {
	if o == nil || IsNil(o.PreparationTime) {
		var ret int64
		return ret
	}
	return *o.PreparationTime
}

// GetPreparationTimeOk returns a tuple with the PreparationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetPreparationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.PreparationTime) {
		return nil, false
	}
	return o.PreparationTime, true
}

// HasPreparationTime returns a boolean if a field has been set.
func (o *Activity) HasPreparationTime() bool {
	if o != nil && !IsNil(o.PreparationTime) {
		return true
	}

	return false
}

// SetPreparationTime gets a reference to the given int64 and assigns it to the PreparationTime field.
func (o *Activity) SetPreparationTime(v int64) {
	o.PreparationTime = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *Activity) GetDistance() int64 {
	if o == nil || IsNil(o.Distance) {
		var ret int64
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDistanceOk() (*int64, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *Activity) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int64 and assigns it to the Distance field.
func (o *Activity) SetDistance(v int64) {
	o.Distance = &v
}

// GetDrivingTime returns the DrivingTime field value if set, zero value otherwise.
func (o *Activity) GetDrivingTime() int64 {
	if o == nil || IsNil(o.DrivingTime) {
		var ret int64
		return ret
	}
	return *o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetDrivingTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.DrivingTime) {
		return nil, false
	}
	return o.DrivingTime, true
}

// HasDrivingTime returns a boolean if a field has been set.
func (o *Activity) HasDrivingTime() bool {
	if o != nil && !IsNil(o.DrivingTime) {
		return true
	}

	return false
}

// SetDrivingTime gets a reference to the given int64 and assigns it to the DrivingTime field.
func (o *Activity) SetDrivingTime(v int64) {
	o.DrivingTime = &v
}

// GetLoadBefore returns the LoadBefore field value if set, zero value otherwise.
func (o *Activity) GetLoadBefore() []int32 {
	if o == nil || IsNil(o.LoadBefore) {
		var ret []int32
		return ret
	}
	return o.LoadBefore
}

// GetLoadBeforeOk returns a tuple with the LoadBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetLoadBeforeOk() ([]int32, bool) {
	if o == nil || IsNil(o.LoadBefore) {
		return nil, false
	}
	return o.LoadBefore, true
}

// HasLoadBefore returns a boolean if a field has been set.
func (o *Activity) HasLoadBefore() bool {
	if o != nil && !IsNil(o.LoadBefore) {
		return true
	}

	return false
}

// SetLoadBefore gets a reference to the given []int32 and assigns it to the LoadBefore field.
func (o *Activity) SetLoadBefore(v []int32) {
	o.LoadBefore = v
}

// GetLoadAfter returns the LoadAfter field value if set, zero value otherwise.
func (o *Activity) GetLoadAfter() []int32 {
	if o == nil || IsNil(o.LoadAfter) {
		var ret []int32
		return ret
	}
	return o.LoadAfter
}

// GetLoadAfterOk returns a tuple with the LoadAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Activity) GetLoadAfterOk() ([]int32, bool) {
	if o == nil || IsNil(o.LoadAfter) {
		return nil, false
	}
	return o.LoadAfter, true
}

// HasLoadAfter returns a boolean if a field has been set.
func (o *Activity) HasLoadAfter() bool {
	if o != nil && !IsNil(o.LoadAfter) {
		return true
	}

	return false
}

// SetLoadAfter gets a reference to the given []int32 and assigns it to the LoadAfter field.
func (o *Activity) SetLoadAfter(v []int32) {
	o.LoadAfter = v
}

func (o Activity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Activity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocationId) {
		toSerialize["location_id"] = o.LocationId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.ArrTime) {
		toSerialize["arr_time"] = o.ArrTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.EndDateTime) {
		toSerialize["end_date_time"] = o.EndDateTime
	}
	if !IsNil(o.ArrDateTime) {
		toSerialize["arr_date_time"] = o.ArrDateTime
	}
	if !IsNil(o.WaitingTime) {
		toSerialize["waiting_time"] = o.WaitingTime
	}
	if !IsNil(o.PreparationTime) {
		toSerialize["preparation_time"] = o.PreparationTime
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.DrivingTime) {
		toSerialize["driving_time"] = o.DrivingTime
	}
	if !IsNil(o.LoadBefore) {
		toSerialize["load_before"] = o.LoadBefore
	}
	if !IsNil(o.LoadAfter) {
		toSerialize["load_after"] = o.LoadAfter
	}
	return toSerialize, nil
}

type NullableActivity struct {
	value *Activity
	isSet bool
}

func (v NullableActivity) Get() *Activity {
	return v.value
}

func (v *NullableActivity) Set(val *Activity) {
	v.value = val
	v.isSet = true
}

func (v NullableActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivity(val *Activity) *NullableActivity {
	return &NullableActivity{value: val, isSet: true}
}

func (v NullableActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


