/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Routing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Routing{}

// Routing This contains all routing specific configurations.
type Routing struct {
	// It lets you specify whether the API should provide you with route geometries for vehicle routes or not. Thus, you do not need to do extra routing to get the polyline for each route.
	CalcPoints *bool `json:"calc_points,omitempty"`
	// indicates whether historical traffic information should be considered
	ConsiderTraffic *bool `json:"consider_traffic,omitempty"`
	// specifies the data provider, read more about it [here](#tag/Map-Data-and-Routing-Profiles).
	NetworkDataProvider *string `json:"network_data_provider,omitempty"`
	// In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address).
	CurbsideStrictness *string `json:"curbside_strictness,omitempty"`
	// indicates whether matrix calculation should fail fast when points cannot be connected
	FailFast *bool `json:"fail_fast,omitempty"`
	// Indicates whether a solution includes snapped waypoints. In contrary to the address coordinate a snapped waypoint is the access point to the (road) network.
	ReturnSnappedWaypoints *bool `json:"return_snapped_waypoints,omitempty"`
	// Optional parameter. 'Snapping' is the process of finding the closest road location for GPS coordinates provided in the `points` array. The `snap_preventions` array allows you to prevent snapping to specific types of roads. For example, if the array includes `bridge`, then the routing engine will avoid snapping to a bridge, even if it is the closest road for the given point. Note that once snapped the routing algorithm can still route over bridges (or the other values). To avoid this you need to use the `custom_model`.
	SnapPreventions []string `json:"snap_preventions,omitempty"`
}

// NewRouting instantiates a new Routing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouting() *Routing {
	this := Routing{}
	var calcPoints bool = false
	this.CalcPoints = &calcPoints
	var considerTraffic bool = false
	this.ConsiderTraffic = &considerTraffic
	var networkDataProvider string = "openstreetmap"
	this.NetworkDataProvider = &networkDataProvider
	var curbsideStrictness string = "soft"
	this.CurbsideStrictness = &curbsideStrictness
	var failFast bool = true
	this.FailFast = &failFast
	var returnSnappedWaypoints bool = false
	this.ReturnSnappedWaypoints = &returnSnappedWaypoints
	return &this
}

// NewRoutingWithDefaults instantiates a new Routing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingWithDefaults() *Routing {
	this := Routing{}
	var calcPoints bool = false
	this.CalcPoints = &calcPoints
	var considerTraffic bool = false
	this.ConsiderTraffic = &considerTraffic
	var networkDataProvider string = "openstreetmap"
	this.NetworkDataProvider = &networkDataProvider
	var curbsideStrictness string = "soft"
	this.CurbsideStrictness = &curbsideStrictness
	var failFast bool = true
	this.FailFast = &failFast
	var returnSnappedWaypoints bool = false
	this.ReturnSnappedWaypoints = &returnSnappedWaypoints
	return &this
}

// GetCalcPoints returns the CalcPoints field value if set, zero value otherwise.
func (o *Routing) GetCalcPoints() bool {
	if o == nil || IsNil(o.CalcPoints) {
		var ret bool
		return ret
	}
	return *o.CalcPoints
}

// GetCalcPointsOk returns a tuple with the CalcPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetCalcPointsOk() (*bool, bool) {
	if o == nil || IsNil(o.CalcPoints) {
		return nil, false
	}
	return o.CalcPoints, true
}

// HasCalcPoints returns a boolean if a field has been set.
func (o *Routing) HasCalcPoints() bool {
	if o != nil && !IsNil(o.CalcPoints) {
		return true
	}

	return false
}

// SetCalcPoints gets a reference to the given bool and assigns it to the CalcPoints field.
func (o *Routing) SetCalcPoints(v bool) {
	o.CalcPoints = &v
}

// GetConsiderTraffic returns the ConsiderTraffic field value if set, zero value otherwise.
func (o *Routing) GetConsiderTraffic() bool {
	if o == nil || IsNil(o.ConsiderTraffic) {
		var ret bool
		return ret
	}
	return *o.ConsiderTraffic
}

// GetConsiderTrafficOk returns a tuple with the ConsiderTraffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetConsiderTrafficOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsiderTraffic) {
		return nil, false
	}
	return o.ConsiderTraffic, true
}

// HasConsiderTraffic returns a boolean if a field has been set.
func (o *Routing) HasConsiderTraffic() bool {
	if o != nil && !IsNil(o.ConsiderTraffic) {
		return true
	}

	return false
}

// SetConsiderTraffic gets a reference to the given bool and assigns it to the ConsiderTraffic field.
func (o *Routing) SetConsiderTraffic(v bool) {
	o.ConsiderTraffic = &v
}

// GetNetworkDataProvider returns the NetworkDataProvider field value if set, zero value otherwise.
func (o *Routing) GetNetworkDataProvider() string {
	if o == nil || IsNil(o.NetworkDataProvider) {
		var ret string
		return ret
	}
	return *o.NetworkDataProvider
}

// GetNetworkDataProviderOk returns a tuple with the NetworkDataProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetNetworkDataProviderOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkDataProvider) {
		return nil, false
	}
	return o.NetworkDataProvider, true
}

// HasNetworkDataProvider returns a boolean if a field has been set.
func (o *Routing) HasNetworkDataProvider() bool {
	if o != nil && !IsNil(o.NetworkDataProvider) {
		return true
	}

	return false
}

// SetNetworkDataProvider gets a reference to the given string and assigns it to the NetworkDataProvider field.
func (o *Routing) SetNetworkDataProvider(v string) {
	o.NetworkDataProvider = &v
}

// GetCurbsideStrictness returns the CurbsideStrictness field value if set, zero value otherwise.
func (o *Routing) GetCurbsideStrictness() string {
	if o == nil || IsNil(o.CurbsideStrictness) {
		var ret string
		return ret
	}
	return *o.CurbsideStrictness
}

// GetCurbsideStrictnessOk returns a tuple with the CurbsideStrictness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetCurbsideStrictnessOk() (*string, bool) {
	if o == nil || IsNil(o.CurbsideStrictness) {
		return nil, false
	}
	return o.CurbsideStrictness, true
}

// HasCurbsideStrictness returns a boolean if a field has been set.
func (o *Routing) HasCurbsideStrictness() bool {
	if o != nil && !IsNil(o.CurbsideStrictness) {
		return true
	}

	return false
}

// SetCurbsideStrictness gets a reference to the given string and assigns it to the CurbsideStrictness field.
func (o *Routing) SetCurbsideStrictness(v string) {
	o.CurbsideStrictness = &v
}

// GetFailFast returns the FailFast field value if set, zero value otherwise.
func (o *Routing) GetFailFast() bool {
	if o == nil || IsNil(o.FailFast) {
		var ret bool
		return ret
	}
	return *o.FailFast
}

// GetFailFastOk returns a tuple with the FailFast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetFailFastOk() (*bool, bool) {
	if o == nil || IsNil(o.FailFast) {
		return nil, false
	}
	return o.FailFast, true
}

// HasFailFast returns a boolean if a field has been set.
func (o *Routing) HasFailFast() bool {
	if o != nil && !IsNil(o.FailFast) {
		return true
	}

	return false
}

// SetFailFast gets a reference to the given bool and assigns it to the FailFast field.
func (o *Routing) SetFailFast(v bool) {
	o.FailFast = &v
}

// GetReturnSnappedWaypoints returns the ReturnSnappedWaypoints field value if set, zero value otherwise.
func (o *Routing) GetReturnSnappedWaypoints() bool {
	if o == nil || IsNil(o.ReturnSnappedWaypoints) {
		var ret bool
		return ret
	}
	return *o.ReturnSnappedWaypoints
}

// GetReturnSnappedWaypointsOk returns a tuple with the ReturnSnappedWaypoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetReturnSnappedWaypointsOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnSnappedWaypoints) {
		return nil, false
	}
	return o.ReturnSnappedWaypoints, true
}

// HasReturnSnappedWaypoints returns a boolean if a field has been set.
func (o *Routing) HasReturnSnappedWaypoints() bool {
	if o != nil && !IsNil(o.ReturnSnappedWaypoints) {
		return true
	}

	return false
}

// SetReturnSnappedWaypoints gets a reference to the given bool and assigns it to the ReturnSnappedWaypoints field.
func (o *Routing) SetReturnSnappedWaypoints(v bool) {
	o.ReturnSnappedWaypoints = &v
}

// GetSnapPreventions returns the SnapPreventions field value if set, zero value otherwise.
func (o *Routing) GetSnapPreventions() []string {
	if o == nil || IsNil(o.SnapPreventions) {
		var ret []string
		return ret
	}
	return o.SnapPreventions
}

// GetSnapPreventionsOk returns a tuple with the SnapPreventions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Routing) GetSnapPreventionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SnapPreventions) {
		return nil, false
	}
	return o.SnapPreventions, true
}

// HasSnapPreventions returns a boolean if a field has been set.
func (o *Routing) HasSnapPreventions() bool {
	if o != nil && !IsNil(o.SnapPreventions) {
		return true
	}

	return false
}

// SetSnapPreventions gets a reference to the given []string and assigns it to the SnapPreventions field.
func (o *Routing) SetSnapPreventions(v []string) {
	o.SnapPreventions = v
}

func (o Routing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Routing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalcPoints) {
		toSerialize["calc_points"] = o.CalcPoints
	}
	if !IsNil(o.ConsiderTraffic) {
		toSerialize["consider_traffic"] = o.ConsiderTraffic
	}
	if !IsNil(o.NetworkDataProvider) {
		toSerialize["network_data_provider"] = o.NetworkDataProvider
	}
	if !IsNil(o.CurbsideStrictness) {
		toSerialize["curbside_strictness"] = o.CurbsideStrictness
	}
	if !IsNil(o.FailFast) {
		toSerialize["fail_fast"] = o.FailFast
	}
	if !IsNil(o.ReturnSnappedWaypoints) {
		toSerialize["return_snapped_waypoints"] = o.ReturnSnappedWaypoints
	}
	if !IsNil(o.SnapPreventions) {
		toSerialize["snap_preventions"] = o.SnapPreventions
	}
	return toSerialize, nil
}

type NullableRouting struct {
	value *Routing
	isSet bool
}

func (v NullableRouting) Get() *Routing {
	return v.value
}

func (v *NullableRouting) Set(val *Routing) {
	v.value = val
	v.isSet = true
}

func (v NullableRouting) IsSet() bool {
	return v.isSet
}

func (v *NullableRouting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouting(val *Routing) *NullableRouting {
	return &NullableRouting{value: val, isSet: true}
}

func (v NullableRouting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


