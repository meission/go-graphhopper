/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatrixResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatrixResponse{}

// MatrixResponse struct for MatrixResponse
type MatrixResponse struct {
	// The distance matrix for the specified points in the same order as the time matrix. The distances are in meters. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
	Distances [][]float32 `json:"distances,omitempty"`
	// The time matrix for the specified points in the order [[from1->to1, from1->to2, ...], [from2->to1, from2->to2, ...], ...]. The times are in seconds. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
	Times [][]float32 `json:"times,omitempty"`
	// The weight matrix for the specified points in the same order as the time matrix. The weights for different vehicle profiles can have a different unit but the weights array is perfectly suited as input for Vehicle Routing Problems as it is currently faster to calculate. If `fail_fast=false` the matrix will contain `null` for connections that could not be found.
	Weights [][]float64 `json:"weights,omitempty"`
	Info *ResponseInfo `json:"info,omitempty"`
	// Optional. Additional response data.
	Hints []MatrixResponseHintsInner `json:"hints,omitempty"`
}

// NewMatrixResponse instantiates a new MatrixResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatrixResponse() *MatrixResponse {
	this := MatrixResponse{}
	return &this
}

// NewMatrixResponseWithDefaults instantiates a new MatrixResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatrixResponseWithDefaults() *MatrixResponse {
	this := MatrixResponse{}
	return &this
}

// GetDistances returns the Distances field value if set, zero value otherwise.
func (o *MatrixResponse) GetDistances() [][]float32 {
	if o == nil || IsNil(o.Distances) {
		var ret [][]float32
		return ret
	}
	return o.Distances
}

// GetDistancesOk returns a tuple with the Distances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatrixResponse) GetDistancesOk() ([][]float32, bool) {
	if o == nil || IsNil(o.Distances) {
		return nil, false
	}
	return o.Distances, true
}

// HasDistances returns a boolean if a field has been set.
func (o *MatrixResponse) HasDistances() bool {
	if o != nil && !IsNil(o.Distances) {
		return true
	}

	return false
}

// SetDistances gets a reference to the given [][]float32 and assigns it to the Distances field.
func (o *MatrixResponse) SetDistances(v [][]float32) {
	o.Distances = v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *MatrixResponse) GetTimes() [][]float32 {
	if o == nil || IsNil(o.Times) {
		var ret [][]float32
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatrixResponse) GetTimesOk() ([][]float32, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *MatrixResponse) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given [][]float32 and assigns it to the Times field.
func (o *MatrixResponse) SetTimes(v [][]float32) {
	o.Times = v
}

// GetWeights returns the Weights field value if set, zero value otherwise.
func (o *MatrixResponse) GetWeights() [][]float64 {
	if o == nil || IsNil(o.Weights) {
		var ret [][]float64
		return ret
	}
	return o.Weights
}

// GetWeightsOk returns a tuple with the Weights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatrixResponse) GetWeightsOk() ([][]float64, bool) {
	if o == nil || IsNil(o.Weights) {
		return nil, false
	}
	return o.Weights, true
}

// HasWeights returns a boolean if a field has been set.
func (o *MatrixResponse) HasWeights() bool {
	if o != nil && !IsNil(o.Weights) {
		return true
	}

	return false
}

// SetWeights gets a reference to the given [][]float64 and assigns it to the Weights field.
func (o *MatrixResponse) SetWeights(v [][]float64) {
	o.Weights = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *MatrixResponse) GetInfo() ResponseInfo {
	if o == nil || IsNil(o.Info) {
		var ret ResponseInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatrixResponse) GetInfoOk() (*ResponseInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *MatrixResponse) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given ResponseInfo and assigns it to the Info field.
func (o *MatrixResponse) SetInfo(v ResponseInfo) {
	o.Info = &v
}

// GetHints returns the Hints field value if set, zero value otherwise.
func (o *MatrixResponse) GetHints() []MatrixResponseHintsInner {
	if o == nil || IsNil(o.Hints) {
		var ret []MatrixResponseHintsInner
		return ret
	}
	return o.Hints
}

// GetHintsOk returns a tuple with the Hints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatrixResponse) GetHintsOk() ([]MatrixResponseHintsInner, bool) {
	if o == nil || IsNil(o.Hints) {
		return nil, false
	}
	return o.Hints, true
}

// HasHints returns a boolean if a field has been set.
func (o *MatrixResponse) HasHints() bool {
	if o != nil && !IsNil(o.Hints) {
		return true
	}

	return false
}

// SetHints gets a reference to the given []MatrixResponseHintsInner and assigns it to the Hints field.
func (o *MatrixResponse) SetHints(v []MatrixResponseHintsInner) {
	o.Hints = v
}

func (o MatrixResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatrixResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distances) {
		toSerialize["distances"] = o.Distances
	}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	if !IsNil(o.Weights) {
		toSerialize["weights"] = o.Weights
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Hints) {
		toSerialize["hints"] = o.Hints
	}
	return toSerialize, nil
}

type NullableMatrixResponse struct {
	value *MatrixResponse
	isSet bool
}

func (v NullableMatrixResponse) Get() *MatrixResponse {
	return v.value
}

func (v *NullableMatrixResponse) Set(val *MatrixResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMatrixResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMatrixResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatrixResponse(val *MatrixResponse) *NullableMatrixResponse {
	return &NullableMatrixResponse{value: val, isSet: true}
}

func (v NullableMatrixResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatrixResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


