/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Shipment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Shipment{}

// Shipment struct for Shipment
type Shipment struct {
	// Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id.
	Id string `json:"id"`
	// Meaningful name for shipment, e.g. \"pickup and deliver pizza to Peter\".
	Name *string `json:"name,omitempty"`
	// Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.
	Priority *int32 `json:"priority,omitempty"`
	Pickup Stop `json:"pickup"`
	Delivery Stop `json:"delivery"`
	// Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.
	Size []int32 `json:"size,omitempty"`
	// Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.
	RequiredSkills []string `json:"required_skills,omitempty"`
	// Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by \"technician_peter\" OR \"technician_stefan\" specify this as follows: [\"technician_peter\",\"technician_stefan\"].
	AllowedVehicles []string `json:"allowed_vehicles,omitempty"`
	// Specifies an array of disallowed vehicles, i.e. array of vehicle ids.
	DisallowedVehicles []string `json:"disallowed_vehicles,omitempty"`
	// Specifies an array of preferred vehicles.
	PreferredVehicles []PreferredVehicle `json:"preferred_vehicles,omitempty"`
	// Specifies the maximum time in seconds a shipment can stay in the vehicle.
	MaxTimeInVehicle *int64 `json:"max_time_in_vehicle,omitempty"`
}

type _Shipment Shipment

// NewShipment instantiates a new Shipment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipment(id string, pickup Stop, delivery Stop) *Shipment {
	this := Shipment{}
	this.Id = id
	var priority int32 = 2
	this.Priority = &priority
	this.Pickup = pickup
	this.Delivery = delivery
	var maxTimeInVehicle int64 = 9223372036854775807
	this.MaxTimeInVehicle = &maxTimeInVehicle
	return &this
}

// NewShipmentWithDefaults instantiates a new Shipment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentWithDefaults() *Shipment {
	this := Shipment{}
	var priority int32 = 2
	this.Priority = &priority
	var maxTimeInVehicle int64 = 9223372036854775807
	this.MaxTimeInVehicle = &maxTimeInVehicle
	return &this
}

// GetId returns the Id field value
func (o *Shipment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Shipment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Shipment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Shipment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Shipment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Shipment) SetName(v string) {
	o.Name = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Shipment) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Shipment) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Shipment) SetPriority(v int32) {
	o.Priority = &v
}

// GetPickup returns the Pickup field value
func (o *Shipment) GetPickup() Stop {
	if o == nil {
		var ret Stop
		return ret
	}

	return o.Pickup
}

// GetPickupOk returns a tuple with the Pickup field value
// and a boolean to check if the value has been set.
func (o *Shipment) GetPickupOk() (*Stop, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pickup, true
}

// SetPickup sets field value
func (o *Shipment) SetPickup(v Stop) {
	o.Pickup = v
}

// GetDelivery returns the Delivery field value
func (o *Shipment) GetDelivery() Stop {
	if o == nil {
		var ret Stop
		return ret
	}

	return o.Delivery
}

// GetDeliveryOk returns a tuple with the Delivery field value
// and a boolean to check if the value has been set.
func (o *Shipment) GetDeliveryOk() (*Stop, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delivery, true
}

// SetDelivery sets field value
func (o *Shipment) SetDelivery(v Stop) {
	o.Delivery = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Shipment) GetSize() []int32 {
	if o == nil || IsNil(o.Size) {
		var ret []int32
		return ret
	}
	return o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetSizeOk() ([]int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Shipment) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given []int32 and assigns it to the Size field.
func (o *Shipment) SetSize(v []int32) {
	o.Size = v
}

// GetRequiredSkills returns the RequiredSkills field value if set, zero value otherwise.
func (o *Shipment) GetRequiredSkills() []string {
	if o == nil || IsNil(o.RequiredSkills) {
		var ret []string
		return ret
	}
	return o.RequiredSkills
}

// GetRequiredSkillsOk returns a tuple with the RequiredSkills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetRequiredSkillsOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredSkills) {
		return nil, false
	}
	return o.RequiredSkills, true
}

// HasRequiredSkills returns a boolean if a field has been set.
func (o *Shipment) HasRequiredSkills() bool {
	if o != nil && !IsNil(o.RequiredSkills) {
		return true
	}

	return false
}

// SetRequiredSkills gets a reference to the given []string and assigns it to the RequiredSkills field.
func (o *Shipment) SetRequiredSkills(v []string) {
	o.RequiredSkills = v
}

// GetAllowedVehicles returns the AllowedVehicles field value if set, zero value otherwise.
func (o *Shipment) GetAllowedVehicles() []string {
	if o == nil || IsNil(o.AllowedVehicles) {
		var ret []string
		return ret
	}
	return o.AllowedVehicles
}

// GetAllowedVehiclesOk returns a tuple with the AllowedVehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetAllowedVehiclesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedVehicles) {
		return nil, false
	}
	return o.AllowedVehicles, true
}

// HasAllowedVehicles returns a boolean if a field has been set.
func (o *Shipment) HasAllowedVehicles() bool {
	if o != nil && !IsNil(o.AllowedVehicles) {
		return true
	}

	return false
}

// SetAllowedVehicles gets a reference to the given []string and assigns it to the AllowedVehicles field.
func (o *Shipment) SetAllowedVehicles(v []string) {
	o.AllowedVehicles = v
}

// GetDisallowedVehicles returns the DisallowedVehicles field value if set, zero value otherwise.
func (o *Shipment) GetDisallowedVehicles() []string {
	if o == nil || IsNil(o.DisallowedVehicles) {
		var ret []string
		return ret
	}
	return o.DisallowedVehicles
}

// GetDisallowedVehiclesOk returns a tuple with the DisallowedVehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetDisallowedVehiclesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisallowedVehicles) {
		return nil, false
	}
	return o.DisallowedVehicles, true
}

// HasDisallowedVehicles returns a boolean if a field has been set.
func (o *Shipment) HasDisallowedVehicles() bool {
	if o != nil && !IsNil(o.DisallowedVehicles) {
		return true
	}

	return false
}

// SetDisallowedVehicles gets a reference to the given []string and assigns it to the DisallowedVehicles field.
func (o *Shipment) SetDisallowedVehicles(v []string) {
	o.DisallowedVehicles = v
}

// GetPreferredVehicles returns the PreferredVehicles field value if set, zero value otherwise.
func (o *Shipment) GetPreferredVehicles() []PreferredVehicle {
	if o == nil || IsNil(o.PreferredVehicles) {
		var ret []PreferredVehicle
		return ret
	}
	return o.PreferredVehicles
}

// GetPreferredVehiclesOk returns a tuple with the PreferredVehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetPreferredVehiclesOk() ([]PreferredVehicle, bool) {
	if o == nil || IsNil(o.PreferredVehicles) {
		return nil, false
	}
	return o.PreferredVehicles, true
}

// HasPreferredVehicles returns a boolean if a field has been set.
func (o *Shipment) HasPreferredVehicles() bool {
	if o != nil && !IsNil(o.PreferredVehicles) {
		return true
	}

	return false
}

// SetPreferredVehicles gets a reference to the given []PreferredVehicle and assigns it to the PreferredVehicles field.
func (o *Shipment) SetPreferredVehicles(v []PreferredVehicle) {
	o.PreferredVehicles = v
}

// GetMaxTimeInVehicle returns the MaxTimeInVehicle field value if set, zero value otherwise.
func (o *Shipment) GetMaxTimeInVehicle() int64 {
	if o == nil || IsNil(o.MaxTimeInVehicle) {
		var ret int64
		return ret
	}
	return *o.MaxTimeInVehicle
}

// GetMaxTimeInVehicleOk returns a tuple with the MaxTimeInVehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shipment) GetMaxTimeInVehicleOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxTimeInVehicle) {
		return nil, false
	}
	return o.MaxTimeInVehicle, true
}

// HasMaxTimeInVehicle returns a boolean if a field has been set.
func (o *Shipment) HasMaxTimeInVehicle() bool {
	if o != nil && !IsNil(o.MaxTimeInVehicle) {
		return true
	}

	return false
}

// SetMaxTimeInVehicle gets a reference to the given int64 and assigns it to the MaxTimeInVehicle field.
func (o *Shipment) SetMaxTimeInVehicle(v int64) {
	o.MaxTimeInVehicle = &v
}

func (o Shipment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Shipment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	toSerialize["pickup"] = o.Pickup
	toSerialize["delivery"] = o.Delivery
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.RequiredSkills) {
		toSerialize["required_skills"] = o.RequiredSkills
	}
	if !IsNil(o.AllowedVehicles) {
		toSerialize["allowed_vehicles"] = o.AllowedVehicles
	}
	if !IsNil(o.DisallowedVehicles) {
		toSerialize["disallowed_vehicles"] = o.DisallowedVehicles
	}
	if !IsNil(o.PreferredVehicles) {
		toSerialize["preferred_vehicles"] = o.PreferredVehicles
	}
	if !IsNil(o.MaxTimeInVehicle) {
		toSerialize["max_time_in_vehicle"] = o.MaxTimeInVehicle
	}
	return toSerialize, nil
}

func (o *Shipment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"pickup",
		"delivery",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShipment := _Shipment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShipment)

	if err != nil {
		return err
	}

	*o = Shipment(varShipment)

	return err
}

type NullableShipment struct {
	value *Shipment
	isSet bool
}

func (v NullableShipment) Get() *Shipment {
	return v.value
}

func (v *NullableShipment) Set(val *Shipment) {
	v.value = val
	v.isSet = true
}

func (v NullableShipment) IsSet() bool {
	return v.isSet
}

func (v *NullableShipment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipment(val *Shipment) *NullableShipment {
	return &NullableShipment{value: val, isSet: true}
}

func (v NullableShipment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


