/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VehicleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleType{}

// VehicleType struct for VehicleType
type VehicleType struct {
	// Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.
	TypeId string `json:"type_id"`
	// The routing profile. It determines the network, speed and other physical attributes used when computing the route. See the section about [routing profiles](#tag/Map-Data-and-Routing-Profiles) for more details and valid profile values.
	Profile *string `json:"profile,omitempty"`
	// Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300.
	Capacity []int32 `json:"capacity,omitempty"`
	// Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5.
	SpeedFactor *float64 `json:"speed_factor,omitempty"`
	// Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5.
	ServiceTimeFactor *float64 `json:"service_time_factor,omitempty"`
	// **_BETA feature_**! Cost parameter per distance unit, here meter is used
	CostPerMeter *float64 `json:"cost_per_meter,omitempty"`
	// **_BETA feature_**! Cost parameter per time unit, here second is used
	CostPerSecond *float64 `json:"cost_per_second,omitempty"`
	// **_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle
	CostPerActivation *float64 `json:"cost_per_activation,omitempty"`
	// Specifies whether traffic should be considered. if \"tomtom\" is used and this is false, free flow travel times from \"tomtom\" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for \"openstreetmap\", thus, setting this true has no effect at all.
	ConsiderTraffic *bool `json:"consider_traffic,omitempty"`
	// Specifies the network data provider. Either use [`openstreetmap`](#tag/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#tag/Map-Data-and-Routing-Profiles/TomTom) (add-on required).
	NetworkDataProvider *string `json:"network_data_provider,omitempty"`
}

type _VehicleType VehicleType

// NewVehicleType instantiates a new VehicleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleType(typeId string) *VehicleType {
	this := VehicleType{}
	this.TypeId = typeId
	var profile string = "car"
	this.Profile = &profile
	var speedFactor float64 = 1
	this.SpeedFactor = &speedFactor
	var serviceTimeFactor float64 = 1
	this.ServiceTimeFactor = &serviceTimeFactor
	var considerTraffic bool = false
	this.ConsiderTraffic = &considerTraffic
	var networkDataProvider string = "openstreetmap"
	this.NetworkDataProvider = &networkDataProvider
	return &this
}

// NewVehicleTypeWithDefaults instantiates a new VehicleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleTypeWithDefaults() *VehicleType {
	this := VehicleType{}
	var profile string = "car"
	this.Profile = &profile
	var speedFactor float64 = 1
	this.SpeedFactor = &speedFactor
	var serviceTimeFactor float64 = 1
	this.ServiceTimeFactor = &serviceTimeFactor
	var considerTraffic bool = false
	this.ConsiderTraffic = &considerTraffic
	var networkDataProvider string = "openstreetmap"
	this.NetworkDataProvider = &networkDataProvider
	return &this
}

// GetTypeId returns the TypeId field value
func (o *VehicleType) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *VehicleType) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *VehicleType) SetTypeId(v string) {
	o.TypeId = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *VehicleType) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *VehicleType) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *VehicleType) SetProfile(v string) {
	o.Profile = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *VehicleType) GetCapacity() []int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret []int32
		return ret
	}
	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetCapacityOk() ([]int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *VehicleType) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given []int32 and assigns it to the Capacity field.
func (o *VehicleType) SetCapacity(v []int32) {
	o.Capacity = v
}

// GetSpeedFactor returns the SpeedFactor field value if set, zero value otherwise.
func (o *VehicleType) GetSpeedFactor() float64 {
	if o == nil || IsNil(o.SpeedFactor) {
		var ret float64
		return ret
	}
	return *o.SpeedFactor
}

// GetSpeedFactorOk returns a tuple with the SpeedFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetSpeedFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.SpeedFactor) {
		return nil, false
	}
	return o.SpeedFactor, true
}

// HasSpeedFactor returns a boolean if a field has been set.
func (o *VehicleType) HasSpeedFactor() bool {
	if o != nil && !IsNil(o.SpeedFactor) {
		return true
	}

	return false
}

// SetSpeedFactor gets a reference to the given float64 and assigns it to the SpeedFactor field.
func (o *VehicleType) SetSpeedFactor(v float64) {
	o.SpeedFactor = &v
}

// GetServiceTimeFactor returns the ServiceTimeFactor field value if set, zero value otherwise.
func (o *VehicleType) GetServiceTimeFactor() float64 {
	if o == nil || IsNil(o.ServiceTimeFactor) {
		var ret float64
		return ret
	}
	return *o.ServiceTimeFactor
}

// GetServiceTimeFactorOk returns a tuple with the ServiceTimeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetServiceTimeFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.ServiceTimeFactor) {
		return nil, false
	}
	return o.ServiceTimeFactor, true
}

// HasServiceTimeFactor returns a boolean if a field has been set.
func (o *VehicleType) HasServiceTimeFactor() bool {
	if o != nil && !IsNil(o.ServiceTimeFactor) {
		return true
	}

	return false
}

// SetServiceTimeFactor gets a reference to the given float64 and assigns it to the ServiceTimeFactor field.
func (o *VehicleType) SetServiceTimeFactor(v float64) {
	o.ServiceTimeFactor = &v
}

// GetCostPerMeter returns the CostPerMeter field value if set, zero value otherwise.
func (o *VehicleType) GetCostPerMeter() float64 {
	if o == nil || IsNil(o.CostPerMeter) {
		var ret float64
		return ret
	}
	return *o.CostPerMeter
}

// GetCostPerMeterOk returns a tuple with the CostPerMeter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetCostPerMeterOk() (*float64, bool) {
	if o == nil || IsNil(o.CostPerMeter) {
		return nil, false
	}
	return o.CostPerMeter, true
}

// HasCostPerMeter returns a boolean if a field has been set.
func (o *VehicleType) HasCostPerMeter() bool {
	if o != nil && !IsNil(o.CostPerMeter) {
		return true
	}

	return false
}

// SetCostPerMeter gets a reference to the given float64 and assigns it to the CostPerMeter field.
func (o *VehicleType) SetCostPerMeter(v float64) {
	o.CostPerMeter = &v
}

// GetCostPerSecond returns the CostPerSecond field value if set, zero value otherwise.
func (o *VehicleType) GetCostPerSecond() float64 {
	if o == nil || IsNil(o.CostPerSecond) {
		var ret float64
		return ret
	}
	return *o.CostPerSecond
}

// GetCostPerSecondOk returns a tuple with the CostPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetCostPerSecondOk() (*float64, bool) {
	if o == nil || IsNil(o.CostPerSecond) {
		return nil, false
	}
	return o.CostPerSecond, true
}

// HasCostPerSecond returns a boolean if a field has been set.
func (o *VehicleType) HasCostPerSecond() bool {
	if o != nil && !IsNil(o.CostPerSecond) {
		return true
	}

	return false
}

// SetCostPerSecond gets a reference to the given float64 and assigns it to the CostPerSecond field.
func (o *VehicleType) SetCostPerSecond(v float64) {
	o.CostPerSecond = &v
}

// GetCostPerActivation returns the CostPerActivation field value if set, zero value otherwise.
func (o *VehicleType) GetCostPerActivation() float64 {
	if o == nil || IsNil(o.CostPerActivation) {
		var ret float64
		return ret
	}
	return *o.CostPerActivation
}

// GetCostPerActivationOk returns a tuple with the CostPerActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetCostPerActivationOk() (*float64, bool) {
	if o == nil || IsNil(o.CostPerActivation) {
		return nil, false
	}
	return o.CostPerActivation, true
}

// HasCostPerActivation returns a boolean if a field has been set.
func (o *VehicleType) HasCostPerActivation() bool {
	if o != nil && !IsNil(o.CostPerActivation) {
		return true
	}

	return false
}

// SetCostPerActivation gets a reference to the given float64 and assigns it to the CostPerActivation field.
func (o *VehicleType) SetCostPerActivation(v float64) {
	o.CostPerActivation = &v
}

// GetConsiderTraffic returns the ConsiderTraffic field value if set, zero value otherwise.
func (o *VehicleType) GetConsiderTraffic() bool {
	if o == nil || IsNil(o.ConsiderTraffic) {
		var ret bool
		return ret
	}
	return *o.ConsiderTraffic
}

// GetConsiderTrafficOk returns a tuple with the ConsiderTraffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetConsiderTrafficOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsiderTraffic) {
		return nil, false
	}
	return o.ConsiderTraffic, true
}

// HasConsiderTraffic returns a boolean if a field has been set.
func (o *VehicleType) HasConsiderTraffic() bool {
	if o != nil && !IsNil(o.ConsiderTraffic) {
		return true
	}

	return false
}

// SetConsiderTraffic gets a reference to the given bool and assigns it to the ConsiderTraffic field.
func (o *VehicleType) SetConsiderTraffic(v bool) {
	o.ConsiderTraffic = &v
}

// GetNetworkDataProvider returns the NetworkDataProvider field value if set, zero value otherwise.
func (o *VehicleType) GetNetworkDataProvider() string {
	if o == nil || IsNil(o.NetworkDataProvider) {
		var ret string
		return ret
	}
	return *o.NetworkDataProvider
}

// GetNetworkDataProviderOk returns a tuple with the NetworkDataProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleType) GetNetworkDataProviderOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkDataProvider) {
		return nil, false
	}
	return o.NetworkDataProvider, true
}

// HasNetworkDataProvider returns a boolean if a field has been set.
func (o *VehicleType) HasNetworkDataProvider() bool {
	if o != nil && !IsNil(o.NetworkDataProvider) {
		return true
	}

	return false
}

// SetNetworkDataProvider gets a reference to the given string and assigns it to the NetworkDataProvider field.
func (o *VehicleType) SetNetworkDataProvider(v string) {
	o.NetworkDataProvider = &v
}

func (o VehicleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type_id"] = o.TypeId
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.SpeedFactor) {
		toSerialize["speed_factor"] = o.SpeedFactor
	}
	if !IsNil(o.ServiceTimeFactor) {
		toSerialize["service_time_factor"] = o.ServiceTimeFactor
	}
	if !IsNil(o.CostPerMeter) {
		toSerialize["cost_per_meter"] = o.CostPerMeter
	}
	if !IsNil(o.CostPerSecond) {
		toSerialize["cost_per_second"] = o.CostPerSecond
	}
	if !IsNil(o.CostPerActivation) {
		toSerialize["cost_per_activation"] = o.CostPerActivation
	}
	if !IsNil(o.ConsiderTraffic) {
		toSerialize["consider_traffic"] = o.ConsiderTraffic
	}
	if !IsNil(o.NetworkDataProvider) {
		toSerialize["network_data_provider"] = o.NetworkDataProvider
	}
	return toSerialize, nil
}

func (o *VehicleType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleType := _VehicleType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleType)

	if err != nil {
		return err
	}

	*o = VehicleType(varVehicleType)

	return err
}

type NullableVehicleType struct {
	value *VehicleType
	isSet bool
}

func (v NullableVehicleType) Get() *VehicleType {
	return v.value
}

func (v *NullableVehicleType) Set(val *VehicleType) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleType) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleType(val *VehicleType) *NullableVehicleType {
	return &NullableVehicleType{value: val, isSet: true}
}

func (v NullableVehicleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


