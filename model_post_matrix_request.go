/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PostMatrixRequest - struct for PostMatrixRequest
type PostMatrixRequest struct {
	MatrixRequest *MatrixRequest
	SymmetricalMatrixRequest *SymmetricalMatrixRequest
}

// MatrixRequestAsPostMatrixRequest is a convenience function that returns MatrixRequest wrapped in PostMatrixRequest
func MatrixRequestAsPostMatrixRequest(v *MatrixRequest) PostMatrixRequest {
	return PostMatrixRequest{
		MatrixRequest: v,
	}
}

// SymmetricalMatrixRequestAsPostMatrixRequest is a convenience function that returns SymmetricalMatrixRequest wrapped in PostMatrixRequest
func SymmetricalMatrixRequestAsPostMatrixRequest(v *SymmetricalMatrixRequest) PostMatrixRequest {
	return PostMatrixRequest{
		SymmetricalMatrixRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostMatrixRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MatrixRequest
	err = newStrictDecoder(data).Decode(&dst.MatrixRequest)
	if err == nil {
		jsonMatrixRequest, _ := json.Marshal(dst.MatrixRequest)
		if string(jsonMatrixRequest) == "{}" { // empty struct
			dst.MatrixRequest = nil
		} else {
			if err = validator.Validate(dst.MatrixRequest); err != nil {
				dst.MatrixRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.MatrixRequest = nil
	}

	// try to unmarshal data into SymmetricalMatrixRequest
	err = newStrictDecoder(data).Decode(&dst.SymmetricalMatrixRequest)
	if err == nil {
		jsonSymmetricalMatrixRequest, _ := json.Marshal(dst.SymmetricalMatrixRequest)
		if string(jsonSymmetricalMatrixRequest) == "{}" { // empty struct
			dst.SymmetricalMatrixRequest = nil
		} else {
			if err = validator.Validate(dst.SymmetricalMatrixRequest); err != nil {
				dst.SymmetricalMatrixRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.SymmetricalMatrixRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MatrixRequest = nil
		dst.SymmetricalMatrixRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostMatrixRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostMatrixRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostMatrixRequest) MarshalJSON() ([]byte, error) {
	if src.MatrixRequest != nil {
		return json.Marshal(&src.MatrixRequest)
	}

	if src.SymmetricalMatrixRequest != nil {
		return json.Marshal(&src.SymmetricalMatrixRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostMatrixRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MatrixRequest != nil {
		return obj.MatrixRequest
	}

	if obj.SymmetricalMatrixRequest != nil {
		return obj.SymmetricalMatrixRequest
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PostMatrixRequest) GetActualInstanceValue() (interface{}) {
	if obj.MatrixRequest != nil {
		return *obj.MatrixRequest
	}

	if obj.SymmetricalMatrixRequest != nil {
		return *obj.SymmetricalMatrixRequest
	}

	// all schemas are nil
	return nil
}

type NullablePostMatrixRequest struct {
	value *PostMatrixRequest
	isSet bool
}

func (v NullablePostMatrixRequest) Get() *PostMatrixRequest {
	return v.value
}

func (v *NullablePostMatrixRequest) Set(val *PostMatrixRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostMatrixRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostMatrixRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostMatrixRequest(val *PostMatrixRequest) *NullablePostMatrixRequest {
	return &NullablePostMatrixRequest{value: val, isSet: true}
}

func (v NullablePostMatrixRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostMatrixRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


