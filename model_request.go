/*
GraphHopper Directions API

 Integrate A-to-B route planning, turn-by-turn navigation, route optimization, isochrone calculations, location clustering and other tools into your application.    ##### Authentication      1. [Sign up for GraphHopper](https://graphhopper.com/dashboard/#/signup)   2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)    Authenticate to the API by passing your key as a query parameter in every request.    ##### API Explorer    You can also try all API parts without registration in our [API explorer](https://explorer.graphhopper.com/).    ##### Client Libraries    To speed up development and make coding easier, we offer a [JavaScript client](https://github.com/graphhopper/directions-api-js-client) and a   [Java client](https://github.com/graphhopper/graphhopper/tree/master/client-hc).    ##### Optimize Response Speed    1. Reuse SSL/TLS sessions    You should utilize the SSL session to speed up responses after the initial response or use a library that does this. E.g. for Java the   [OkHttp library](https://square.github.io/okhttp/) automatically reuses SSL/TLS sessions and also the browser takes care of this automatically.   For python you can use the [`requests` library](https://requests.readthedocs.io/en/latest/user/advanced/): first you create a   session (`session = requests.Session()`) and then do requests only with this session instead of directly using \"requests\".    2. Bandwidth reduction    If you create your own client, make sure it supports http/2 and gzipped responses for best speed.   If you use the Matrix, the Route Optimization API or the  and want to solve large problems, we recommend you to reduce bandwidth   by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4) and specifying the header   as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error \"Request Entity Too Large\". 

API version: 1.0.0
Contact: support@graphhopper.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Request{}

// Request struct for Request
type Request struct {
	// Specifies the available vehicles.
	Vehicles []Vehicle `json:"vehicles,omitempty"`
	// Specifies the available vehicle types. These types can be assigned to vehicles.
	VehicleTypes []VehicleType `json:"vehicle_types,omitempty"`
	// Specifies the orders of the type \"service\". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.
	Services []Service `json:"services,omitempty"`
	// Specifies the available shipments. Each shipment consists of a pickup and a delivery. For a single shipment, the pickup must always occur before the delivery. However, pickups and deliveries from multiple shipments can be sequenced independently.
	Shipments []Shipment `json:"shipments,omitempty"`
	// Defines additional relationships between orders.
	Relations []RequestRelationsInner `json:"relations,omitempty"`
	// Deprecated
	Algorithm *Algorithm `json:"algorithm,omitempty"`
	// Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.
	Objectives []Objective `json:"objectives,omitempty"`
	// Specifies your own tranport time and distance matrices.
	CostMatrices []CostMatrix `json:"cost_matrices,omitempty"`
	// Specifies general configurations.
	Configuration *Configuration `json:"configuration,omitempty"`
}

// NewRequest instantiates a new Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequest() *Request {
	this := Request{}
	return &this
}

// NewRequestWithDefaults instantiates a new Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestWithDefaults() *Request {
	this := Request{}
	return &this
}

// GetVehicles returns the Vehicles field value if set, zero value otherwise.
func (o *Request) GetVehicles() []Vehicle {
	if o == nil || IsNil(o.Vehicles) {
		var ret []Vehicle
		return ret
	}
	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetVehiclesOk() ([]Vehicle, bool) {
	if o == nil || IsNil(o.Vehicles) {
		return nil, false
	}
	return o.Vehicles, true
}

// HasVehicles returns a boolean if a field has been set.
func (o *Request) HasVehicles() bool {
	if o != nil && !IsNil(o.Vehicles) {
		return true
	}

	return false
}

// SetVehicles gets a reference to the given []Vehicle and assigns it to the Vehicles field.
func (o *Request) SetVehicles(v []Vehicle) {
	o.Vehicles = v
}

// GetVehicleTypes returns the VehicleTypes field value if set, zero value otherwise.
func (o *Request) GetVehicleTypes() []VehicleType {
	if o == nil || IsNil(o.VehicleTypes) {
		var ret []VehicleType
		return ret
	}
	return o.VehicleTypes
}

// GetVehicleTypesOk returns a tuple with the VehicleTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetVehicleTypesOk() ([]VehicleType, bool) {
	if o == nil || IsNil(o.VehicleTypes) {
		return nil, false
	}
	return o.VehicleTypes, true
}

// HasVehicleTypes returns a boolean if a field has been set.
func (o *Request) HasVehicleTypes() bool {
	if o != nil && !IsNil(o.VehicleTypes) {
		return true
	}

	return false
}

// SetVehicleTypes gets a reference to the given []VehicleType and assigns it to the VehicleTypes field.
func (o *Request) SetVehicleTypes(v []VehicleType) {
	o.VehicleTypes = v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *Request) GetServices() []Service {
	if o == nil || IsNil(o.Services) {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetServicesOk() ([]Service, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Request) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *Request) SetServices(v []Service) {
	o.Services = v
}

// GetShipments returns the Shipments field value if set, zero value otherwise.
func (o *Request) GetShipments() []Shipment {
	if o == nil || IsNil(o.Shipments) {
		var ret []Shipment
		return ret
	}
	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetShipmentsOk() ([]Shipment, bool) {
	if o == nil || IsNil(o.Shipments) {
		return nil, false
	}
	return o.Shipments, true
}

// HasShipments returns a boolean if a field has been set.
func (o *Request) HasShipments() bool {
	if o != nil && !IsNil(o.Shipments) {
		return true
	}

	return false
}

// SetShipments gets a reference to the given []Shipment and assigns it to the Shipments field.
func (o *Request) SetShipments(v []Shipment) {
	o.Shipments = v
}

// GetRelations returns the Relations field value if set, zero value otherwise.
func (o *Request) GetRelations() []RequestRelationsInner {
	if o == nil || IsNil(o.Relations) {
		var ret []RequestRelationsInner
		return ret
	}
	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetRelationsOk() ([]RequestRelationsInner, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *Request) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given []RequestRelationsInner and assigns it to the Relations field.
func (o *Request) SetRelations(v []RequestRelationsInner) {
	o.Relations = v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
// Deprecated
func (o *Request) GetAlgorithm() Algorithm {
	if o == nil || IsNil(o.Algorithm) {
		var ret Algorithm
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Request) GetAlgorithmOk() (*Algorithm, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *Request) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given Algorithm and assigns it to the Algorithm field.
// Deprecated
func (o *Request) SetAlgorithm(v Algorithm) {
	o.Algorithm = &v
}

// GetObjectives returns the Objectives field value if set, zero value otherwise.
func (o *Request) GetObjectives() []Objective {
	if o == nil || IsNil(o.Objectives) {
		var ret []Objective
		return ret
	}
	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetObjectivesOk() ([]Objective, bool) {
	if o == nil || IsNil(o.Objectives) {
		return nil, false
	}
	return o.Objectives, true
}

// HasObjectives returns a boolean if a field has been set.
func (o *Request) HasObjectives() bool {
	if o != nil && !IsNil(o.Objectives) {
		return true
	}

	return false
}

// SetObjectives gets a reference to the given []Objective and assigns it to the Objectives field.
func (o *Request) SetObjectives(v []Objective) {
	o.Objectives = v
}

// GetCostMatrices returns the CostMatrices field value if set, zero value otherwise.
func (o *Request) GetCostMatrices() []CostMatrix {
	if o == nil || IsNil(o.CostMatrices) {
		var ret []CostMatrix
		return ret
	}
	return o.CostMatrices
}

// GetCostMatricesOk returns a tuple with the CostMatrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetCostMatricesOk() ([]CostMatrix, bool) {
	if o == nil || IsNil(o.CostMatrices) {
		return nil, false
	}
	return o.CostMatrices, true
}

// HasCostMatrices returns a boolean if a field has been set.
func (o *Request) HasCostMatrices() bool {
	if o != nil && !IsNil(o.CostMatrices) {
		return true
	}

	return false
}

// SetCostMatrices gets a reference to the given []CostMatrix and assigns it to the CostMatrices field.
func (o *Request) SetCostMatrices(v []CostMatrix) {
	o.CostMatrices = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *Request) GetConfiguration() Configuration {
	if o == nil || IsNil(o.Configuration) {
		var ret Configuration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Request) GetConfigurationOk() (*Configuration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *Request) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given Configuration and assigns it to the Configuration field.
func (o *Request) SetConfiguration(v Configuration) {
	o.Configuration = &v
}

func (o Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vehicles) {
		toSerialize["vehicles"] = o.Vehicles
	}
	if !IsNil(o.VehicleTypes) {
		toSerialize["vehicle_types"] = o.VehicleTypes
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if !IsNil(o.Shipments) {
		toSerialize["shipments"] = o.Shipments
	}
	if !IsNil(o.Relations) {
		toSerialize["relations"] = o.Relations
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Objectives) {
		toSerialize["objectives"] = o.Objectives
	}
	if !IsNil(o.CostMatrices) {
		toSerialize["cost_matrices"] = o.CostMatrices
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableRequest struct {
	value *Request
	isSet bool
}

func (v NullableRequest) Get() *Request {
	return v.value
}

func (v *NullableRequest) Set(val *Request) {
	v.value = val
	v.isSet = true
}

func (v NullableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequest(val *Request) *NullableRequest {
	return &NullableRequest{value: val, isSet: true}
}

func (v NullableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


